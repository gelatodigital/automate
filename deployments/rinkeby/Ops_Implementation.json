{
  "address": "0x88682F3D90ae60F65763F4f3A46044F620f948AB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_gelato",
          "type": "address"
        },
        {
          "internalType": "contract ITaskTreasuryUpgradable",
          "name": "_taskTreasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        }
      ],
      "name": "cancelTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_execDataOrSelector",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "enum LibDataTypes.Module[]",
              "name": "modules",
              "type": "uint8[]"
            },
            {
              "internalType": "bytes[]",
              "name": "args",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct LibDataTypes.ModuleData",
          "name": "_moduleData",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        }
      ],
      "name": "createTask",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taskCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_execData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "enum LibDataTypes.Module[]",
              "name": "modules",
              "type": "uint8[]"
            },
            {
              "internalType": "bytes[]",
              "name": "args",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct LibDataTypes.ModuleData",
          "name": "_moduleData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_txFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_useTaskTreasuryFunds",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_revertOnFailure",
          "type": "bool"
        }
      ],
      "name": "exec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "execAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taskCreator",
          "type": "address"
        }
      ],
      "name": "getTaskIdsByUser",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LibDataTypes.Module[]",
          "name": "_modules",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "_moduleAddresses",
          "type": "address[]"
        }
      ],
      "name": "setModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "taskCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LibDataTypes.Module",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "taskModuleAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskTreasury",
      "outputs": [
        {
          "internalType": "contract ITaskTreasuryUpgradable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "timedTask",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "nextExec",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "interval",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd81988cea7623f417bf12b8abf5dd8eaa966dfc93df9c531fef1d5671af5202",
  "receipt": {
    "to": null,
    "from": "0x5401fe33559A355638b9b37C9640a04a182fEff2",
    "contractAddress": "0x88682F3D90ae60F65763F4f3A46044F620f948AB",
    "transactionIndex": 17,
    "gasUsed": "4178410",
    "logsBloom": "0x
    "blockHash": "0xd4142723bd0634f06d9b31e7b94f9f81e33bb6290e99b2f0166d599193c1f2f0",
    "transactionHash": "0xfd81988cea7623f417bf12b8abf5dd8eaa966dfc93df9c531fef1d5671af5202",
    "logs": [],
    "blockNumber": 11338155,
    "cumulativeGasUsed": "14926407",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0630d1b8C2df3F0a68Df578D02075027a6397173",
    "0x77F19aF4614572732767B569979Bc3B407d63a68"
  ],
  "numDeployments": 3,
  "solcInputHash": "46e05d039a6f051c260568df03bedd4f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_gelato\",\"type\":\"address\"},{\"internalType\":\"contract ITaskTreasuryUpgradable\",\"name\":\"_taskTreasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"}],\"name\":\"cancelTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_execDataOrSelector\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"enum LibDataTypes.Module[]\",\"name\":\"modules\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"args\",\"type\":\"bytes[]\"}],\"internalType\":\"struct LibDataTypes.ModuleData\",\"name\":\"_moduleData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"createTask\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taskCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_execData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"enum LibDataTypes.Module[]\",\"name\":\"modules\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"args\",\"type\":\"bytes[]\"}],\"internalType\":\"struct LibDataTypes.ModuleData\",\"name\":\"_moduleData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useTaskTreasuryFunds\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_revertOnFailure\",\"type\":\"bool\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"execAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taskCreator\",\"type\":\"address\"}],\"name\":\"getTaskIdsByUser\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LibDataTypes.Module[]\",\"name\":\"_modules\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_moduleAddresses\",\"type\":\"address[]\"}],\"name\":\"setModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"taskCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LibDataTypes.Module\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"taskModuleAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskTreasury\",\"outputs\":[{\"internalType\":\"contract ITaskTreasuryUpgradable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"timedTask\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"nextExec\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interval\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelTask(bytes32)\":{\"params\":{\"taskId\":\"Unique hash of the task that is being cancelled. {See LibTaskId-getTaskId}\"}},\"createTask(address,bytes,(uint8[],bytes[]),address)\":{\"params\":{\"execAddress\":\"Address of contract that should be called by Gelato.\",\"execData\":\"Execution data to be called with / function selector if execution data is yet to be determined.\",\"feeToken\":\"Address of token to be used as payment. Use address(0) if TaskTreasury is being used, 0xeeeeee... for ETH or native tokens.\",\"moduleData\":\"Conditional modules that will be used. {See LibDataTypes-ModuleData}\"},\"returns\":{\"taskId\":\"Unique hash of the task created.\"}},\"exec(address,address,bytes,(uint8[],bytes[]),uint256,address,bool,bool)\":{\"params\":{\"execAddress\":\"Address of contract that should be called by Gelato.\",\"execData\":\"Execution data to be called with / function selector if execution data is yet to be determined.\",\"feeToken\":\"Token used to pay for the execution. ETH = 0xeeeeee...\",\"moduleData\":\"Conditional modules that will be used. {See LibDataTypes-ModuleData}\",\"revertOnFailure\":\"To revert or not if call to execAddress fails. (Used for off-chain simulations)\",\"taskCreator\":\"The address which created the task.\",\"txFee\":\"Fee paid to Gelato for execution, deducted on the TaskTreasury or transfered to Gelato.\",\"useTaskTreasuryFunds\":\"If taskCreator's balance on TaskTreasury should pay for the tx.\"}},\"getFeeDetails()\":{\"returns\":{\"_0\":\"uint256 Fee amount to be paid.\",\"_1\":\"address Token to be paid. (Determined and passed by taskCreator during createTask)\"}},\"getTaskIdsByUser(address)\":{\"params\":{\"taskCreator\":\"Address of task creator to query.\"},\"returns\":{\"_0\":\"bytes32[] List of taskIds created.\"}},\"setModule(uint8[],address[])\":{\"params\":{\"moduleAddresses\":\"List of addresses for respective modules.\",\"modules\":\"List of modules to be set\"}}},\"stateVariables\":{\"taskTreasury\":{\"return\":\"ITaskTreasuryUpgradable TaskTreasury contract interface\",\"returns\":{\"_0\":\"ITaskTreasuryUpgradable TaskTreasury contract interface\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelTask(bytes32)\":{\"notice\":\"Terminates a task that was created and Gelato can no longer execute it.\"},\"createTask(address,bytes,(uint8[],bytes[]),address)\":{\"notice\":\"Initiates a task with conditions which Gelato will monitor and execute when conditions are met.\"},\"exec(address,address,bytes,(uint8[],bytes[]),uint256,address,bool,bool)\":{\"notice\":\"Execution API called by Gelato.\"},\"getFeeDetails()\":{\"notice\":\"Helper function to query fee and feeToken to be used for payment. (For executions which pays itself)\"},\"getTaskIdsByUser(address)\":{\"notice\":\"Helper func to query all open tasks by a task creator.\"},\"setModule(uint8[],address[])\":{\"notice\":\"Sets the address of task modules. Only callable by proxy admin.\"},\"taskTreasury()\":{\"notice\":\"TaskTreasury contract where user deposit funds to be used for fee payments.\"}},\"notice\":\"Ops enables everyone to have Gelato monitor and execute transactions.ExecAddress refers to the contract that has the function which Gelato will call.Modules allow users to customise conditions and specifications when creating a task.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ops.sol\":\"Ops\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Ops.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Gelatofied} from \\\"./vendor/gelato/Gelatofied.sol\\\";\\nimport {GelatoBytes} from \\\"./vendor/gelato/GelatoBytes.sol\\\";\\nimport {Proxied} from \\\"./vendor/proxy/EIP173/Proxied.sol\\\";\\nimport {OpsStorage} from \\\"./OpsStorage.sol\\\";\\nimport {LibDataTypes} from \\\"./libraries/LibDataTypes.sol\\\";\\nimport {LibEvents} from \\\"./libraries/LibEvents.sol\\\";\\nimport {LibLegacyTask} from \\\"./libraries/LibLegacyTask.sol\\\";\\nimport {LibTaskId} from \\\"./libraries/LibTaskId.sol\\\";\\nimport {LibTaskModule} from \\\"./libraries/LibTaskModule.sol\\\";\\nimport {\\n    ITaskTreasuryUpgradable\\n} from \\\"./interfaces/ITaskTreasuryUpgradable.sol\\\";\\nimport {IOps} from \\\"./interfaces/IOps.sol\\\";\\n\\n/**\\n * @notice Ops enables everyone to have Gelato monitor and execute transactions.\\n * @notice ExecAddress refers to the contract that has the function which Gelato will call.\\n * @notice Modules allow users to customise conditions and specifications when creating a task.\\n */\\ncontract Ops is Gelatofied, Proxied, OpsStorage, IOps {\\n    using GelatoBytes for bytes;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // solhint-disable const-name-snakecase\\n    string public constant version = \\\"5\\\";\\n    ITaskTreasuryUpgradable public immutable override taskTreasury;\\n\\n    constructor(address payable _gelato, ITaskTreasuryUpgradable _taskTreasury)\\n        Gelatofied(_gelato)\\n    {\\n        taskTreasury = _taskTreasury;\\n    }\\n\\n    // prettier-ignore\\n    fallback(bytes calldata _callData) external returns(bytes memory returnData){\\n        returnData = _handleLegacyTaskCreation(_callData);\\n    }\\n\\n    ///@inheritdoc IOps\\n    function createTask(\\n        address _execAddress,\\n        bytes calldata _execDataOrSelector,\\n        LibDataTypes.ModuleData calldata _moduleData,\\n        address _feeToken\\n    ) external override returns (bytes32 taskId) {\\n        address taskCreator;\\n\\n        (taskCreator, _execAddress) = LibTaskModule.preCreateTask(\\n            msg.sender,\\n            _execAddress,\\n            taskModuleAddresses\\n        );\\n\\n        taskId = _createTask(\\n            taskCreator,\\n            _execAddress,\\n            _execDataOrSelector,\\n            _moduleData,\\n            _feeToken\\n        );\\n    }\\n\\n    ///@inheritdoc IOps\\n    function cancelTask(bytes32 _taskId) external {\\n        address _taskCreator = LibTaskModule.preCancelTask(\\n            _taskId,\\n            msg.sender,\\n            taskModuleAddresses\\n        );\\n\\n        _cancelTask(_taskCreator, _taskId);\\n    }\\n\\n    ///@inheritdoc IOps\\n    function exec(\\n        address _taskCreator,\\n        address _execAddress,\\n        bytes memory _execData,\\n        LibDataTypes.ModuleData calldata _moduleData,\\n        uint256 _txFee,\\n        address _feeToken,\\n        bool _useTaskTreasuryFunds,\\n        bool _revertOnFailure\\n    ) external onlyGelato {\\n        bytes32 taskId = LibTaskId.getTaskId(\\n            _taskCreator,\\n            _execAddress,\\n            _execData.memorySliceSelector(),\\n            _moduleData,\\n            _useTaskTreasuryFunds ? address(0) : _feeToken\\n        );\\n\\n        _exec(\\n            taskId,\\n            _taskCreator,\\n            _execAddress,\\n            _execData,\\n            _moduleData.modules,\\n            _txFee,\\n            _feeToken,\\n            _useTaskTreasuryFunds,\\n            _revertOnFailure\\n        );\\n    }\\n\\n    ///@inheritdoc IOps\\n    function setModule(\\n        LibDataTypes.Module[] calldata _modules,\\n        address[] calldata _moduleAddresses\\n    ) external onlyProxyAdmin {\\n        uint256 length = _modules.length;\\n        for (uint256 i; i < length; i++) {\\n            taskModuleAddresses[_modules[i]] = _moduleAddresses[i];\\n        }\\n    }\\n\\n    ///@inheritdoc IOps\\n    function getFeeDetails() external view returns (uint256, address) {\\n        return (fee, feeToken);\\n    }\\n\\n    ///@inheritdoc IOps\\n    function getTaskIdsByUser(address _taskCreator)\\n        external\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        bytes32[] memory taskIds = _createdTasks[_taskCreator].values();\\n\\n        return taskIds;\\n    }\\n\\n    function _createTask(\\n        address _taskCreator,\\n        address _execAddress,\\n        bytes memory _execDataOrSelector,\\n        LibDataTypes.ModuleData memory _moduleData,\\n        address _feeToken\\n    ) private returns (bytes32 taskId) {\\n        taskId = LibTaskId.getTaskId(\\n            _taskCreator,\\n            _execAddress,\\n            _execDataOrSelector.memorySliceSelector(),\\n            _moduleData,\\n            _feeToken\\n        );\\n\\n        require(\\n            !_createdTasks[_taskCreator].contains(taskId),\\n            \\\"Ops.createTask: Duplicate task\\\"\\n        );\\n\\n        LibTaskModule.onCreateTask(\\n            taskId,\\n            _taskCreator,\\n            _execAddress,\\n            _execDataOrSelector,\\n            _moduleData,\\n            taskModuleAddresses\\n        );\\n\\n        _createdTasks[_taskCreator].add(taskId);\\n\\n        emit LibEvents.TaskCreated(\\n            _taskCreator,\\n            _execAddress,\\n            _execDataOrSelector,\\n            _moduleData,\\n            _feeToken,\\n            taskId\\n        );\\n    }\\n\\n    function _cancelTask(address _taskCreator, bytes32 _taskId) private {\\n        require(\\n            _createdTasks[_taskCreator].contains(_taskId),\\n            \\\"Ops.cancelTask: Task not found\\\"\\n        );\\n\\n        _createdTasks[_taskCreator].remove(_taskId);\\n\\n        emit LibEvents.TaskCancelled(_taskId, _taskCreator);\\n    }\\n\\n    // solhint-disable function-max-lines\\n    function _exec(\\n        bytes32 _taskId,\\n        address _taskCreator,\\n        address _execAddress,\\n        bytes memory _execData,\\n        LibDataTypes.Module[] memory _modules,\\n        uint256 _txFee,\\n        address _feeToken,\\n        bool _useTaskTreasuryFunds,\\n        bool _revertOnFailure\\n    ) private {\\n        require(\\n            _createdTasks[_taskCreator].contains(_taskId),\\n            \\\"Ops.exec: Task not found\\\"\\n        );\\n\\n        if (!_useTaskTreasuryFunds) {\\n            fee = _txFee;\\n            feeToken = _feeToken;\\n        }\\n\\n        bool success = LibTaskModule.onExecTask(\\n            _taskId,\\n            _taskCreator,\\n            _execAddress,\\n            _execData,\\n            _modules,\\n            _revertOnFailure,\\n            taskModuleAddresses\\n        );\\n\\n        if (_useTaskTreasuryFunds) {\\n            taskTreasury.useFunds(_taskCreator, _feeToken, _txFee);\\n        } else {\\n            delete fee;\\n            delete feeToken;\\n        }\\n\\n        emit LibEvents.ExecSuccess(\\n            _txFee,\\n            _feeToken,\\n            _execAddress,\\n            _execData,\\n            _taskId,\\n            success\\n        );\\n    }\\n\\n    function _handleLegacyTaskCreation(bytes calldata _callData)\\n        private\\n        returns (bytes memory returnData)\\n    {\\n        bytes4 funcSig = _callData.calldataSliceSelector();\\n\\n        (\\n            address execAddress,\\n            bytes memory execData,\\n            LibDataTypes.ModuleData memory moduleData,\\n            address feeToken_\\n        ) = LibLegacyTask.getCreateTaskArg(funcSig, _callData);\\n\\n        bytes32 taskId = _createTask(\\n            msg.sender,\\n            execAddress,\\n            execData,\\n            moduleData,\\n            feeToken_\\n        );\\n\\n        returnData = abi.encodePacked(taskId);\\n    }\\n}\\n\",\"keccak256\":\"0x4e0345d2bf43426ac9ddf8d2ad6ddbd93e460dcee3329e8971a1ed7b0821c51d\",\"license\":\"UNLICENSED\"},\"contracts/OpsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibDataTypes} from \\\"./libraries/LibDataTypes.sol\\\";\\n\\n/**\\n * @notice Storage layout of Ops smart contract.\\n */\\n// solhint-disable max-states-count\\nabstract contract OpsStorage {\\n    mapping(bytes32 => address) public taskCreator; ///@dev Deprecated\\n    mapping(bytes32 => address) public execAddresses; ///@dev Deprecated\\n    mapping(address => EnumerableSet.Bytes32Set) internal _createdTasks;\\n\\n    uint256 public fee;\\n    address public feeToken;\\n\\n    ///@dev Appended State\\n    mapping(bytes32 => LibDataTypes.Time) public timedTask;\\n    mapping(LibDataTypes.Module => address) public taskModuleAddresses;\\n}\\n\",\"keccak256\":\"0x9437f759bed13c3f6df0f8737530bf1714e5444169705df2bedd85efdc5bd705\",\"license\":\"UNLICENSED\"},\"contracts/functions/FExec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport {GelatoBytes} from \\\"../vendor/gelato/GelatoBytes.sol\\\";\\n\\n// solhint-disable private-vars-leading-underscore\\n// solhint-disable func-visibility\\n\\nfunction _call(\\n    address _add,\\n    bytes memory _data,\\n    uint256 _value,\\n    bool _revertOnFailure,\\n    string memory _tracingInfo\\n) returns (bool success, bytes memory returnData) {\\n    (success, returnData) = _add.call{value: _value}(_data);\\n\\n    if (!success && _revertOnFailure)\\n        GelatoBytes.revertWithError(returnData, _tracingInfo);\\n}\\n\\nfunction _delegateCall(\\n    address _add,\\n    bytes memory _data,\\n    string memory _tracingInfo\\n) returns (bool success, bytes memory returnData) {\\n    (success, returnData) = _add.delegatecall(_data);\\n\\n    if (!success) GelatoBytes.revertWithError(returnData, _tracingInfo);\\n}\\n\",\"keccak256\":\"0x48375d0645cf4dfe7d3f18dc727cbb2322a09233a2e9cce9352a73acc357bf07\",\"license\":\"MIT\"},\"contracts/functions/FUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n// solhint-disable private-vars-leading-underscore\\n// solhint-disable func-visibility\\nfunction _transfer(\\n    address payable _to,\\n    address _paymentToken,\\n    uint256 _amount\\n) {\\n    if (_paymentToken == ETH) {\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"_transfer: ETH transfer failed\\\");\\n    } else {\\n        SafeERC20.safeTransfer(IERC20(_paymentToken), _to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xecf150c4e9030703ac85cd5192fb98eca2e68a8df00ca50efd99fc8813cfb4a2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ILegacyOps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ITaskTreasuryUpgradable} from \\\"./ITaskTreasuryUpgradable.sol\\\";\\n\\n/**\\n * @notice Legacy Ops interface with individual create task function for each task type.\\n * @notice These function signatures are still supported via fallback. {See Ops.sol-fallback}\\n */\\ninterface ILegacyOps {\\n    function createTask(\\n        address _execAddress,\\n        bytes4 _execSelector,\\n        address _resolverAddress,\\n        bytes calldata _resolverData\\n    ) external returns (bytes32 taskId);\\n\\n    function createTaskNoPrepayment(\\n        address _execAddress,\\n        bytes4 _execSelector,\\n        address _resolverAddress,\\n        bytes calldata _resolverData,\\n        address _feeToken\\n    ) external returns (bytes32 taskId);\\n\\n    function createTimedTask(\\n        uint128 _startTime,\\n        uint128 _interval,\\n        address _execAddress,\\n        bytes4 _execSelector,\\n        address _resolverAddress,\\n        bytes calldata _resolverData,\\n        address _feeToken,\\n        bool _useTreasury\\n    ) external returns (bytes32 taskId);\\n\\n    function cancelTask(bytes32 _taskId) external;\\n\\n    function exec(\\n        uint256 _txFee,\\n        address _feeToken,\\n        address _taskCreator,\\n        bool _useTaskTreasuryFunds,\\n        bool _revertOnFailure,\\n        bytes32 _resolverHash,\\n        address _execAddress,\\n        bytes calldata _execData\\n    ) external;\\n\\n    function getFeeDetails() external view returns (uint256, address);\\n\\n    function getTaskIdsByUser(address _taskCreator)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function taskTreasury() external view returns (ITaskTreasuryUpgradable);\\n}\\n\",\"keccak256\":\"0x6df18a579c4026d1480d59034d45e3766af037de0a213af139f81556c0cc710c\",\"license\":\"MIT\"},\"contracts/interfaces/IOps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {LibDataTypes} from \\\"../libraries/LibDataTypes.sol\\\";\\nimport {ITaskTreasuryUpgradable} from \\\"./ITaskTreasuryUpgradable.sol\\\";\\n\\n// solhint-disable max-line-length\\ninterface IOps {\\n    /**\\n     * @notice Initiates a task with conditions which Gelato will monitor and execute when conditions are met.\\n     *\\n     * @param execAddress Address of contract that should be called by Gelato.\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\n     * @param moduleData Conditional modules that will be used. {See LibDataTypes-ModuleData}\\n     * @param feeToken Address of token to be used as payment. Use address(0) if TaskTreasury is being used, 0xeeeeee... for ETH or native tokens.\\n     *\\n     * @return taskId Unique hash of the task created.\\n     */\\n    function createTask(\\n        address execAddress,\\n        bytes calldata execData,\\n        LibDataTypes.ModuleData calldata moduleData,\\n        address feeToken\\n    ) external returns (bytes32 taskId);\\n\\n    /**\\n     * @notice Terminates a task that was created and Gelato can no longer execute it.\\n     *\\n     * @param taskId Unique hash of the task that is being cancelled. {See LibTaskId-getTaskId}\\n     */\\n    function cancelTask(bytes32 taskId) external;\\n\\n    /**\\n     * @notice Execution API called by Gelato.\\n     *\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called by Gelato.\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\n     * @param moduleData Conditional modules that will be used. {See LibDataTypes-ModuleData}\\n     * @param txFee Fee paid to Gelato for execution, deducted on the TaskTreasury or transfered to Gelato.\\n     * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...\\n     * @param useTaskTreasuryFunds If taskCreator's balance on TaskTreasury should pay for the tx.\\n     * @param revertOnFailure To revert or not if call to execAddress fails. (Used for off-chain simulations)\\n     */\\n    function exec(\\n        address taskCreator,\\n        address execAddress,\\n        bytes memory execData,\\n        LibDataTypes.ModuleData calldata moduleData,\\n        uint256 txFee,\\n        address feeToken,\\n        bool useTaskTreasuryFunds,\\n        bool revertOnFailure\\n    ) external;\\n\\n    /**\\n     * @notice Sets the address of task modules. Only callable by proxy admin.\\n     *\\n     * @param modules List of modules to be set\\n     * @param moduleAddresses List of addresses for respective modules.\\n     */\\n    function setModule(\\n        LibDataTypes.Module[] calldata modules,\\n        address[] calldata moduleAddresses\\n    ) external;\\n\\n    /**\\n     * @notice Helper function to query fee and feeToken to be used for payment. (For executions which pays itself)\\n     *\\n     * @return uint256 Fee amount to be paid.\\n     * @return address Token to be paid. (Determined and passed by taskCreator during createTask)\\n     */\\n    function getFeeDetails() external view returns (uint256, address);\\n\\n    /**\\n     * @notice Helper func to query all open tasks by a task creator.\\n     *\\n     * @param taskCreator Address of task creator to query.\\n     *\\n     * @return bytes32[] List of taskIds created.\\n     */\\n    function getTaskIdsByUser(address taskCreator)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice TaskTreasury contract where user deposit funds to be used for fee payments.\\n     *\\n     * @return ITaskTreasuryUpgradable TaskTreasury contract interface\\n     */\\n    function taskTreasury() external view returns (ITaskTreasuryUpgradable);\\n}\\n\",\"keccak256\":\"0xc53ef90280ea2be44a2d229091a1a9ab1602bb7331ea9f75810cba2742f2eb43\",\"license\":\"MIT\"},\"contracts/interfaces/ITaskModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\n// solhint-disable max-line-length\\ninterface ITaskModule {\\n    /**\\n     * @notice Called before generating taskId.\\n     * @dev Modules can override execAddress or taskCreator. {See ProxyModule-preCreateTask}\\n     *\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called.\\n     *\\n     * @return address Overriden or original taskCreator.\\n     * @return address Overriden or original execAddress.\\n     */\\n    function preCreateTask(address taskCreator, address execAddress)\\n        external\\n        returns (address, address);\\n\\n    /**\\n     * @notice Initiates task module whenever `createTask` is being called.\\n     *\\n     * @param taskId Unique hash of the task created.\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called.\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\n     * @param initModuleArg Encoded arguments for module if any.\\n     */\\n    function onCreateTask(\\n        bytes32 taskId,\\n        address taskCreator,\\n        address execAddress,\\n        bytes calldata execData,\\n        bytes calldata initModuleArg\\n    ) external;\\n\\n    /**\\n     * @notice Called before taskId is removed from _createdTasks[].\\n     * @dev Modules can override taskCreator.\\n     *\\n     * @param taskId Unique hash of the task created.\\n     * @param taskCreator The address which created the task.\\n     *\\n     * @return address Overriden or original taskCreator.\\n     */\\n    function preCancelTask(bytes32 taskId, address taskCreator)\\n        external\\n        returns (address);\\n\\n    /**\\n     * @notice Called during `exec` and before execAddress is called.\\n     *\\n     * @param taskId Unique hash of the task created.\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called.\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\n     *\\n     * @return address Overriden or original execution address.\\n     * @return bytes Overriden or original execution data.\\n     */\\n    function preExecCall(\\n        bytes32 taskId,\\n        address taskCreator,\\n        address execAddress,\\n        bytes calldata execData\\n    ) external returns (address, bytes memory);\\n\\n    /**\\n     * @notice Called during `exec` and after execAddress is called.\\n     *\\n     * @param taskId Unique hash of the task created.\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called.\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\n     */\\n    function postExecCall(\\n        bytes32 taskId,\\n        address taskCreator,\\n        address execAddress,\\n        bytes calldata execData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd537257852c23ce7d0bc392b03aba1efd750be372d64a01edf1c726ef7c4274d\",\"license\":\"MIT\"},\"contracts/interfaces/ITaskTreasuryUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITaskTreasuryUpgradable {\\n    /// @notice Events ///\\n\\n    event FundsDeposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 indexed amount\\n    );\\n\\n    event FundsWithdrawn(\\n        address indexed receiver,\\n        address indexed initiator,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    event LogDeductFees(\\n        address indexed user,\\n        address indexed executor,\\n        address indexed token,\\n        uint256 fees,\\n        address service\\n    );\\n\\n    event UpdatedService(address indexed service, bool add);\\n\\n    event UpdatedMaxFee(uint256 indexed maxFee);\\n\\n    /// @notice External functions ///\\n\\n    function depositFunds(\\n        address receiver,\\n        address token,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdrawFunds(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function useFunds(\\n        address user,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function updateMaxFee(uint256 _newMaxFee) external;\\n\\n    function updateWhitelistedService(address service, bool isWhitelist)\\n        external;\\n\\n    /// @notice External view functions ///\\n\\n    function getCreditTokensByUser(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getTotalCreditTokensByUser(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getWhitelistedServices() external view returns (address[] memory);\\n\\n    function totalUserTokenBalance(address user, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userTokenBalance(address user, address token)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x4b692a8a7e0e365cbed8f03704a97d7ffa06736a96f1a2206983bb4e8ead9b75\",\"license\":\"MIT\"},\"contracts/libraries/LibDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\n// solhint-disable max-line-length\\nlibrary LibDataTypes {\\n    /**\\n     * @notice Whitelisted modules that are available for users to customise conditions and specifications of their tasks.\\n     *\\n     * @param RESOLVER Use dynamic condition & input data for execution. {See ResolverModule.sol}\\n     * @param TIME Repeated execution of task at a specified timing and interval. {See TimeModule.sol}\\n     * @param PROXY Creates a dedicated caller (msg.sender) to be used when executing the task. {See ProxyModule.sol}\\n     * @param SINGLE_EXEC Task is cancelled after one execution. {See SingleExecModule.sol}\\n     */\\n    enum Module {\\n        RESOLVER,\\n        TIME,\\n        PROXY,\\n        SINGLE_EXEC\\n    }\\n\\n    /**\\n     * @notice Struct to contain modules and their relative arguments that are used for task creation.\\n     *\\n     * @param modules List of selected modules.\\n     * @param args Arguments of modules if any. Pass \\\"0x\\\" for modules which does not require args {See encodeModuleArg}\\n     */\\n    struct ModuleData {\\n        Module[] modules;\\n        bytes[] args;\\n    }\\n\\n    /**\\n     * @notice Struct for time module.\\n     *\\n     * @param nextExec Time when the next execution should occur.\\n     * @param interval Time interval between each execution.\\n     */\\n    struct Time {\\n        uint128 nextExec;\\n        uint128 interval;\\n    }\\n}\\n\",\"keccak256\":\"0x51822b759b6066c148adb18620e888ec4b4353b58678a5ebd4ba1cc10cff83b8\",\"license\":\"MIT\"},\"contracts/libraries/LibEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport {LibDataTypes} from \\\"./LibDataTypes.sol\\\";\\n\\nlibrary LibEvents {\\n    /**\\n     * @notice Emitted when `createTask` is called.\\n     *\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that is called by Gelato.\\n     * @param execDataOrSelector Execution data / function selector.\\n     * @param moduleData Conditional modules used. {See LibDataTypes-ModuleData}\\n     * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...\\n     * @param taskId Unique hash of the task. {See LibTaskId-getTaskId}\\n     */\\n    event TaskCreated(\\n        address indexed taskCreator,\\n        address indexed execAddress,\\n        bytes execDataOrSelector,\\n        LibDataTypes.ModuleData moduleData,\\n        address feeToken,\\n        bytes32 indexed taskId\\n    );\\n\\n    /**\\n     * @notice Emitted when `cancelTask` is called.\\n     *\\n     * @param taskId Unique hash of the task. {See LibTaskId-getTaskId}\\n     * @param taskCreator The address which owned the task.\\n     */\\n    event TaskCancelled(bytes32 taskId, address taskCreator);\\n\\n    /**\\n     * @notice Emitted when `exec` is called.\\n     *\\n     * @param txFee Fee paid to Gelato for execution\\n     * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...\\n     * @param execAddress Address of contract that will be called by Gelato.\\n     * @param execData Execution data / function selector.\\n     * @param taskId Unique hash of the task. {See LibTaskId-getTaskId}\\n     * @param callSuccess Status of the call to execAddress.\\n     */\\n    event ExecSuccess(\\n        uint256 indexed txFee,\\n        address indexed feeToken,\\n        address indexed execAddress,\\n        bytes execData,\\n        bytes32 taskId,\\n        bool callSuccess\\n    );\\n\\n    /**\\n     * @notice Emitted when TimeModule is initialised.\\n     *\\n     * @param taskId Unique hash of the task. {See LibTaskId-getTaskId}\\n     * @param nextExec Time when the next execution will occur.\\n     * @param interval Time interval between each execution.\\n     */\\n    event TimerSet(\\n        bytes32 indexed taskId,\\n        uint128 indexed nextExec,\\n        uint128 indexed interval\\n    );\\n}\\n\",\"keccak256\":\"0x9b323ae92e046ff9fa10031abb70d748fc25cfa7b2d829d0a1d3bf4da220f05b\",\"license\":\"MIT\"},\"contracts/libraries/LibLegacyTask.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport {LibDataTypes} from \\\"./LibDataTypes.sol\\\";\\nimport {ILegacyOps} from \\\"../interfaces/ILegacyOps.sol\\\";\\n\\n/**\\n * @notice Library to keep task creation methods backwards compatible.\\n * @notice Legacy create task methods can be found in ILegacyOps.sol\\n */\\nlibrary LibLegacyTask {\\n    /**\\n     * @notice Use legacy ops create task calldata to construct\\n     * arguments that conforms to current create task format.\\n     *\\n     * @param _funcSig Function signature of calldata.\\n     * @param _callData Calldata that was passed from fallback function.\\n     */\\n    function getCreateTaskArg(bytes4 _funcSig, bytes calldata _callData)\\n        internal\\n        pure\\n        returns (\\n            address execAddress,\\n            bytes memory execData,\\n            LibDataTypes.ModuleData memory moduleData,\\n            address feeToken\\n        )\\n    {\\n        if (_funcSig == ILegacyOps.createTask.selector) {\\n            (execAddress, execData, moduleData, feeToken) = _resolveCreateTask(\\n                _callData[4:]\\n            );\\n        } else if (_funcSig == ILegacyOps.createTaskNoPrepayment.selector) {\\n            (\\n                execAddress,\\n                execData,\\n                moduleData,\\n                feeToken\\n            ) = _resolveCreateTaskNoPrepayment(_callData[4:]);\\n        } else if (_funcSig == ILegacyOps.createTimedTask.selector) {\\n            (\\n                execAddress,\\n                execData,\\n                moduleData,\\n                feeToken\\n            ) = _resolveCreateTimedTask(_callData[4:]);\\n        } else revert(\\\"Ops.createTask: Function not found\\\");\\n    }\\n\\n    function _resolveCreateTask(bytes calldata _callDataSliced)\\n        private\\n        pure\\n        returns (\\n            address execAddress,\\n            bytes memory execData,\\n            LibDataTypes.ModuleData memory moduleData,\\n            address feeToken\\n        )\\n    {\\n        bytes4 execSelector;\\n        address resolverAddress;\\n        bytes memory resolverData;\\n\\n        (execAddress, execSelector, resolverAddress, resolverData) = abi.decode(\\n            _callDataSliced,\\n            (address, bytes4, address, bytes)\\n        );\\n\\n        LibDataTypes.Module[] memory modules = new LibDataTypes.Module[](1);\\n        modules[0] = LibDataTypes.Module.RESOLVER;\\n\\n        bytes[] memory args = new bytes[](1);\\n        args[0] = abi.encode(resolverAddress, resolverData);\\n\\n        moduleData = LibDataTypes.ModuleData(modules, args);\\n\\n        execData = abi.encodePacked(execSelector);\\n        feeToken = address(0);\\n    }\\n\\n    function _resolveCreateTaskNoPrepayment(bytes calldata _callDataSliced)\\n        private\\n        pure\\n        returns (\\n            address execAddress,\\n            bytes memory execData,\\n            LibDataTypes.ModuleData memory moduleData,\\n            address feeToken\\n        )\\n    {\\n        bytes4 execSelector;\\n        address resolverAddress;\\n        bytes memory resolverData;\\n\\n        (\\n            execAddress,\\n            execSelector,\\n            resolverAddress,\\n            resolverData,\\n            feeToken\\n        ) = abi.decode(\\n            _callDataSliced,\\n            (address, bytes4, address, bytes, address)\\n        );\\n\\n        LibDataTypes.Module[] memory modules = new LibDataTypes.Module[](1);\\n        modules[0] = LibDataTypes.Module.RESOLVER;\\n\\n        bytes[] memory args = new bytes[](1);\\n        args[0] = abi.encode(resolverAddress, resolverData);\\n\\n        moduleData = LibDataTypes.ModuleData(modules, args);\\n\\n        execData = abi.encodePacked(execSelector);\\n    }\\n\\n    function _resolveCreateTimedTask(bytes calldata _callDataSliced)\\n        private\\n        pure\\n        returns (\\n            address execAddress,\\n            bytes memory execData,\\n            LibDataTypes.ModuleData memory moduleData,\\n            address feeToken\\n        )\\n    {\\n        bytes memory resolverModuleArgs;\\n        bytes memory timeModuleArgs;\\n        (\\n            execAddress,\\n            execData,\\n            feeToken,\\n            resolverModuleArgs,\\n            timeModuleArgs\\n        ) = _decodeTimedTaskCallData(_callDataSliced);\\n        LibDataTypes.Module[] memory modules = new LibDataTypes.Module[](2);\\n        modules[0] = LibDataTypes.Module.RESOLVER;\\n        modules[1] = LibDataTypes.Module.TIME;\\n\\n        bytes[] memory args = new bytes[](2);\\n        args[0] = resolverModuleArgs;\\n        args[1] = timeModuleArgs;\\n\\n        moduleData = LibDataTypes.ModuleData(modules, args);\\n    }\\n\\n    function _decodeTimedTaskCallData(bytes calldata _callDataSliced)\\n        private\\n        pure\\n        returns (\\n            address,\\n            bytes memory,\\n            address,\\n            bytes memory,\\n            bytes memory\\n        )\\n    {\\n        (\\n            uint128 startTime,\\n            uint128 interval,\\n            address execAddress,\\n            bytes4 execSelector,\\n            address resolverAddress,\\n            bytes memory resolverData,\\n            address feeToken,\\n            bool useTreasury\\n        ) = abi.decode(\\n                _callDataSliced,\\n                (\\n                    uint128,\\n                    uint128,\\n                    address,\\n                    bytes4,\\n                    address,\\n                    bytes,\\n                    address,\\n                    bool\\n                )\\n            );\\n\\n        return (\\n            execAddress,\\n            abi.encodePacked(execSelector),\\n            feeToken = useTreasury ? address(0) : feeToken,\\n            abi.encode(resolverAddress, resolverData),\\n            abi.encode(startTime, interval)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0fd3f63631f8d588a60b547b77a51138ae1c187a1db5fd735a6ff74059402b97\",\"license\":\"MIT\"},\"contracts/libraries/LibTaskId.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {LibDataTypes} from \\\"./LibDataTypes.sol\\\";\\n\\n/**\\n * @notice Library to compute taskId of legacy and current tasks.\\n */\\n// solhint-disable max-line-length\\nlibrary LibTaskId {\\n    /**\\n     * @notice Returns taskId of taskCreator.\\n     * @notice To maintain the taskId of legacy tasks, if\\n     * resolver module or resolver and time module is used,\\n     * we will compute task id the legacy way.\\n     *\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that will be called by Gelato.\\n     * @param execSelector Signature of the function which will be called by Gelato.\\n     * @param moduleData  Conditional modules that will be used. {See LibDataTypes-ModuleData}\\n     * @param feeToken Address of token to be used as payment. Use address(0) if TaskTreasury is being used, 0xeeeeee... for ETH or native tokens.\\n     */\\n    function getTaskId(\\n        address taskCreator,\\n        address execAddress,\\n        bytes4 execSelector,\\n        LibDataTypes.ModuleData memory moduleData,\\n        address feeToken\\n    ) internal pure returns (bytes32 taskId) {\\n        if (_shouldGetLegacyTaskId(moduleData.modules)) {\\n            bytes32 resolverHash = _getResolverHash(moduleData.args[0]);\\n\\n            taskId = getLegacyTaskId(\\n                taskCreator,\\n                execAddress,\\n                execSelector,\\n                feeToken == address(0),\\n                feeToken,\\n                resolverHash\\n            );\\n        } else {\\n            taskId = keccak256(\\n                abi.encode(\\n                    taskCreator,\\n                    execAddress,\\n                    execSelector,\\n                    moduleData,\\n                    feeToken\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns taskId of taskCreator.\\n     * @notice Legacy way of computing taskId.\\n     *\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that will be called by Gelato.\\n     * @param execSelector Signature of the function which will be called by Gelato.\\n     * @param useTaskTreasuryFunds Wether fee should be deducted from TaskTreasury.\\n     * @param feeToken Address of token to be used as payment. Use address(0) if TaskTreasury is being used, 0xeeeeee... for ETH or native tokens.\\n     * @param resolverHash Hash of resolverAddress and resolverData {See getResolverHash}\\n     */\\n    function getLegacyTaskId(\\n        address taskCreator,\\n        address execAddress,\\n        bytes4 execSelector,\\n        bool useTaskTreasuryFunds,\\n        address feeToken,\\n        bytes32 resolverHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    taskCreator,\\n                    execAddress,\\n                    execSelector,\\n                    useTaskTreasuryFunds,\\n                    feeToken,\\n                    resolverHash\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev For legacy tasks, resolvers are compulsory. Time tasks were also introduced.\\n     * The sequence of Module is enforced in {LibTaskModule-_validModules}\\n     */\\n    function _shouldGetLegacyTaskId(LibDataTypes.Module[] memory _modules)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        uint256 length = _modules.length;\\n\\n        if (\\n            (length == 1 && _modules[0] == LibDataTypes.Module.RESOLVER) ||\\n            (length == 2 &&\\n                _modules[0] == LibDataTypes.Module.RESOLVER &&\\n                _modules[1] == LibDataTypes.Module.TIME)\\n        ) return true;\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Acquire resolverHash which is required to compute legacyTaskId.\\n     *\\n     * @param _resolverModuleArg Encoded value of resolverAddress and resolverData\\n     */\\n    function _getResolverHash(bytes memory _resolverModuleArg)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(_resolverModuleArg);\\n    }\\n}\\n\",\"keccak256\":\"0xce6a5f283bdd5f5bc477bfac787620966e14d770658f9a24c0d1d2716080ee1b\",\"license\":\"UNLICENSED\"},\"contracts/libraries/LibTaskModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport {_call, _delegateCall} from \\\"../functions/FExec.sol\\\";\\nimport {LibDataTypes} from \\\"./LibDataTypes.sol\\\";\\nimport {LibTaskModuleConfig} from \\\"./LibTaskModuleConfig.sol\\\";\\nimport {ITaskModule} from \\\"../interfaces/ITaskModule.sol\\\";\\n\\n/**\\n * @notice Library to call task modules on task creation and execution.\\n */\\nlibrary LibTaskModule {\\n    using LibTaskModuleConfig for LibDataTypes.Module;\\n\\n    /**\\n     * @notice Delegate calls task modules before generating taskId.\\n     *\\n     * @param _execAddress Address of contract that will be called by Gelato.\\n     * @param _taskCreator The address which created the task.\\n     * @param taskModuleAddresses The storage reference to the mapping of modules to their address.\\n     */\\n    function preCreateTask(\\n        address _taskCreator,\\n        address _execAddress,\\n        mapping(LibDataTypes.Module => address) storage taskModuleAddresses\\n    ) internal returns (address, address) {\\n        uint256 length = uint256(type(LibDataTypes.Module).max);\\n\\n        for (uint256 i; i <= length; i++) {\\n            LibDataTypes.Module module = LibDataTypes.Module(i);\\n            if (!module.requirePreCreate()) continue;\\n\\n            address moduleAddress = taskModuleAddresses[module];\\n            _moduleInitialised(moduleAddress);\\n\\n            bytes memory delegatecallData = abi.encodeWithSelector(\\n                ITaskModule.preCreateTask.selector,\\n                _taskCreator,\\n                _execAddress\\n            );\\n\\n            (, bytes memory returnData) = _delegateCall(\\n                moduleAddress,\\n                delegatecallData,\\n                \\\"Ops.preCreateTask: \\\"\\n            );\\n\\n            (_taskCreator, _execAddress) = abi.decode(\\n                returnData,\\n                (address, address)\\n            );\\n        }\\n\\n        return (_taskCreator, _execAddress);\\n    }\\n\\n    /**\\n     * @notice Delegate calls task modules on create task to initialise them.\\n     *\\n     * @param _taskId Unique hash of the task. {See LibTaskId-getTaskId}\\n     * @param _taskCreator The address which created the task.\\n     * @param _execAddress Address of contract that will be called by Gelato.\\n     * @param _execData Execution data to be called with / function selector.\\n     * @param _moduleData Modules that will be used for the task. {See LibDataTypes-ModuleData}\\n     * @param taskModuleAddresses The storage reference to the mapping of modules to their address.\\n     */\\n    function onCreateTask(\\n        bytes32 _taskId,\\n        address _taskCreator,\\n        address _execAddress,\\n        bytes memory _execData,\\n        LibDataTypes.ModuleData memory _moduleData,\\n        mapping(LibDataTypes.Module => address) storage taskModuleAddresses\\n    ) internal {\\n        uint256 length = _moduleData.modules.length;\\n\\n        _validModules(length, _moduleData.modules);\\n\\n        for (uint256 i; i < length; i++) {\\n            LibDataTypes.Module module = _moduleData.modules[i];\\n            if (!module.requireOnCreate()) continue;\\n\\n            address moduleAddress = taskModuleAddresses[module];\\n            _moduleInitialised(moduleAddress);\\n\\n            bytes memory delegatecallData = abi.encodeWithSelector(\\n                ITaskModule.onCreateTask.selector,\\n                _taskId,\\n                _taskCreator,\\n                _execAddress,\\n                _execData,\\n                _moduleData.args[i]\\n            );\\n\\n            _delegateCall(\\n                moduleAddress,\\n                delegatecallData,\\n                \\\"Ops.onCreateTask: \\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Delegate calls task modules before removing task.\\n     *\\n     * @param _taskId Unique hash of the task. {See LibTaskId-getTaskId}\\n     * @param _taskCreator The address which created the task.\\n     * @param taskModuleAddresses The storage reference to the mapping of modules to their address.\\n     */\\n    function preCancelTask(\\n        bytes32 _taskId,\\n        address _taskCreator,\\n        mapping(LibDataTypes.Module => address) storage taskModuleAddresses\\n    ) internal returns (address) {\\n        uint256 length = uint256(type(LibDataTypes.Module).max);\\n\\n        for (uint256 i; i <= length; i++) {\\n            LibDataTypes.Module module = LibDataTypes.Module(i);\\n\\n            if (!module.requirePreCancel()) continue;\\n\\n            address moduleAddress = taskModuleAddresses[module];\\n            _moduleInitialised(moduleAddress);\\n\\n            bytes memory delegatecallData = abi.encodeWithSelector(\\n                ITaskModule.preCancelTask.selector,\\n                _taskId,\\n                _taskCreator\\n            );\\n\\n            (, bytes memory returnData) = _delegateCall(\\n                moduleAddress,\\n                delegatecallData,\\n                \\\"Ops.preCancelTask: \\\"\\n            );\\n\\n            (_taskCreator) = abi.decode(returnData, (address));\\n        }\\n\\n        return _taskCreator;\\n    }\\n\\n    /**\\n     * @notice Delegate calls task modules on exec.\\n     *\\n     * @param _taskId Unique hash of the task. {See LibTaskId-getTaskId}\\n     * @param _taskCreator The address which created the task.\\n     * @param _execAddress Address of contract that will be called by Gelato.\\n     * @param _execData Execution data to be called with / function selector.\\n     * @param _modules Modules that is used for the task. {See LibDataTypes-Module}\\n     * @param _revertOnFailure To revert or not if call to execAddress fails.\\n     * @param taskModuleAddresses The storage reference to the mapping of modules to their address.\\n     */\\n    function onExecTask(\\n        bytes32 _taskId,\\n        address _taskCreator,\\n        address _execAddress,\\n        bytes memory _execData,\\n        LibDataTypes.Module[] memory _modules,\\n        bool _revertOnFailure,\\n        mapping(LibDataTypes.Module => address) storage taskModuleAddresses\\n    ) internal returns (bool callSuccess) {\\n        address[] memory moduleAddresses = _getModuleAddresses(\\n            _modules,\\n            taskModuleAddresses\\n        );\\n\\n        (_execAddress, _execData) = _preExecCall(\\n            _taskId,\\n            _taskCreator,\\n            _execAddress,\\n            _execData,\\n            _modules,\\n            moduleAddresses\\n        );\\n\\n        (callSuccess, ) = _call(\\n            _execAddress,\\n            abi.encodePacked(_execData, _taskCreator),\\n            0,\\n            _revertOnFailure,\\n            \\\"Ops.exec: \\\"\\n        );\\n\\n        _postExecCall(\\n            _taskId,\\n            _taskCreator,\\n            _execAddress,\\n            _execData,\\n            _modules,\\n            moduleAddresses\\n        );\\n    }\\n\\n    function _preExecCall(\\n        bytes32 _taskId,\\n        address _taskCreator,\\n        address _execAddress,\\n        bytes memory _execData,\\n        LibDataTypes.Module[] memory _modules,\\n        address[] memory _moduleAddresses\\n    ) private returns (address, bytes memory) {\\n        uint256 length = _modules.length;\\n\\n        for (uint256 i; i < length; i++) {\\n            if (!_modules[i].requirePreExec()) continue;\\n\\n            bytes memory delegatecallData = abi.encodeWithSelector(\\n                ITaskModule.preExecCall.selector,\\n                _taskId,\\n                _taskCreator,\\n                _execAddress,\\n                _execData\\n            );\\n\\n            (, bytes memory returnData) = _delegateCall(\\n                _moduleAddresses[i],\\n                delegatecallData,\\n                \\\"Ops.preExecCall: \\\"\\n            );\\n\\n            (_execAddress, _execData) = abi.decode(\\n                returnData,\\n                (address, bytes)\\n            );\\n        }\\n        return (_execAddress, _execData);\\n    }\\n\\n    function _postExecCall(\\n        bytes32 _taskId,\\n        address _taskCreator,\\n        address _execAddress,\\n        bytes memory _execData,\\n        LibDataTypes.Module[] memory _modules,\\n        address[] memory _moduleAddresses\\n    ) private {\\n        uint256 length = _moduleAddresses.length;\\n\\n        for (uint256 i; i < length; i++) {\\n            if (!_modules[i].requirePostExec()) continue;\\n\\n            bytes memory delegatecallData = abi.encodeWithSelector(\\n                ITaskModule.postExecCall.selector,\\n                _taskId,\\n                _taskCreator,\\n                _execAddress,\\n                _execData\\n            );\\n\\n            _delegateCall(\\n                _moduleAddresses[i],\\n                delegatecallData,\\n                \\\"Ops.postExecCall: \\\"\\n            );\\n        }\\n    }\\n\\n    function _getModuleAddresses(\\n        LibDataTypes.Module[] memory _modules,\\n        mapping(LibDataTypes.Module => address) storage taskModuleAddresses\\n    ) private view returns (address[] memory) {\\n        uint256 length = _modules.length;\\n        address[] memory moduleAddresses = new address[](length);\\n\\n        for (uint256 i; i < length; i++) {\\n            moduleAddresses[i] = taskModuleAddresses[_modules[i]];\\n        }\\n\\n        return moduleAddresses;\\n    }\\n\\n    function _moduleInitialised(address _moduleAddress) private pure {\\n        require(\\n            _moduleAddress != address(0),\\n            \\\"Ops._moduleInitialised: Not init\\\"\\n        );\\n    }\\n\\n    ///@dev Check for duplicate modules.\\n    function _validModules(\\n        uint256 _length,\\n        LibDataTypes.Module[] memory _modules\\n    ) private pure {\\n        if (_length > 1)\\n            for (uint256 i; i < _length - 1; i++)\\n                require(\\n                    _modules[i + 1] > _modules[i],\\n                    \\\"Ops._validModules: Asc only\\\"\\n                );\\n    }\\n}\\n\",\"keccak256\":\"0xdbcabf224a7d8486689d41e19d0e3e0399522dbd39b902ebffb63c5527292544\",\"license\":\"MIT\"},\"contracts/libraries/LibTaskModuleConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport {LibDataTypes} from \\\"./LibDataTypes.sol\\\";\\n\\n/**\\n * @notice Library to determine wether to call task modules to reduce unnecessary calls.\\n */\\nlibrary LibTaskModuleConfig {\\n    function requirePreCreate(LibDataTypes.Module _module)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (_module == LibDataTypes.Module.PROXY) return true;\\n\\n        return false;\\n    }\\n\\n    function requirePreCancel(LibDataTypes.Module _module)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (\\n            _module == LibDataTypes.Module.TIME ||\\n            _module == LibDataTypes.Module.PROXY\\n        ) return true;\\n\\n        return false;\\n    }\\n\\n    function requireOnCreate(LibDataTypes.Module _module)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (\\n            _module == LibDataTypes.Module.TIME ||\\n            _module == LibDataTypes.Module.PROXY\\n        ) return true;\\n\\n        return false;\\n    }\\n\\n    function requirePreExec(LibDataTypes.Module _module)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (\\n            _module == LibDataTypes.Module.TIME ||\\n            _module == LibDataTypes.Module.PROXY\\n        ) return true;\\n\\n        return false;\\n    }\\n\\n    function requirePostExec(LibDataTypes.Module _module)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (_module == LibDataTypes.Module.SINGLE_EXEC) return true;\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x3ae9b946426e2bf9b47aeb614e2845826185fbc3ab2f0919830308f3dce28f52\",\"license\":\"MIT\"},\"contracts/vendor/gelato/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ec59b2c6f678f3bbe186677e5970e59e46a40d22881dc813c49ffb18e417951\",\"license\":\"UNLICENSED\"},\"contracts/vendor/gelato/Gelatofied.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {_transfer, ETH} from \\\"../../functions/FUtils.sol\\\";\\n\\nabstract contract Gelatofied {\\n    address payable public immutable gelato;\\n\\n    modifier gelatofy(uint256 _amount, address _paymentToken) {\\n        require(msg.sender == gelato, \\\"Gelatofied: Only gelato\\\");\\n        _;\\n        _transfer(gelato, _paymentToken, _amount);\\n    }\\n\\n    modifier onlyGelato() {\\n        require(msg.sender == gelato, \\\"Gelatofied: Only gelato\\\");\\n        _;\\n    }\\n\\n    constructor(address payable _gelato) {\\n        gelato = _gelato;\\n    }\\n}\\n\",\"keccak256\":\"0x61ed0699b2adf55087ddccc22c2ac91cffb92048af40a491ef5b6ac798c60cc1\",\"license\":\"UNLICENSED\"},\"contracts/vendor/proxy/EIP173/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address adminAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x428ced1961d42c505a3e49d90498f92f4b0df8537e5ffa59f14ba375d99150a1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162004c9238038062004c9283398181016040528101906200003791906200016c565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050620001b3565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000db82620000ae565b9050919050565b620000ed81620000ce565b8114620000f957600080fd5b50565b6000815190506200010d81620000e2565b92915050565b60006200012082620000ae565b9050919050565b6000620001348262000113565b9050919050565b620001468162000127565b81146200015257600080fd5b50565b60008151905062000166816200013b565b92915050565b60008060408385031215620001865762000185620000a9565b5b60006200019685828601620000fc565b9250506020620001a98582860162000155565b9150509250929050565b60805160a051614aab620001e7600039600081816108bb01526112f10152600081816104e901526106cd0152614aab6000f3fe608060405234801561001057600080fd5b50600436106100f95760003560e01c8063813785e611610097578063cd3d4fb911610066578063cd3d4fb9146102b8578063ddca3f43146102e8578063e60a321314610306578063ee8ca3b514610324576100fa565b8063813785e614610230578063ad558ab91461024c578063b810c63614610268578063b81cd86614610287576100fa565b806354fd4d50116100d357806354fd4d50146101a6578063573ea575146101c4578063647846a5146101e25780636d2dd29f14610200576100fa565b80630407145c146101165780632e6e0bd0146101465780633323b46714610176576100fa565b5b60003660606101098383610340565b9050915050805190602001f35b610130600480360381019061012b9190612d2e565b6103a8565b60405161013d9190612e23565b60405180910390f35b610160600480360381019061015b9190612e71565b6103fe565b60405161016d9190612ead565b60405180910390f35b610190600480360381019061018b9190612f51565b610431565b60405161019d9190613004565b60405180910390f35b6101ae6104ae565b6040516101bb91906130b8565b60405180910390f35b6101cc6104e7565b6040516101d991906130fb565b60405180910390f35b6101ea61050b565b6040516101f79190612ead565b60405180910390f35b61021a60048036038101906102159190612e71565b610531565b6040516102279190612ead565b60405180910390f35b61024a600480360381019061024591906131c2565b610564565b005b610266600480360381019061026191906133e1565b6106cb565b005b6102706107f3565b60405161027e9291906134de565b60405180910390f35b6102a1600480360381019061029c9190612e71565b610824565b6040516102af929190613532565b60405180910390f35b6102d260048036038101906102cd9190613580565b610880565b6040516102df9190612ead565b60405180910390f35b6102f06108b3565b6040516102fd91906135ad565b60405180910390f35b61030e6108b9565b60405161031b9190613627565b60405180910390f35b61033e60048036038101906103399190612e71565b6108dd565b005b6060600061034e84846108fb565b9050600080600080610361858989610a71565b935093509350935060006103783386868686610c39565b90508060405160200161038b9190613663565b604051602081830303815290604052965050505050505092915050565b606060006103f3600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610db7565b905080915050919050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061044033886006610dcc565b80985081925050506104a2818888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508761049c906138b4565b87610c39565b91505095945050505050565b6040518060400160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61056c610f95565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090613913565b60405180910390fd5b600084849050905060005b818110156106c3578383828181106105ff576105fe613933565b5b90506020020160208101906106149190612d2e565b6006600088888581811061062b5761062a613933565b5b90506020020160208101906106409190613580565b600381111561065257610651613962565b5b600381111561066457610663613962565b5b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806106bb906139c0565b9150506105e4565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075090613a54565b60405180910390fd5b600061078689896107698a610fbe565b89610773906138b4565b8761077e5788610781565b60005b611137565b90506107e8818a8a8a8a806000019061079f9190613a83565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508a8a8a8a6111f7565b505050505050505050565b600080600354600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915091509091565b60056020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006108eb82336006611425565b90506108f781836115e2565b5050565b600060188383600381811061091357610912613933565b5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60108484600281811061097657610975613933565b5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c6008858560018181106109d9576109d8613933565b5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c85856000818110610a3a57610a39613933565b5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916171717905092915050565b60006060610a7d612ca2565b6000638b92696a60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610afb57610ae686866004908092610ae193929190613af0565b611701565b80945081955082965083975050505050610c30565b63b9f45adb60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610b7757610b6286866004908092610b5d93929190613af0565b6118a8565b80945081955082965083975050505050610c2f565b63a873882560e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610bf357610bde86866004908092610bd993929190613af0565b611a4f565b80945081955082965083975050505050610c2e565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2590613b9d565b60405180910390fd5b5b5b93509350935093565b6000610c508686610c4987610fbe565b8686611137565b9050610ca381600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611c1390919063ffffffff16565b15610ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cda90613c09565b60405180910390fd5b610cf281878787876006611c2a565b610d4381600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611dfc90919063ffffffff16565b50808573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f73f079427211e7b93db86024054de0b3c4a076a36cf0f86d2c4bf0d112eb7f1d878787604051610da693929190613ec5565b60405180910390a495945050505050565b6060610dc582600001611e13565b9050919050565b6000806000600380811115610de457610de3613962565b5b905060005b818111610f85576000816003811115610e0557610e04613962565b5b9050610e22816003811115610e1d57610e1c613962565b5b611e6f565b610e2c5750610f72565b6000866000836003811115610e4457610e43613962565b5b6003811115610e5657610e55613962565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610e9081611eb0565b60006376474e6a60e01b8a8a604051602401610ead929190613f0a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000610f4e83836040518060400160405280601381526020017f4f70732e7072654372656174655461736b3a2000000000000000000000000000815250611f22565b91505080806020019051810190610f659190613f5f565b809b50819c505050505050505b8080610f7d906139c0565b915050610de9565b5085859250925050935093915050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b6000601882600381518110610fd657610fd5613933565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60108360028151811061103a57611039613933565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60088460018151811061109e5761109d613933565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c84600081518110611100576110ff613933565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161717179050919050565b60006111468360000151611fac565b156111bc576000611175846020015160008151811061116857611167613933565b5b60200260200101516120bd565b90506111b4878787600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161487866120ce565b9150506111ee565b85858585856040516020016111d5959493929190613fda565b6040516020818303038152906040528051906020012090505b95945050505050565b61124889600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611c1390919063ffffffff16565b611287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127e90614080565b60405180910390fd5b816112d5578360038190555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60006112e78a8a8a8a8a87600661210d565b90508215611383577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a3f1233e8a86886040518463ffffffff1660e01b815260040161134c939291906140a0565b600060405180830381600087803b15801561136657600080fd5b505af115801561137a573d6000803e3d6000fd5b505050506113af565b600360009055600460006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b8773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16867fa458375b1282695a972870cbfbc4891a9d856b79d563d17667d171d87e0c527a8a8e86604051611411939291906140e6565b60405180910390a450505050505050505050565b60008060038081111561143b5761143a613962565b5b905060005b8181116115d657600081600381111561145c5761145b613962565b5b905061147981600381111561147457611473613962565b5b6121b5565b61148357506115c3565b600085600083600381111561149b5761149a613962565b5b60038111156114ad576114ac613962565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506114e781611eb0565b60006314ae992660e01b8989604051602401611504929190614124565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006115a583836040518060400160405280601381526020017f4f70732e70726543616e63656c5461736b3a2000000000000000000000000000815250611f22565b915050808060200190518101906115bc919061414d565b9850505050505b80806115ce906139c0565b915050611440565b50839150509392505050565b61163381600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611c1390919063ffffffff16565b611672576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611669906141c6565b60405180910390fd5b6116c381600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061222690919063ffffffff16565b507f44d83729a43f9c6046446df014d073dd242e0ad672071e9b292f31b669c25b0981836040516116f5929190614124565b60405180910390a15050565b6000606061170d612ca2565b6000806000606088888101906117239190614227565b809450819550829650839a50505050506000600167ffffffffffffffff8111156117505761174f613248565b5b60405190808252806020026020018201604052801561177e5781602001602082028036833780820191505090505b50905060008160008151811061179757611796613933565b5b602002602001019060038111156117b1576117b0613962565b5b908160038111156117c5576117c4613962565b5b815250506000600167ffffffffffffffff8111156117e6576117e5613248565b5b60405190808252806020026020018201604052801561181957816020015b60608152602001906001900390816118045790505b509050838360405160200161182f9291906142aa565b6040516020818303038152906040528160008151811061185257611851613933565b5b602002602001018190525060405180604001604052808381526020018281525096508460405160200161188591906142fb565b604051602081830303815290604052975060009550505050505092959194509250565b600060606118b4612ca2565b6000806000606088888101906118ca9190614316565b809850819550829650839750849b5050505050506000600167ffffffffffffffff8111156118fb576118fa613248565b5b6040519080825280602002602001820160405280156119295781602001602082028036833780820191505090505b50905060008160008151811061194257611941613933565b5b6020026020010190600381111561195c5761195b613962565b5b908160038111156119705761196f613962565b5b815250506000600167ffffffffffffffff81111561199157611990613248565b5b6040519080825280602002602001820160405280156119c457816020015b60608152602001906001900390816119af5790505b50905083836040516020016119da9291906142aa565b604051602081830303815290604052816000815181106119fd576119fc613933565b5b6020026020010181905250604051806040016040528083815260200182815250965084604051602001611a3091906142fb565b6040516020818303038152906040529750505050505092959194509250565b60006060611a5b612ca2565b6000606080611a6a888861223d565b809550819650829750839950849a5050505050506000600267ffffffffffffffff811115611a9b57611a9a613248565b5b604051908082528060200260200182016040528015611ac95781602001602082028036833780820191505090505b509050600081600081518110611ae257611ae1613933565b5b60200260200101906003811115611afc57611afb613962565b5b90816003811115611b1057611b0f613962565b5b81525050600181600181518110611b2a57611b29613933565b5b60200260200101906003811115611b4457611b43613962565b5b90816003811115611b5857611b57613962565b5b815250506000600267ffffffffffffffff811115611b7957611b78613248565b5b604051908082528060200260200182016040528015611bac57816020015b6060815260200190600190039081611b975790505b5090508381600081518110611bc457611bc3613933565b5b60200260200101819052508281600181518110611be457611be3613933565b5b602002602001018190525060405180604001604052808381526020018281525095505050505092959194509250565b6000611c228360000183612303565b905092915050565b60008260000151519050611c42818460000151612326565b60005b81811015611df257600084600001518281518110611c6657611c65613933565b5b60200260200101519050611c8b816003811115611c8657611c85613962565b5b612405565b611c955750611ddf565b6000846000836003811115611cad57611cac613962565b5b6003811115611cbf57611cbe613962565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611cf981611eb0565b600063b0ccbdf060e01b8b8b8b8b8b602001518981518110611d1e57611d1d613933565b5b6020026020010151604051602401611d3a9594939291906143ad565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050611dd982826040518060400160405280601281526020017f4f70732e6f6e4372656174655461736b3a200000000000000000000000000000815250611f22565b50505050505b8080611dea906139c0565b915050611c45565b5050505050505050565b6000611e0b8360000183612476565b905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611e6357602002820191906000526020600020905b815481526020019060010190808311611e4f575b50505050509050919050565b600060026003811115611e8557611e84613962565b5b826003811115611e9857611e97613962565b5b03611ea65760019050611eab565b600090505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611f1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f169061445a565b60405180910390fd5b50565b600060608473ffffffffffffffffffffffffffffffffffffffff1684604051611f4b91906144b6565b600060405180830381855af49150503d8060008114611f86576040519150601f19603f3d011682016040523d82523d6000602084013e611f8b565b606091505b50809250819350505081611fa457611fa381846124e6565b5b935093915050565b60008082519050600181148015612002575060006003811115611fd257611fd1613962565b5b83600081518110611fe657611fe5613933565b5b6020026020010151600381111561200057611fff613962565b5b145b806120a3575060028114801561205757506000600381111561202757612026613962565b5b8360008151811061203b5761203a613933565b5b6020026020010151600381111561205557612054613962565b5b145b80156120a257506001600381111561207257612071613962565b5b8360018151811061208657612085613933565b5b602002602001015160038111156120a05761209f613962565b5b145b5b156120b25760019150506120b8565b60009150505b919050565b600081805190602001209050919050565b60008686868686866040516020016120eb969594939291906144cd565b6040516020818303038152906040528051906020012090509695505050505050565b60008061211a858461264d565b905061212a89898989898661278a565b809750819850505061219687878a604051602001612149929190614576565b6040516020818303038152906040526000876040518060400160405280600a81526020017f4f70732e657865633a20000000000000000000000000000000000000000000008152506128fd565b50809250506121a9898989898986612997565b50979650505050505050565b6000600160038111156121cb576121ca613962565b5b8260038111156121de576121dd613962565b5b148061220e5750600260038111156121f9576121f8613962565b5b82600381111561220c5761220b613962565b5b145b1561221c5760019050612221565b600090505b919050565b60006122358360000183612add565b905092915050565b6000606060006060806000806000806000806000808e8e81019061226191906145ca565b97509750975097509750975097509750858560405160200161228391906142fb565b6040516020818303038152906040528261229d57836122a0565b60005b93508386866040516020016122b69291906142aa565b6040516020818303038152906040528b8b6040516020016122d8929190613532565b6040516020818303038152906040529c509c509c509c509c5050505050505050509295509295909350565b600080836001016000848152602001908152602001600020541415905092915050565b60018211156124015760005b60018361233f919061469c565b8110156123ff5781818151811061235957612358613933565b5b6020026020010151600381111561237357612372613962565b5b8260018361238191906146d0565b8151811061239257612391613933565b5b602002602001015160038111156123ac576123ab613962565b5b116123ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e390614772565b60405180910390fd5b80806123f7906139c0565b915050612332565b505b5050565b60006001600381111561241b5761241a613962565b5b82600381111561242e5761242d613962565b5b148061245e57506002600381111561244957612448613962565b5b82600381111561245c5761245b613962565b5b145b1561246c5760019050612471565b600090505b919050565b60006124828383612303565b6124db5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506124e0565b600090505b92915050565b6004602083516124f691906147c1565b036125f1576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361259557604483019250818360405160200161254a92919061482e565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258c91906130b8565b60405180910390fd5b816040516020016125a6919061489e565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e891906130b8565b60405180910390fd5b80604051602001612602919061490c565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264491906130b8565b60405180910390fd5b606060008351905060008167ffffffffffffffff81111561267157612670613248565b5b60405190808252806020026020018201604052801561269f5781602001602082028036833780820191505090505b50905060005b8281101561277e578460008783815181106126c3576126c2613933565b5b602002602001015160038111156126dd576126dc613962565b5b60038111156126ef576126ee613962565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061273157612730613933565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080612776906139c0565b9150506126a5565b50809250505092915050565b6000606060008451905060005b818110156128ea576127d48682815181106127b5576127b4613933565b5b602002602001015160038111156127cf576127ce613962565b5b612bf1565b156128d757600063c10304f760e01b8b8b8b8b6040516024016127fa949392919061492e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006128b587848151811061287157612870613933565b5b6020026020010151836040518060400160405280601181526020017f4f70732e7072654578656343616c6c3a20000000000000000000000000000000815250611f22565b915050808060200190518101906128cc91906149ea565b809a50819b50505050505b80806128e2906139c0565b915050612797565b5086869250925050965096945050505050565b600060608673ffffffffffffffffffffffffffffffffffffffff16858760405161292791906144b6565b60006040518083038185875af1925050503d8060008114612964576040519150601f19603f3d011682016040523d82523d6000602084013e612969565b606091505b5080925081935050508115801561297d5750835b1561298d5761298c81846124e6565b5b9550959350505050565b60008151905060005b81811015612ad3576129dd8482815181106129be576129bd613933565b5b602002602001015160038111156129d8576129d7613962565b5b612c62565b15612ac057600063b2db0b4160e01b89898989604051602401612a03949392919061492e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050612abc848381518110612a7857612a77613933565b5b6020026020010151826040518060400160405280601281526020017f4f70732e706f73744578656343616c6c3a200000000000000000000000000000815250611f22565b5050505b8080612acb906139c0565b9150506129a0565b5050505050505050565b60008083600101600084815260200190815260200160002054905060008114612be5576000600182612b0f919061469c565b9050600060018660000180549050612b27919061469c565b9050818114612b96576000866000018281548110612b4857612b47613933565b5b9060005260206000200154905080876000018481548110612b6c57612b6b613933565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612baa57612ba9614a46565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612beb565b60009150505b92915050565b600060016003811115612c0757612c06613962565b5b826003811115612c1a57612c19613962565b5b1480612c4a575060026003811115612c3557612c34613962565b5b826003811115612c4857612c47613962565b5b145b15612c585760019050612c5d565b600090505b919050565b6000600380811115612c7757612c76613962565b5b826003811115612c8a57612c89613962565b5b03612c985760019050612c9d565b600090505b919050565b604051806040016040528060608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cfb82612cd0565b9050919050565b612d0b81612cf0565b8114612d1657600080fd5b50565b600081359050612d2881612d02565b92915050565b600060208284031215612d4457612d43612cc6565b5b6000612d5284828501612d19565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b612d9a81612d87565b82525050565b6000612dac8383612d91565b60208301905092915050565b6000602082019050919050565b6000612dd082612d5b565b612dda8185612d66565b9350612de583612d77565b8060005b83811015612e16578151612dfd8882612da0565b9750612e0883612db8565b925050600181019050612de9565b5085935050505092915050565b60006020820190508181036000830152612e3d8184612dc5565b905092915050565b612e4e81612d87565b8114612e5957600080fd5b50565b600081359050612e6b81612e45565b92915050565b600060208284031215612e8757612e86612cc6565b5b6000612e9584828501612e5c565b91505092915050565b612ea781612cf0565b82525050565b6000602082019050612ec26000830184612e9e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612eed57612eec612ec8565b5b8235905067ffffffffffffffff811115612f0a57612f09612ecd565b5b602083019150836001820283011115612f2657612f25612ed2565b5b9250929050565b600080fd5b600060408284031215612f4857612f47612f2d565b5b81905092915050565b600080600080600060808688031215612f6d57612f6c612cc6565b5b6000612f7b88828901612d19565b955050602086013567ffffffffffffffff811115612f9c57612f9b612ccb565b5b612fa888828901612ed7565b9450945050604086013567ffffffffffffffff811115612fcb57612fca612ccb565b5b612fd788828901612f32565b9250506060612fe888828901612d19565b9150509295509295909350565b612ffe81612d87565b82525050565b60006020820190506130196000830184612ff5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561305957808201518184015260208101905061303e565b83811115613068576000848401525b50505050565b6000601f19601f8301169050919050565b600061308a8261301f565b613094818561302a565b93506130a481856020860161303b565b6130ad8161306e565b840191505092915050565b600060208201905081810360008301526130d2818461307f565b905092915050565b60006130e582612cd0565b9050919050565b6130f5816130da565b82525050565b600060208201905061311060008301846130ec565b92915050565b60008083601f84011261312c5761312b612ec8565b5b8235905067ffffffffffffffff81111561314957613148612ecd565b5b60208301915083602082028301111561316557613164612ed2565b5b9250929050565b60008083601f84011261318257613181612ec8565b5b8235905067ffffffffffffffff81111561319f5761319e612ecd565b5b6020830191508360208202830111156131bb576131ba612ed2565b5b9250929050565b600080600080604085870312156131dc576131db612cc6565b5b600085013567ffffffffffffffff8111156131fa576131f9612ccb565b5b61320687828801613116565b9450945050602085013567ffffffffffffffff81111561322957613228612ccb565b5b6132358782880161316c565b925092505092959194509250565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132808261306e565b810181811067ffffffffffffffff8211171561329f5761329e613248565b5b80604052505050565b60006132b2612cbc565b90506132be8282613277565b919050565b600067ffffffffffffffff8211156132de576132dd613248565b5b6132e78261306e565b9050602081019050919050565b82818337600083830152505050565b6000613316613311846132c3565b6132a8565b90508281526020810184848401111561333257613331613243565b5b61333d8482856132f4565b509392505050565b600082601f83011261335a57613359612ec8565b5b813561336a848260208601613303565b91505092915050565b6000819050919050565b61338681613373565b811461339157600080fd5b50565b6000813590506133a38161337d565b92915050565b60008115159050919050565b6133be816133a9565b81146133c957600080fd5b50565b6000813590506133db816133b5565b92915050565b600080600080600080600080610100898b03121561340257613401612cc6565b5b60006134108b828c01612d19565b98505060206134218b828c01612d19565b975050604089013567ffffffffffffffff81111561344257613441612ccb565b5b61344e8b828c01613345565b965050606089013567ffffffffffffffff81111561346f5761346e612ccb565b5b61347b8b828c01612f32565b955050608061348c8b828c01613394565b94505060a061349d8b828c01612d19565b93505060c06134ae8b828c016133cc565b92505060e06134bf8b828c016133cc565b9150509295985092959890939650565b6134d881613373565b82525050565b60006040820190506134f360008301856134cf565b6135006020830184612e9e565b9392505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61352c81613507565b82525050565b60006040820190506135476000830185613523565b6135546020830184613523565b9392505050565b6004811061356857600080fd5b50565b60008135905061357a8161355b565b92915050565b60006020828403121561359657613595612cc6565b5b60006135a48482850161356b565b91505092915050565b60006020820190506135c260008301846134cf565b92915050565b6000819050919050565b60006135ed6135e86135e384612cd0565b6135c8565b612cd0565b9050919050565b60006135ff826135d2565b9050919050565b6000613611826135f4565b9050919050565b61362181613606565b82525050565b600060208201905061363c6000830184613618565b92915050565b6000819050919050565b61365d61365882612d87565b613642565b82525050565b600061366f828461364c565b60208201915081905092915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156136a3576136a2613248565b5b602082029050602081019050919050565b60006136c76136c284613688565b6132a8565b905080838252602082019050602084028301858111156136ea576136e9612ed2565b5b835b8181101561371357806136ff888261356b565b8452602084019350506020810190506136ec565b5050509392505050565b600082601f83011261373257613731612ec8565b5b81356137428482602086016136b4565b91505092915050565b600067ffffffffffffffff82111561376657613765613248565b5b602082029050602081019050919050565b600061378a6137858461374b565b6132a8565b905080838252602082019050602084028301858111156137ad576137ac612ed2565b5b835b818110156137f457803567ffffffffffffffff8111156137d2576137d1612ec8565b5b8086016137df8982613345565b855260208501945050506020810190506137af565b5050509392505050565b600082601f83011261381357613812612ec8565b5b8135613823848260208601613777565b91505092915050565b6000604082840312156138425761384161367e565b5b61384c60406132a8565b9050600082013567ffffffffffffffff81111561386c5761386b613683565b5b6138788482850161371d565b600083015250602082013567ffffffffffffffff81111561389c5761389b613683565b5b6138a8848285016137fe565b60208301525092915050565b60006138c0368361382c565b9050919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b60006138fd600e8361302a565b9150613908826138c7565b602082019050919050565b6000602082019050818103600083015261392c816138f0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006139cb82613373565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139fd576139fc613991565b5b600182019050919050565b7f47656c61746f666965643a204f6e6c792067656c61746f000000000000000000600082015250565b6000613a3e60178361302a565b9150613a4982613a08565b602082019050919050565b60006020820190508181036000830152613a6d81613a31565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613aa057613a9f613a74565b5b80840192508235915067ffffffffffffffff821115613ac257613ac1613a79565b5b602083019250602082023603831315613ade57613add613a7e565b5b509250929050565b600080fd5b600080fd5b60008085851115613b0457613b03613ae6565b5b83861115613b1557613b14613aeb565b5b6001850283019150848603905094509492505050565b7f4f70732e6372656174655461736b3a2046756e6374696f6e206e6f7420666f7560008201527f6e64000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b8760228361302a565b9150613b9282613b2b565b604082019050919050565b60006020820190508181036000830152613bb681613b7a565b9050919050565b7f4f70732e6372656174655461736b3a204475706c6963617465207461736b0000600082015250565b6000613bf3601e8361302a565b9150613bfe82613bbd565b602082019050919050565b60006020820190508181036000830152613c2281613be6565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613c5082613c29565b613c5a8185613c34565b9350613c6a81856020860161303b565b613c738161306e565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60048110613cbb57613cba613962565b5b50565b6000819050613ccc82613caa565b919050565b6000613cdc82613cbe565b9050919050565b613cec81613cd1565b82525050565b6000613cfe8383613ce3565b60208301905092915050565b6000602082019050919050565b6000613d2282613c7e565b613d2c8185613c89565b9350613d3783613c9a565b8060005b83811015613d68578151613d4f8882613cf2565b9750613d5a83613d0a565b925050600181019050613d3b565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000613dbd82613c29565b613dc78185613da1565b9350613dd781856020860161303b565b613de08161306e565b840191505092915050565b6000613df78383613db2565b905092915050565b6000602082019050919050565b6000613e1782613d75565b613e218185613d80565b935083602082028501613e3385613d91565b8060005b85811015613e6f5784840389528151613e508582613deb565b9450613e5b83613dff565b925060208a01995050600181019050613e37565b50829750879550505050505092915050565b60006040830160008301518482036000860152613e9e8282613d17565b91505060208301518482036020860152613eb88282613e0c565b9150508091505092915050565b60006060820190508181036000830152613edf8186613c45565b90508181036020830152613ef38185613e81565b9050613f026040830184612e9e565b949350505050565b6000604082019050613f1f6000830185612e9e565b613f2c6020830184612e9e565b9392505050565b613f3c816130da565b8114613f4757600080fd5b50565b600081519050613f5981613f33565b92915050565b60008060408385031215613f7657613f75612cc6565b5b6000613f8485828601613f4a565b9250506020613f9585828601613f4a565b9150509250929050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613fd481613f9f565b82525050565b600060a082019050613fef6000830188612e9e565b613ffc6020830187612e9e565b6140096040830186613fcb565b818103606083015261401b8185613e81565b905061402a6080830184612e9e565b9695505050505050565b7f4f70732e657865633a205461736b206e6f7420666f756e640000000000000000600082015250565b600061406a60188361302a565b915061407582614034565b602082019050919050565b600060208201905081810360008301526140998161405d565b9050919050565b60006060820190506140b56000830186612e9e565b6140c26020830185612e9e565b6140cf60408301846134cf565b949350505050565b6140e0816133a9565b82525050565b600060608201905081810360008301526141008186613c45565b905061410f6020830185612ff5565b61411c60408301846140d7565b949350505050565b60006040820190506141396000830185612ff5565b6141466020830184612e9e565b9392505050565b60006020828403121561416357614162612cc6565b5b600061417184828501613f4a565b91505092915050565b7f4f70732e63616e63656c5461736b3a205461736b206e6f7420666f756e640000600082015250565b60006141b0601e8361302a565b91506141bb8261417a565b602082019050919050565b600060208201905081810360008301526141df816141a3565b9050919050565b6000813590506141f581613f33565b92915050565b61420481613f9f565b811461420f57600080fd5b50565b600081359050614221816141fb565b92915050565b6000806000806080858703121561424157614240612cc6565b5b600061424f878288016141e6565b945050602061426087828801614212565b9350506040614271878288016141e6565b925050606085013567ffffffffffffffff81111561429257614291612ccb565b5b61429e87828801613345565b91505092959194509250565b60006040820190506142bf6000830185612e9e565b81810360208301526142d18184613c45565b90509392505050565b6000819050919050565b6142f56142f082613f9f565b6142da565b82525050565b600061430782846142e4565b60048201915081905092915050565b600080600080600060a0868803121561433257614331612cc6565b5b6000614340888289016141e6565b955050602061435188828901614212565b9450506040614362888289016141e6565b935050606086013567ffffffffffffffff81111561438357614382612ccb565b5b61438f88828901613345565b92505060806143a0888289016141e6565b9150509295509295909350565b600060a0820190506143c26000830188612ff5565b6143cf6020830187612e9e565b6143dc6040830186612e9e565b81810360608301526143ee8185613c45565b905081810360808301526144028184613c45565b90509695505050505050565b7f4f70732e5f6d6f64756c65496e697469616c697365643a204e6f7420696e6974600082015250565b600061444460208361302a565b915061444f8261440e565b602082019050919050565b6000602082019050818103600083015261447381614437565b9050919050565b600081905092915050565b600061449082613c29565b61449a818561447a565b93506144aa81856020860161303b565b80840191505092915050565b60006144c28284614485565b915081905092915050565b600060c0820190506144e26000830189612e9e565b6144ef6020830188612e9e565b6144fc6040830187613fcb565b61450960608301866140d7565b6145166080830185612e9e565b61452360a0830184612ff5565b979650505050505050565b60008160601b9050919050565b60006145468261452e565b9050919050565b60006145588261453b565b9050919050565b61457061456b82612cf0565b61454d565b82525050565b60006145828285614485565b915061458e828461455f565b6014820191508190509392505050565b6145a781613507565b81146145b257600080fd5b50565b6000813590506145c48161459e565b92915050565b600080600080600080600080610100898b0312156145eb576145ea612cc6565b5b60006145f98b828c016145b5565b985050602061460a8b828c016145b5565b975050604061461b8b828c016141e6565b965050606061462c8b828c01614212565b955050608061463d8b828c016141e6565b94505060a089013567ffffffffffffffff81111561465e5761465d612ccb565b5b61466a8b828c01613345565b93505060c061467b8b828c016141e6565b92505060e061468c8b828c016133cc565b9150509295985092959890939650565b60006146a782613373565b91506146b283613373565b9250828210156146c5576146c4613991565b5b828203905092915050565b60006146db82613373565b91506146e683613373565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561471b5761471a613991565b5b828201905092915050565b7f4f70732e5f76616c69644d6f64756c65733a20417363206f6e6c790000000000600082015250565b600061475c601b8361302a565b915061476782614726565b602082019050919050565b6000602082019050818103600083015261478b8161474f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006147cc82613373565b91506147d783613373565b9250826147e7576147e6614792565b5b828206905092915050565b600081905092915050565b60006148088261301f565b61481281856147f2565b935061482281856020860161303b565b80840191505092915050565b600061483a82856147fd565b915061484682846147fd565b91508190509392505050565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000600082015250565b6000614888600f836147f2565b915061489382614852565b600f82019050919050565b60006148aa82846147fd565b91506148b58261487b565b915081905092915050565b7f556e657870656374656452657475726e64617461000000000000000000000000600082015250565b60006148f66014836147f2565b9150614901826148c0565b601482019050919050565b600061491882846147fd565b9150614923826148e9565b915081905092915050565b60006080820190506149436000830187612ff5565b6149506020830186612e9e565b61495d6040830185612e9e565b818103606083015261496f8184613c45565b905095945050505050565b600061498d614988846132c3565b6132a8565b9050828152602081018484840111156149a9576149a8613243565b5b6149b484828561303b565b509392505050565b600082601f8301126149d1576149d0612ec8565b5b81516149e184826020860161497a565b91505092915050565b60008060408385031215614a0157614a00612cc6565b5b6000614a0f85828601613f4a565b925050602083015167ffffffffffffffff811115614a3057614a2f612ccb565b5b614a3c858286016149bc565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212208a7c5895a684964e9fd2ad64662b6459b834eb67af0b300ecf93d82ea4f1f7f864736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f95760003560e01c8063813785e611610097578063cd3d4fb911610066578063cd3d4fb9146102b8578063ddca3f43146102e8578063e60a321314610306578063ee8ca3b514610324576100fa565b8063813785e614610230578063ad558ab91461024c578063b810c63614610268578063b81cd86614610287576100fa565b806354fd4d50116100d357806354fd4d50146101a6578063573ea575146101c4578063647846a5146101e25780636d2dd29f14610200576100fa565b80630407145c146101165780632e6e0bd0146101465780633323b46714610176576100fa565b5b60003660606101098383610340565b9050915050805190602001f35b610130600480360381019061012b9190612d2e565b6103a8565b60405161013d9190612e23565b60405180910390f35b610160600480360381019061015b9190612e71565b6103fe565b60405161016d9190612ead565b60405180910390f35b610190600480360381019061018b9190612f51565b610431565b60405161019d9190613004565b60405180910390f35b6101ae6104ae565b6040516101bb91906130b8565b60405180910390f35b6101cc6104e7565b6040516101d991906130fb565b60405180910390f35b6101ea61050b565b6040516101f79190612ead565b60405180910390f35b61021a60048036038101906102159190612e71565b610531565b6040516102279190612ead565b60405180910390f35b61024a600480360381019061024591906131c2565b610564565b005b610266600480360381019061026191906133e1565b6106cb565b005b6102706107f3565b60405161027e9291906134de565b60405180910390f35b6102a1600480360381019061029c9190612e71565b610824565b6040516102af929190613532565b60405180910390f35b6102d260048036038101906102cd9190613580565b610880565b6040516102df9190612ead565b60405180910390f35b6102f06108b3565b6040516102fd91906135ad565b60405180910390f35b61030e6108b9565b60405161031b9190613627565b60405180910390f35b61033e60048036038101906103399190612e71565b6108dd565b005b6060600061034e84846108fb565b9050600080600080610361858989610a71565b935093509350935060006103783386868686610c39565b90508060405160200161038b9190613663565b604051602081830303815290604052965050505050505092915050565b606060006103f3600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610db7565b905080915050919050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061044033886006610dcc565b80985081925050506104a2818888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508761049c906138b4565b87610c39565b91505095945050505050565b6040518060400160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61056c610f95565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090613913565b60405180910390fd5b600084849050905060005b818110156106c3578383828181106105ff576105fe613933565b5b90506020020160208101906106149190612d2e565b6006600088888581811061062b5761062a613933565b5b90506020020160208101906106409190613580565b600381111561065257610651613962565b5b600381111561066457610663613962565b5b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806106bb906139c0565b9150506105e4565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075090613a54565b60405180910390fd5b600061078689896107698a610fbe565b89610773906138b4565b8761077e5788610781565b60005b611137565b90506107e8818a8a8a8a806000019061079f9190613a83565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508a8a8a8a6111f7565b505050505050505050565b600080600354600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915091509091565b60056020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006108eb82336006611425565b90506108f781836115e2565b5050565b600060188383600381811061091357610912613933565b5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60108484600281811061097657610975613933565b5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c6008858560018181106109d9576109d8613933565b5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c85856000818110610a3a57610a39613933565b5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916171717905092915050565b60006060610a7d612ca2565b6000638b92696a60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610afb57610ae686866004908092610ae193929190613af0565b611701565b80945081955082965083975050505050610c30565b63b9f45adb60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610b7757610b6286866004908092610b5d93929190613af0565b6118a8565b80945081955082965083975050505050610c2f565b63a873882560e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610bf357610bde86866004908092610bd993929190613af0565b611a4f565b80945081955082965083975050505050610c2e565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2590613b9d565b60405180910390fd5b5b5b93509350935093565b6000610c508686610c4987610fbe565b8686611137565b9050610ca381600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611c1390919063ffffffff16565b15610ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cda90613c09565b60405180910390fd5b610cf281878787876006611c2a565b610d4381600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611dfc90919063ffffffff16565b50808573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f73f079427211e7b93db86024054de0b3c4a076a36cf0f86d2c4bf0d112eb7f1d878787604051610da693929190613ec5565b60405180910390a495945050505050565b6060610dc582600001611e13565b9050919050565b6000806000600380811115610de457610de3613962565b5b905060005b818111610f85576000816003811115610e0557610e04613962565b5b9050610e22816003811115610e1d57610e1c613962565b5b611e6f565b610e2c5750610f72565b6000866000836003811115610e4457610e43613962565b5b6003811115610e5657610e55613962565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610e9081611eb0565b60006376474e6a60e01b8a8a604051602401610ead929190613f0a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000610f4e83836040518060400160405280601381526020017f4f70732e7072654372656174655461736b3a2000000000000000000000000000815250611f22565b91505080806020019051810190610f659190613f5f565b809b50819c505050505050505b8080610f7d906139c0565b915050610de9565b5085859250925050935093915050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b6000601882600381518110610fd657610fd5613933565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60108360028151811061103a57611039613933565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60088460018151811061109e5761109d613933565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c84600081518110611100576110ff613933565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161717179050919050565b60006111468360000151611fac565b156111bc576000611175846020015160008151811061116857611167613933565b5b60200260200101516120bd565b90506111b4878787600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161487866120ce565b9150506111ee565b85858585856040516020016111d5959493929190613fda565b6040516020818303038152906040528051906020012090505b95945050505050565b61124889600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611c1390919063ffffffff16565b611287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127e90614080565b60405180910390fd5b816112d5578360038190555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60006112e78a8a8a8a8a87600661210d565b90508215611383577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a3f1233e8a86886040518463ffffffff1660e01b815260040161134c939291906140a0565b600060405180830381600087803b15801561136657600080fd5b505af115801561137a573d6000803e3d6000fd5b505050506113af565b600360009055600460006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b8773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16867fa458375b1282695a972870cbfbc4891a9d856b79d563d17667d171d87e0c527a8a8e86604051611411939291906140e6565b60405180910390a450505050505050505050565b60008060038081111561143b5761143a613962565b5b905060005b8181116115d657600081600381111561145c5761145b613962565b5b905061147981600381111561147457611473613962565b5b6121b5565b61148357506115c3565b600085600083600381111561149b5761149a613962565b5b60038111156114ad576114ac613962565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506114e781611eb0565b60006314ae992660e01b8989604051602401611504929190614124565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006115a583836040518060400160405280601381526020017f4f70732e70726543616e63656c5461736b3a2000000000000000000000000000815250611f22565b915050808060200190518101906115bc919061414d565b9850505050505b80806115ce906139c0565b915050611440565b50839150509392505050565b61163381600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611c1390919063ffffffff16565b611672576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611669906141c6565b60405180910390fd5b6116c381600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061222690919063ffffffff16565b507f44d83729a43f9c6046446df014d073dd242e0ad672071e9b292f31b669c25b0981836040516116f5929190614124565b60405180910390a15050565b6000606061170d612ca2565b6000806000606088888101906117239190614227565b809450819550829650839a50505050506000600167ffffffffffffffff8111156117505761174f613248565b5b60405190808252806020026020018201604052801561177e5781602001602082028036833780820191505090505b50905060008160008151811061179757611796613933565b5b602002602001019060038111156117b1576117b0613962565b5b908160038111156117c5576117c4613962565b5b815250506000600167ffffffffffffffff8111156117e6576117e5613248565b5b60405190808252806020026020018201604052801561181957816020015b60608152602001906001900390816118045790505b509050838360405160200161182f9291906142aa565b6040516020818303038152906040528160008151811061185257611851613933565b5b602002602001018190525060405180604001604052808381526020018281525096508460405160200161188591906142fb565b604051602081830303815290604052975060009550505050505092959194509250565b600060606118b4612ca2565b6000806000606088888101906118ca9190614316565b809850819550829650839750849b5050505050506000600167ffffffffffffffff8111156118fb576118fa613248565b5b6040519080825280602002602001820160405280156119295781602001602082028036833780820191505090505b50905060008160008151811061194257611941613933565b5b6020026020010190600381111561195c5761195b613962565b5b908160038111156119705761196f613962565b5b815250506000600167ffffffffffffffff81111561199157611990613248565b5b6040519080825280602002602001820160405280156119c457816020015b60608152602001906001900390816119af5790505b50905083836040516020016119da9291906142aa565b604051602081830303815290604052816000815181106119fd576119fc613933565b5b6020026020010181905250604051806040016040528083815260200182815250965084604051602001611a3091906142fb565b6040516020818303038152906040529750505050505092959194509250565b60006060611a5b612ca2565b6000606080611a6a888861223d565b809550819650829750839950849a5050505050506000600267ffffffffffffffff811115611a9b57611a9a613248565b5b604051908082528060200260200182016040528015611ac95781602001602082028036833780820191505090505b509050600081600081518110611ae257611ae1613933565b5b60200260200101906003811115611afc57611afb613962565b5b90816003811115611b1057611b0f613962565b5b81525050600181600181518110611b2a57611b29613933565b5b60200260200101906003811115611b4457611b43613962565b5b90816003811115611b5857611b57613962565b5b815250506000600267ffffffffffffffff811115611b7957611b78613248565b5b604051908082528060200260200182016040528015611bac57816020015b6060815260200190600190039081611b975790505b5090508381600081518110611bc457611bc3613933565b5b60200260200101819052508281600181518110611be457611be3613933565b5b602002602001018190525060405180604001604052808381526020018281525095505050505092959194509250565b6000611c228360000183612303565b905092915050565b60008260000151519050611c42818460000151612326565b60005b81811015611df257600084600001518281518110611c6657611c65613933565b5b60200260200101519050611c8b816003811115611c8657611c85613962565b5b612405565b611c955750611ddf565b6000846000836003811115611cad57611cac613962565b5b6003811115611cbf57611cbe613962565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611cf981611eb0565b600063b0ccbdf060e01b8b8b8b8b8b602001518981518110611d1e57611d1d613933565b5b6020026020010151604051602401611d3a9594939291906143ad565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050611dd982826040518060400160405280601281526020017f4f70732e6f6e4372656174655461736b3a200000000000000000000000000000815250611f22565b50505050505b8080611dea906139c0565b915050611c45565b5050505050505050565b6000611e0b8360000183612476565b905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611e6357602002820191906000526020600020905b815481526020019060010190808311611e4f575b50505050509050919050565b600060026003811115611e8557611e84613962565b5b826003811115611e9857611e97613962565b5b03611ea65760019050611eab565b600090505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611f1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f169061445a565b60405180910390fd5b50565b600060608473ffffffffffffffffffffffffffffffffffffffff1684604051611f4b91906144b6565b600060405180830381855af49150503d8060008114611f86576040519150601f19603f3d011682016040523d82523d6000602084013e611f8b565b606091505b50809250819350505081611fa457611fa381846124e6565b5b935093915050565b60008082519050600181148015612002575060006003811115611fd257611fd1613962565b5b83600081518110611fe657611fe5613933565b5b6020026020010151600381111561200057611fff613962565b5b145b806120a3575060028114801561205757506000600381111561202757612026613962565b5b8360008151811061203b5761203a613933565b5b6020026020010151600381111561205557612054613962565b5b145b80156120a257506001600381111561207257612071613962565b5b8360018151811061208657612085613933565b5b602002602001015160038111156120a05761209f613962565b5b145b5b156120b25760019150506120b8565b60009150505b919050565b600081805190602001209050919050565b60008686868686866040516020016120eb969594939291906144cd565b6040516020818303038152906040528051906020012090509695505050505050565b60008061211a858461264d565b905061212a89898989898661278a565b809750819850505061219687878a604051602001612149929190614576565b6040516020818303038152906040526000876040518060400160405280600a81526020017f4f70732e657865633a20000000000000000000000000000000000000000000008152506128fd565b50809250506121a9898989898986612997565b50979650505050505050565b6000600160038111156121cb576121ca613962565b5b8260038111156121de576121dd613962565b5b148061220e5750600260038111156121f9576121f8613962565b5b82600381111561220c5761220b613962565b5b145b1561221c5760019050612221565b600090505b919050565b60006122358360000183612add565b905092915050565b6000606060006060806000806000806000806000808e8e81019061226191906145ca565b97509750975097509750975097509750858560405160200161228391906142fb565b6040516020818303038152906040528261229d57836122a0565b60005b93508386866040516020016122b69291906142aa565b6040516020818303038152906040528b8b6040516020016122d8929190613532565b6040516020818303038152906040529c509c509c509c509c5050505050505050509295509295909350565b600080836001016000848152602001908152602001600020541415905092915050565b60018211156124015760005b60018361233f919061469c565b8110156123ff5781818151811061235957612358613933565b5b6020026020010151600381111561237357612372613962565b5b8260018361238191906146d0565b8151811061239257612391613933565b5b602002602001015160038111156123ac576123ab613962565b5b116123ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e390614772565b60405180910390fd5b80806123f7906139c0565b915050612332565b505b5050565b60006001600381111561241b5761241a613962565b5b82600381111561242e5761242d613962565b5b148061245e57506002600381111561244957612448613962565b5b82600381111561245c5761245b613962565b5b145b1561246c5760019050612471565b600090505b919050565b60006124828383612303565b6124db5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506124e0565b600090505b92915050565b6004602083516124f691906147c1565b036125f1576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361259557604483019250818360405160200161254a92919061482e565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258c91906130b8565b60405180910390fd5b816040516020016125a6919061489e565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e891906130b8565b60405180910390fd5b80604051602001612602919061490c565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264491906130b8565b60405180910390fd5b606060008351905060008167ffffffffffffffff81111561267157612670613248565b5b60405190808252806020026020018201604052801561269f5781602001602082028036833780820191505090505b50905060005b8281101561277e578460008783815181106126c3576126c2613933565b5b602002602001015160038111156126dd576126dc613962565b5b60038111156126ef576126ee613962565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061273157612730613933565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080612776906139c0565b9150506126a5565b50809250505092915050565b6000606060008451905060005b818110156128ea576127d48682815181106127b5576127b4613933565b5b602002602001015160038111156127cf576127ce613962565b5b612bf1565b156128d757600063c10304f760e01b8b8b8b8b6040516024016127fa949392919061492e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006128b587848151811061287157612870613933565b5b6020026020010151836040518060400160405280601181526020017f4f70732e7072654578656343616c6c3a20000000000000000000000000000000815250611f22565b915050808060200190518101906128cc91906149ea565b809a50819b50505050505b80806128e2906139c0565b915050612797565b5086869250925050965096945050505050565b600060608673ffffffffffffffffffffffffffffffffffffffff16858760405161292791906144b6565b60006040518083038185875af1925050503d8060008114612964576040519150601f19603f3d011682016040523d82523d6000602084013e612969565b606091505b5080925081935050508115801561297d5750835b1561298d5761298c81846124e6565b5b9550959350505050565b60008151905060005b81811015612ad3576129dd8482815181106129be576129bd613933565b5b602002602001015160038111156129d8576129d7613962565b5b612c62565b15612ac057600063b2db0b4160e01b89898989604051602401612a03949392919061492e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050612abc848381518110612a7857612a77613933565b5b6020026020010151826040518060400160405280601281526020017f4f70732e706f73744578656343616c6c3a200000000000000000000000000000815250611f22565b5050505b8080612acb906139c0565b9150506129a0565b5050505050505050565b60008083600101600084815260200190815260200160002054905060008114612be5576000600182612b0f919061469c565b9050600060018660000180549050612b27919061469c565b9050818114612b96576000866000018281548110612b4857612b47613933565b5b9060005260206000200154905080876000018481548110612b6c57612b6b613933565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612baa57612ba9614a46565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612beb565b60009150505b92915050565b600060016003811115612c0757612c06613962565b5b826003811115612c1a57612c19613962565b5b1480612c4a575060026003811115612c3557612c34613962565b5b826003811115612c4857612c47613962565b5b145b15612c585760019050612c5d565b600090505b919050565b6000600380811115612c7757612c76613962565b5b826003811115612c8a57612c89613962565b5b03612c985760019050612c9d565b600090505b919050565b604051806040016040528060608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cfb82612cd0565b9050919050565b612d0b81612cf0565b8114612d1657600080fd5b50565b600081359050612d2881612d02565b92915050565b600060208284031215612d4457612d43612cc6565b5b6000612d5284828501612d19565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b612d9a81612d87565b82525050565b6000612dac8383612d91565b60208301905092915050565b6000602082019050919050565b6000612dd082612d5b565b612dda8185612d66565b9350612de583612d77565b8060005b83811015612e16578151612dfd8882612da0565b9750612e0883612db8565b925050600181019050612de9565b5085935050505092915050565b60006020820190508181036000830152612e3d8184612dc5565b905092915050565b612e4e81612d87565b8114612e5957600080fd5b50565b600081359050612e6b81612e45565b92915050565b600060208284031215612e8757612e86612cc6565b5b6000612e9584828501612e5c565b91505092915050565b612ea781612cf0565b82525050565b6000602082019050612ec26000830184612e9e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612eed57612eec612ec8565b5b8235905067ffffffffffffffff811115612f0a57612f09612ecd565b5b602083019150836001820283011115612f2657612f25612ed2565b5b9250929050565b600080fd5b600060408284031215612f4857612f47612f2d565b5b81905092915050565b600080600080600060808688031215612f6d57612f6c612cc6565b5b6000612f7b88828901612d19565b955050602086013567ffffffffffffffff811115612f9c57612f9b612ccb565b5b612fa888828901612ed7565b9450945050604086013567ffffffffffffffff811115612fcb57612fca612ccb565b5b612fd788828901612f32565b9250506060612fe888828901612d19565b9150509295509295909350565b612ffe81612d87565b82525050565b60006020820190506130196000830184612ff5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561305957808201518184015260208101905061303e565b83811115613068576000848401525b50505050565b6000601f19601f8301169050919050565b600061308a8261301f565b613094818561302a565b93506130a481856020860161303b565b6130ad8161306e565b840191505092915050565b600060208201905081810360008301526130d2818461307f565b905092915050565b60006130e582612cd0565b9050919050565b6130f5816130da565b82525050565b600060208201905061311060008301846130ec565b92915050565b60008083601f84011261312c5761312b612ec8565b5b8235905067ffffffffffffffff81111561314957613148612ecd565b5b60208301915083602082028301111561316557613164612ed2565b5b9250929050565b60008083601f84011261318257613181612ec8565b5b8235905067ffffffffffffffff81111561319f5761319e612ecd565b5b6020830191508360208202830111156131bb576131ba612ed2565b5b9250929050565b600080600080604085870312156131dc576131db612cc6565b5b600085013567ffffffffffffffff8111156131fa576131f9612ccb565b5b61320687828801613116565b9450945050602085013567ffffffffffffffff81111561322957613228612ccb565b5b6132358782880161316c565b925092505092959194509250565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132808261306e565b810181811067ffffffffffffffff8211171561329f5761329e613248565b5b80604052505050565b60006132b2612cbc565b90506132be8282613277565b919050565b600067ffffffffffffffff8211156132de576132dd613248565b5b6132e78261306e565b9050602081019050919050565b82818337600083830152505050565b6000613316613311846132c3565b6132a8565b90508281526020810184848401111561333257613331613243565b5b61333d8482856132f4565b509392505050565b600082601f83011261335a57613359612ec8565b5b813561336a848260208601613303565b91505092915050565b6000819050919050565b61338681613373565b811461339157600080fd5b50565b6000813590506133a38161337d565b92915050565b60008115159050919050565b6133be816133a9565b81146133c957600080fd5b50565b6000813590506133db816133b5565b92915050565b600080600080600080600080610100898b03121561340257613401612cc6565b5b60006134108b828c01612d19565b98505060206134218b828c01612d19565b975050604089013567ffffffffffffffff81111561344257613441612ccb565b5b61344e8b828c01613345565b965050606089013567ffffffffffffffff81111561346f5761346e612ccb565b5b61347b8b828c01612f32565b955050608061348c8b828c01613394565b94505060a061349d8b828c01612d19565b93505060c06134ae8b828c016133cc565b92505060e06134bf8b828c016133cc565b9150509295985092959890939650565b6134d881613373565b82525050565b60006040820190506134f360008301856134cf565b6135006020830184612e9e565b9392505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61352c81613507565b82525050565b60006040820190506135476000830185613523565b6135546020830184613523565b9392505050565b6004811061356857600080fd5b50565b60008135905061357a8161355b565b92915050565b60006020828403121561359657613595612cc6565b5b60006135a48482850161356b565b91505092915050565b60006020820190506135c260008301846134cf565b92915050565b6000819050919050565b60006135ed6135e86135e384612cd0565b6135c8565b612cd0565b9050919050565b60006135ff826135d2565b9050919050565b6000613611826135f4565b9050919050565b61362181613606565b82525050565b600060208201905061363c6000830184613618565b92915050565b6000819050919050565b61365d61365882612d87565b613642565b82525050565b600061366f828461364c565b60208201915081905092915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156136a3576136a2613248565b5b602082029050602081019050919050565b60006136c76136c284613688565b6132a8565b905080838252602082019050602084028301858111156136ea576136e9612ed2565b5b835b8181101561371357806136ff888261356b565b8452602084019350506020810190506136ec565b5050509392505050565b600082601f83011261373257613731612ec8565b5b81356137428482602086016136b4565b91505092915050565b600067ffffffffffffffff82111561376657613765613248565b5b602082029050602081019050919050565b600061378a6137858461374b565b6132a8565b905080838252602082019050602084028301858111156137ad576137ac612ed2565b5b835b818110156137f457803567ffffffffffffffff8111156137d2576137d1612ec8565b5b8086016137df8982613345565b855260208501945050506020810190506137af565b5050509392505050565b600082601f83011261381357613812612ec8565b5b8135613823848260208601613777565b91505092915050565b6000604082840312156138425761384161367e565b5b61384c60406132a8565b9050600082013567ffffffffffffffff81111561386c5761386b613683565b5b6138788482850161371d565b600083015250602082013567ffffffffffffffff81111561389c5761389b613683565b5b6138a8848285016137fe565b60208301525092915050565b60006138c0368361382c565b9050919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b60006138fd600e8361302a565b9150613908826138c7565b602082019050919050565b6000602082019050818103600083015261392c816138f0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006139cb82613373565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139fd576139fc613991565b5b600182019050919050565b7f47656c61746f666965643a204f6e6c792067656c61746f000000000000000000600082015250565b6000613a3e60178361302a565b9150613a4982613a08565b602082019050919050565b60006020820190508181036000830152613a6d81613a31565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613aa057613a9f613a74565b5b80840192508235915067ffffffffffffffff821115613ac257613ac1613a79565b5b602083019250602082023603831315613ade57613add613a7e565b5b509250929050565b600080fd5b600080fd5b60008085851115613b0457613b03613ae6565b5b83861115613b1557613b14613aeb565b5b6001850283019150848603905094509492505050565b7f4f70732e6372656174655461736b3a2046756e6374696f6e206e6f7420666f7560008201527f6e64000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b8760228361302a565b9150613b9282613b2b565b604082019050919050565b60006020820190508181036000830152613bb681613b7a565b9050919050565b7f4f70732e6372656174655461736b3a204475706c6963617465207461736b0000600082015250565b6000613bf3601e8361302a565b9150613bfe82613bbd565b602082019050919050565b60006020820190508181036000830152613c2281613be6565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613c5082613c29565b613c5a8185613c34565b9350613c6a81856020860161303b565b613c738161306e565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60048110613cbb57613cba613962565b5b50565b6000819050613ccc82613caa565b919050565b6000613cdc82613cbe565b9050919050565b613cec81613cd1565b82525050565b6000613cfe8383613ce3565b60208301905092915050565b6000602082019050919050565b6000613d2282613c7e565b613d2c8185613c89565b9350613d3783613c9a565b8060005b83811015613d68578151613d4f8882613cf2565b9750613d5a83613d0a565b925050600181019050613d3b565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000613dbd82613c29565b613dc78185613da1565b9350613dd781856020860161303b565b613de08161306e565b840191505092915050565b6000613df78383613db2565b905092915050565b6000602082019050919050565b6000613e1782613d75565b613e218185613d80565b935083602082028501613e3385613d91565b8060005b85811015613e6f5784840389528151613e508582613deb565b9450613e5b83613dff565b925060208a01995050600181019050613e37565b50829750879550505050505092915050565b60006040830160008301518482036000860152613e9e8282613d17565b91505060208301518482036020860152613eb88282613e0c565b9150508091505092915050565b60006060820190508181036000830152613edf8186613c45565b90508181036020830152613ef38185613e81565b9050613f026040830184612e9e565b949350505050565b6000604082019050613f1f6000830185612e9e565b613f2c6020830184612e9e565b9392505050565b613f3c816130da565b8114613f4757600080fd5b50565b600081519050613f5981613f33565b92915050565b60008060408385031215613f7657613f75612cc6565b5b6000613f8485828601613f4a565b9250506020613f9585828601613f4a565b9150509250929050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613fd481613f9f565b82525050565b600060a082019050613fef6000830188612e9e565b613ffc6020830187612e9e565b6140096040830186613fcb565b818103606083015261401b8185613e81565b905061402a6080830184612e9e565b9695505050505050565b7f4f70732e657865633a205461736b206e6f7420666f756e640000000000000000600082015250565b600061406a60188361302a565b915061407582614034565b602082019050919050565b600060208201905081810360008301526140998161405d565b9050919050565b60006060820190506140b56000830186612e9e565b6140c26020830185612e9e565b6140cf60408301846134cf565b949350505050565b6140e0816133a9565b82525050565b600060608201905081810360008301526141008186613c45565b905061410f6020830185612ff5565b61411c60408301846140d7565b949350505050565b60006040820190506141396000830185612ff5565b6141466020830184612e9e565b9392505050565b60006020828403121561416357614162612cc6565b5b600061417184828501613f4a565b91505092915050565b7f4f70732e63616e63656c5461736b3a205461736b206e6f7420666f756e640000600082015250565b60006141b0601e8361302a565b91506141bb8261417a565b602082019050919050565b600060208201905081810360008301526141df816141a3565b9050919050565b6000813590506141f581613f33565b92915050565b61420481613f9f565b811461420f57600080fd5b50565b600081359050614221816141fb565b92915050565b6000806000806080858703121561424157614240612cc6565b5b600061424f878288016141e6565b945050602061426087828801614212565b9350506040614271878288016141e6565b925050606085013567ffffffffffffffff81111561429257614291612ccb565b5b61429e87828801613345565b91505092959194509250565b60006040820190506142bf6000830185612e9e565b81810360208301526142d18184613c45565b90509392505050565b6000819050919050565b6142f56142f082613f9f565b6142da565b82525050565b600061430782846142e4565b60048201915081905092915050565b600080600080600060a0868803121561433257614331612cc6565b5b6000614340888289016141e6565b955050602061435188828901614212565b9450506040614362888289016141e6565b935050606086013567ffffffffffffffff81111561438357614382612ccb565b5b61438f88828901613345565b92505060806143a0888289016141e6565b9150509295509295909350565b600060a0820190506143c26000830188612ff5565b6143cf6020830187612e9e565b6143dc6040830186612e9e565b81810360608301526143ee8185613c45565b905081810360808301526144028184613c45565b90509695505050505050565b7f4f70732e5f6d6f64756c65496e697469616c697365643a204e6f7420696e6974600082015250565b600061444460208361302a565b915061444f8261440e565b602082019050919050565b6000602082019050818103600083015261447381614437565b9050919050565b600081905092915050565b600061449082613c29565b61449a818561447a565b93506144aa81856020860161303b565b80840191505092915050565b60006144c28284614485565b915081905092915050565b600060c0820190506144e26000830189612e9e565b6144ef6020830188612e9e565b6144fc6040830187613fcb565b61450960608301866140d7565b6145166080830185612e9e565b61452360a0830184612ff5565b979650505050505050565b60008160601b9050919050565b60006145468261452e565b9050919050565b60006145588261453b565b9050919050565b61457061456b82612cf0565b61454d565b82525050565b60006145828285614485565b915061458e828461455f565b6014820191508190509392505050565b6145a781613507565b81146145b257600080fd5b50565b6000813590506145c48161459e565b92915050565b600080600080600080600080610100898b0312156145eb576145ea612cc6565b5b60006145f98b828c016145b5565b985050602061460a8b828c016145b5565b975050604061461b8b828c016141e6565b965050606061462c8b828c01614212565b955050608061463d8b828c016141e6565b94505060a089013567ffffffffffffffff81111561465e5761465d612ccb565b5b61466a8b828c01613345565b93505060c061467b8b828c016141e6565b92505060e061468c8b828c016133cc565b9150509295985092959890939650565b60006146a782613373565b91506146b283613373565b9250828210156146c5576146c4613991565b5b828203905092915050565b60006146db82613373565b91506146e683613373565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561471b5761471a613991565b5b828201905092915050565b7f4f70732e5f76616c69644d6f64756c65733a20417363206f6e6c790000000000600082015250565b600061475c601b8361302a565b915061476782614726565b602082019050919050565b6000602082019050818103600083015261478b8161474f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006147cc82613373565b91506147d783613373565b9250826147e7576147e6614792565b5b828206905092915050565b600081905092915050565b60006148088261301f565b61481281856147f2565b935061482281856020860161303b565b80840191505092915050565b600061483a82856147fd565b915061484682846147fd565b91508190509392505050565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000600082015250565b6000614888600f836147f2565b915061489382614852565b600f82019050919050565b60006148aa82846147fd565b91506148b58261487b565b915081905092915050565b7f556e657870656374656452657475726e64617461000000000000000000000000600082015250565b60006148f66014836147f2565b9150614901826148c0565b601482019050919050565b600061491882846147fd565b9150614923826148e9565b915081905092915050565b60006080820190506149436000830187612ff5565b6149506020830186612e9e565b61495d6040830185612e9e565b818103606083015261496f8184613c45565b905095945050505050565b600061498d614988846132c3565b6132a8565b9050828152602081018484840111156149a9576149a8613243565b5b6149b484828561303b565b509392505050565b600082601f8301126149d1576149d0612ec8565b5b81516149e184826020860161497a565b91505092915050565b60008060408385031215614a0157614a00612cc6565b5b6000614a0f85828601613f4a565b925050602083015167ffffffffffffffff811115614a3057614a2f612ccb565b5b614a3c858286016149bc565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212208a7c5895a684964e9fd2ad64662b6459b834eb67af0b300ecf93d82ea4f1f7f864736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelTask(bytes32)": {
        "params": {
          "taskId": "Unique hash of the task that is being cancelled. {See LibTaskId-getTaskId}"
        }
      },
      "createTask(address,bytes,(uint8[],bytes[]),address)": {
        "params": {
          "execAddress": "Address of contract that should be called by Gelato.",
          "execData": "Execution data to be called with / function selector if execution data is yet to be determined.",
          "feeToken": "Address of token to be used as payment. Use address(0) if TaskTreasury is being used, 0xeeeeee... for ETH or native tokens.",
          "moduleData": "Conditional modules that will be used. {See LibDataTypes-ModuleData}"
        },
        "returns": {
          "taskId": "Unique hash of the task created."
        }
      },
      "exec(address,address,bytes,(uint8[],bytes[]),uint256,address,bool,bool)": {
        "params": {
          "execAddress": "Address of contract that should be called by Gelato.",
          "execData": "Execution data to be called with / function selector if execution data is yet to be determined.",
          "feeToken": "Token used to pay for the execution. ETH = 0xeeeeee...",
          "moduleData": "Conditional modules that will be used. {See LibDataTypes-ModuleData}",
          "revertOnFailure": "To revert or not if call to execAddress fails. (Used for off-chain simulations)",
          "taskCreator": "The address which created the task.",
          "txFee": "Fee paid to Gelato for execution, deducted on the TaskTreasury or transfered to Gelato.",
          "useTaskTreasuryFunds": "If taskCreator's balance on TaskTreasury should pay for the tx."
        }
      },
      "getFeeDetails()": {
        "returns": {
          "_0": "uint256 Fee amount to be paid.",
          "_1": "address Token to be paid. (Determined and passed by taskCreator during createTask)"
        }
      },
      "getTaskIdsByUser(address)": {
        "params": {
          "taskCreator": "Address of task creator to query."
        },
        "returns": {
          "_0": "bytes32[] List of taskIds created."
        }
      },
      "setModule(uint8[],address[])": {
        "params": {
          "moduleAddresses": "List of addresses for respective modules.",
          "modules": "List of modules to be set"
        }
      }
    },
    "stateVariables": {
      "taskTreasury": {
        "return": "ITaskTreasuryUpgradable TaskTreasury contract interface",
        "returns": {
          "_0": "ITaskTreasuryUpgradable TaskTreasury contract interface"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelTask(bytes32)": {
        "notice": "Terminates a task that was created and Gelato can no longer execute it."
      },
      "createTask(address,bytes,(uint8[],bytes[]),address)": {
        "notice": "Initiates a task with conditions which Gelato will monitor and execute when conditions are met."
      },
      "exec(address,address,bytes,(uint8[],bytes[]),uint256,address,bool,bool)": {
        "notice": "Execution API called by Gelato."
      },
      "getFeeDetails()": {
        "notice": "Helper function to query fee and feeToken to be used for payment. (For executions which pays itself)"
      },
      "getTaskIdsByUser(address)": {
        "notice": "Helper func to query all open tasks by a task creator."
      },
      "setModule(uint8[],address[])": {
        "notice": "Sets the address of task modules. Only callable by proxy admin."
      },
      "taskTreasury()": {
        "notice": "TaskTreasury contract where user deposit funds to be used for fee payments."
      }
    },
    "notice": "Ops enables everyone to have Gelato monitor and execute transactions.ExecAddress refers to the contract that has the function which Gelato will call.Modules allow users to customise conditions and specifications when creating a task.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2351,
        "contract": "contracts/Ops.sol:Ops",
        "label": "taskCreator",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2356,
        "contract": "contracts/Ops.sol:Ops",
        "label": "execAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2362,
        "contract": "contracts/Ops.sol:Ops",
        "label": "_createdTasks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)1433_storage)"
      },
      {
        "astId": 2364,
        "contract": "contracts/Ops.sol:Ops",
        "label": "fee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2366,
        "contract": "contracts/Ops.sol:Ops",
        "label": "feeToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2372,
        "contract": "contracts/Ops.sol:Ops",
        "label": "timedTask",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Time)3569_storage)"
      },
      {
        "astId": 2377,
        "contract": "contracts/Ops.sol:Ops",
        "label": "taskModuleAddresses",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(Module)3556,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Module)3556": {
        "encoding": "inplace",
        "label": "enum LibDataTypes.Module",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)1433_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1433_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(Time)3569_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibDataTypes.Time)",
        "numberOfBytes": "32",
        "value": "t_struct(Time)3569_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Module)3556,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(Module)3556",
        "label": "mapping(enum LibDataTypes.Module => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Bytes32Set)1433_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1432,
            "contract": "contracts/Ops.sol:Ops",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1239_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1239_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1234,
            "contract": "contracts/Ops.sol:Ops",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1238,
            "contract": "contracts/Ops.sol:Ops",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Time)3569_storage": {
        "encoding": "inplace",
        "label": "struct LibDataTypes.Time",
        "members": [
          {
            "astId": 3566,
            "contract": "contracts/Ops.sol:Ops",
            "label": "nextExec",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 3568,
            "contract": "contracts/Ops.sol:Ops",
            "label": "interval",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
