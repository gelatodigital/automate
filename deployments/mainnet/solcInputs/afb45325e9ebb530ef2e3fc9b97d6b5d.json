{
  "language": "Solidity",
  "sources": {
    "contracts/Counter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\nimport { OpsReady } from \"./OpsReady.sol\";\n\ncontract Counter is OpsReady {\n  uint256 public count;\n  uint256 public lastExecuted;\n\n  constructor(address payable _pokeMe) OpsReady(_pokeMe) {}\n\n  function increaseCount(uint256 amount) external onlyOps {\n    require(\n      ((block.timestamp - lastExecuted) > 180),\n      \"Counter: increaseCount: Time not elapsed\"\n    );\n\n    count += amount;\n    lastExecuted = block.timestamp;\n  }\n}\n"
    },
    "contracts/OpsReady.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\nabstract contract OpsReady {\n  address payable public immutable pokeMe;\n\n  constructor(address payable _pokeMe) {\n    pokeMe = _pokeMe;\n  }\n\n  modifier onlyOps() {\n    require(msg.sender == pokeMe, \"OpsReady: onlyOps\");\n    _;\n  }\n}\n"
    },
    "contracts/CounterResolver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\nimport {IResolver} from \"./interfaces/IResolver.sol\";\n\ninterface ICounter {\n    function lastExecuted() external view returns (uint256);\n\n    function increaseCount(uint256 amount) external;\n}\n\ncontract CounterResolver is IResolver {\n    address public immutable COUNTER;\n\n    constructor(address _counter) {\n        COUNTER = _counter;\n    }\n\n    function checker()\n        external\n        view\n        override\n        returns (bool canExec, bytes memory execPayload)\n    {\n        uint256 lastExecuted = ICounter(COUNTER).lastExecuted();\n\n        canExec = (block.timestamp - lastExecuted) > 180;\n\n        execPayload = abi.encodeWithSelector(\n            ICounter.increaseCount.selector,\n            uint256(100)\n        );\n    }\n}\n"
    },
    "contracts/interfaces/IResolver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\ninterface IResolver {\n    function checker()\n        external\n        view\n        returns (bool canExec, bytes memory execPayload);\n}\n"
    },
    "contracts/FGelato.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\nfunction _transfer(\n    address payable _to,\n    address _paymentToken,\n    uint256 _amount\n) {\n    if (_paymentToken == ETH) {\n        (bool success, ) = _to.call{value: _amount}(\"\");\n        require(success, \"_transfer: ETH transfer failed\");\n    } else {\n        SafeERC20.safeTransfer(IERC20(_paymentToken), _to, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/TaskTreasuryMatic.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {_transfer, ETH} from \"./FGelato.sol\";\n\ncontract TaskTreasuryMatic is Ownable, ReentrancyGuard {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using SafeERC20 for IERC20;\n\n    uint256 public maxFee;\n    mapping(address => mapping(address => uint256)) public userTokenBalance;\n    mapping(address => EnumerableSet.AddressSet) internal _tokenCredits;\n    EnumerableSet.AddressSet internal _whitelistedServices;\n    address payable public immutable gelato;\n\n    event FundsDeposited(\n        address indexed sender,\n        address indexed token,\n        uint256 indexed amount\n    );\n    event FundsWithdrawn(\n        address indexed receiver,\n        address indexed initiator,\n        address indexed token,\n        uint256 amount\n    );\n\n    constructor(address payable _gelato) {\n        gelato = _gelato;\n        maxFee = 1 ether;\n    }\n\n    modifier onlyWhitelistedServices() {\n        require(\n            _whitelistedServices.contains(msg.sender),\n            \"TaskTreasury: onlyWhitelistedServices\"\n        );\n        _;\n    }\n\n    /// @notice Function to deposit Funds which will be used to execute transactions on various services\n    /// @param _receiver Address receiving the credits\n    /// @param _token Token to be credited, use \"0xeeee....\" for ETH\n    /// @param _amount Amount to be credited\n    function depositFunds(\n        address _receiver,\n        address _token,\n        uint256 _amount\n    ) external payable {\n        uint256 depositAmount;\n        if (_token == ETH) {\n            depositAmount = msg.value;\n        } else {\n            IERC20 token = IERC20(_token);\n            uint256 preBalance = token.balanceOf(address(this));\n            token.safeTransferFrom(msg.sender, address(this), _amount);\n            uint256 postBalance = token.balanceOf(address(this));\n            depositAmount = postBalance - preBalance;\n        }\n\n        userTokenBalance[_receiver][_token] =\n            userTokenBalance[_receiver][_token] +\n            depositAmount;\n\n        if (!_tokenCredits[_receiver].contains(_token))\n            _tokenCredits[_receiver].add(_token);\n\n        emit FundsDeposited(_receiver, _token, depositAmount);\n    }\n\n    /// @notice Function to withdraw Funds back to the _receiver\n    /// @param _receiver Address receiving the credits\n    /// @param _token Token to be credited, use \"0xeeee....\" for ETH\n    /// @param _amount Amount to be credited\n    function withdrawFunds(\n        address payable _receiver,\n        address _token,\n        uint256 _amount\n    ) external nonReentrant {\n        uint256 balance = userTokenBalance[msg.sender][_token];\n\n        uint256 withdrawAmount = Math.min(balance, _amount);\n\n        userTokenBalance[msg.sender][_token] = balance - withdrawAmount;\n\n        _transfer(_receiver, _token, withdrawAmount);\n\n        if (withdrawAmount == balance) _tokenCredits[msg.sender].remove(_token);\n\n        emit FundsWithdrawn(_receiver, msg.sender, _token, withdrawAmount);\n    }\n\n    /// @notice Function called by whitelisted services to handle payments, e.g. Ops\"\n    /// @param _token Token to be used for payment by users\n    /// @param _amount Amount to be deducted\n    /// @param _user Address of user whose balance will be deducted\n    function useFunds(\n        address _token,\n        uint256 _amount,\n        address _user\n    ) external onlyWhitelistedServices {\n        if (maxFee != 0) require(maxFee >= _amount, \"TaskTreasury: useFunds: Overchared\" );\n        userTokenBalance[_user][_token] =\n            userTokenBalance[_user][_token] -\n            _amount;\n\n        if (userTokenBalance[_user][_token] == 0)\n            _tokenCredits[_user].remove(_token);\n\n        _transfer(gelato, _token, _amount);\n    }\n\n    // Governance functions\n\n    /// @notice Add new service that can call useFunds. Gelato Governance\n    /// @param _service New service to add\n    function addWhitelistedService(address _service) external onlyOwner {\n        require(\n            !_whitelistedServices.contains(_service),\n            \"TaskTreasury: addWhitelistedService: whitelisted\"\n        );\n        _whitelistedServices.add(_service);\n    }\n\n    /// @notice Remove old service that can call useFunds. Gelato Governance\n    /// @param _service Old service to remove\n    function removeWhitelistedService(address _service) external onlyOwner {\n        require(\n            _whitelistedServices.contains(_service),\n            \"TaskTreasury: addWhitelistedService: !whitelisted\"\n        );\n        _whitelistedServices.remove(_service);\n    }\n\n    /// @notice Change maxFee charged by Gelato (only relevant on Layer2s)\n    /// @param _newMaxFee New Max Fee to charge\n    function setMaxFee(uint256 _newMaxFee) external onlyOwner {\n        maxFee = _newMaxFee;\n    }\n\n    // View Funcs\n\n    /// @notice Helper func to get all deposited tokens by a user\n    /// @param _user User to get the balances from\n    function getCreditTokensByUser(address _user)\n        external\n        view\n        returns (address[] memory)\n    {\n        uint256 length = _tokenCredits[_user].length();\n        address[] memory creditTokens = new address[](length);\n\n        for (uint256 i; i < length; i++) {\n            creditTokens[i] = _tokenCredits[_user].at(i);\n        }\n        return creditTokens;\n    }\n\n    function getWhitelistedServices() external view returns (address[] memory) {\n        uint256 length = _whitelistedServices.length();\n        address[] memory whitelistedServices = new address[](length);\n\n        for (uint256 i; i < length; i++) {\n            whitelistedServices[i] = _whitelistedServices.at(i);\n        }\n        return whitelistedServices;\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute.\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/TaskTreasury.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {_transfer, ETH} from \"./FGelato.sol\";\n\ncontract TaskTreasury is Ownable, ReentrancyGuard {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using SafeERC20 for IERC20;\n\n    mapping(address => mapping(address => uint256)) public userTokenBalance;\n    mapping(address => EnumerableSet.AddressSet) internal _tokenCredits;\n    EnumerableSet.AddressSet internal _whitelistedServices;\n    address payable public immutable gelato;\n\n    event FundsDeposited(\n        address indexed sender,\n        address indexed token,\n        uint256 indexed amount\n    );\n    event FundsWithdrawn(\n        address indexed receiver,\n        address indexed initiator,\n        address indexed token,\n        uint256 amount\n    );\n\n    constructor(address payable _gelato) {\n        gelato = _gelato;\n    }\n\n    modifier onlyWhitelistedServices() {\n        require(\n            _whitelistedServices.contains(msg.sender),\n            \"TaskTreasury: onlyWhitelistedServices\"\n        );\n        _;\n    }\n\n    /// @notice Function to deposit Funds which will be used to execute transactions on various services\n    /// @param _receiver Address receiving the credits\n    /// @param _token Token to be credited, use \"0xeeee....\" for ETH\n    /// @param _amount Amount to be credited\n    function depositFunds(\n        address _receiver,\n        address _token,\n        uint256 _amount\n    ) external payable {\n        uint256 depositAmount;\n        if (_token == ETH) {\n            depositAmount = msg.value;\n        } else {\n            IERC20 token = IERC20(_token);\n            uint256 preBalance = token.balanceOf(address(this));\n            token.safeTransferFrom(msg.sender, address(this), _amount);\n            uint256 postBalance = token.balanceOf(address(this));\n            depositAmount = postBalance - preBalance;\n        }\n\n        userTokenBalance[_receiver][_token] =\n            userTokenBalance[_receiver][_token] +\n            depositAmount;\n\n        if (!_tokenCredits[_receiver].contains(_token))\n            _tokenCredits[_receiver].add(_token);\n\n        emit FundsDeposited(_receiver, _token, depositAmount);\n    }\n\n    /// @notice Function to withdraw Funds back to the _receiver\n    /// @param _receiver Address receiving the credits\n    /// @param _token Token to be credited, use \"0xeeee....\" for ETH\n    /// @param _amount Amount to be credited\n    function withdrawFunds(\n        address payable _receiver,\n        address _token,\n        uint256 _amount\n    ) external nonReentrant {\n        uint256 balance = userTokenBalance[msg.sender][_token];\n\n        uint256 withdrawAmount = Math.min(balance, _amount);\n\n        userTokenBalance[msg.sender][_token] = balance - withdrawAmount;\n\n        _transfer(_receiver, _token, withdrawAmount);\n\n        if (withdrawAmount == balance) _tokenCredits[msg.sender].remove(_token);\n\n        emit FundsWithdrawn(_receiver, msg.sender, _token, withdrawAmount);\n    }\n\n    /// @notice Function called by whitelisted services to handle payments, e.g. Ops\"\n    /// @param _token Token to be used for payment by users\n    /// @param _amount Amount to be deducted\n    /// @param _user Address of user whose balance will be deducted\n    function useFunds(\n        address _token,\n        uint256 _amount,\n        address _user\n    ) external onlyWhitelistedServices {\n        userTokenBalance[_user][_token] =\n            userTokenBalance[_user][_token] -\n            _amount;\n\n        if (userTokenBalance[_user][_token] == 0)\n            _tokenCredits[_user].remove(_token);\n\n        _transfer(gelato, _token, _amount);\n    }\n\n    // Governance functions\n\n    /// @notice Add new service that can call useFunds. Gelato Governance\n    /// @param _service New service to add\n    function addWhitelistedService(address _service) external onlyOwner {\n        require(\n            !_whitelistedServices.contains(_service),\n            \"TaskTreasury: addWhitelistedService: whitelisted\"\n        );\n        _whitelistedServices.add(_service);\n    }\n\n    /// @notice Remove old service that can call useFunds. Gelato Governance\n    /// @param _service Old service to remove\n    function removeWhitelistedService(address _service) external onlyOwner {\n        require(\n            _whitelistedServices.contains(_service),\n            \"TaskTreasury: addWhitelistedService: !whitelisted\"\n        );\n        _whitelistedServices.remove(_service);\n    }\n\n    // View Funcs\n\n    /// @notice Helper func to get all deposited tokens by a user\n    /// @param _user User to get the balances from\n    function getCreditTokensByUser(address _user)\n        external\n        view\n        returns (address[] memory)\n    {\n        uint256 length = _tokenCredits[_user].length();\n        address[] memory creditTokens = new address[](length);\n\n        for (uint256 i; i < length; i++) {\n            creditTokens[i] = _tokenCredits[_user].at(i);\n        }\n        return creditTokens;\n    }\n\n    function getWhitelistedServices() external view returns (address[] memory) {\n        uint256 length = _whitelistedServices.length();\n        address[] memory whitelistedServices = new address[](length);\n\n        for (uint256 i; i < length; i++) {\n            whitelistedServices[i] = _whitelistedServices.at(i);\n        }\n        return whitelistedServices;\n    }\n}\n"
    },
    "contracts/Ops.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\nimport {Gelatofied} from \"./Gelatofied.sol\";\nimport {GelatoBytes} from \"./GelatoBytes.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {_transfer, ETH} from \"./FGelato.sol\";\nimport {TaskTreasury} from \"./TaskTreasury.sol\";\n\n/// @notice Ops enables everyone to communicate to Gelato Bots to monitor and execute certain transactions\n/// @notice ResolverAddresses determine when Gelato should execute and provides bots with\n/// the payload they should use to execute\n/// @notice ExecAddress determine the actual contracts to execute a function on\ncontract Ops is Gelatofied {\n    using SafeERC20 for IERC20;\n    using GelatoBytes for bytes;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    string public constant version = \"2\";\n    mapping(bytes32 => address) public taskCreator;\n    mapping(bytes32 => address) public execAddresses;\n    mapping(address => EnumerableSet.Bytes32Set) internal _createdTasks;\n    address public immutable taskTreasury;\n\n    constructor(address payable _gelato, address _taskTreasury)\n        Gelatofied(_gelato)\n    {\n        taskTreasury = _taskTreasury;\n    }\n\n    event TaskCreated(\n        address taskCreator,\n        address execAddress,\n        bytes4 selector,\n        address resolverAddress,\n        bytes32 taskId,\n        bytes resolverData\n    );\n    event TaskCancelled(bytes32 taskId, address taskCreator);\n    event ExecSuccess(\n        uint256 indexed txFee,\n        address indexed feeToken,\n        address indexed execAddress,\n        bytes execData,\n        bytes32 taskId\n    );\n\n    /// @notice Create a task that tells Gelato to monitor and execute transactions on specific contracts\n    /// @param _execAddress On which contract should Gelato execute the transactions\n    /// @param _execSelector Which function Gelato should eecute on the _execAddress\n    /// @param _resolverAddress On which contract should Gelato check when to execute the tx\n    /// @param _resolverData Which data should be used to check on the Resolver when to execute the tx\n    function createTask(\n        address _execAddress,\n        bytes4 _execSelector,\n        address _resolverAddress,\n        bytes calldata _resolverData\n    ) external {\n        bytes32 _task = getTaskId(msg.sender, _execAddress, _execSelector);\n\n        require(\n            taskCreator[_task] == address(0),\n            \"Ops: createTask: Sender already started task\"\n        );\n\n        _createdTasks[msg.sender].add(_task);\n        taskCreator[_task] = msg.sender;\n        execAddresses[_task] = _execAddress;\n\n        emit TaskCreated(\n            msg.sender,\n            _execAddress,\n            _execSelector,\n            _resolverAddress,\n            _task,\n            _resolverData\n        );\n    }\n\n    /// @notice Cancel a task so that Gelato can no longer execute it\n    /// @param _taskId The hash of the task, can be computed using getTaskId()\n    function cancelTask(bytes32 _taskId) external {\n        require(\n            taskCreator[_taskId] == msg.sender,\n            \"Ops: cancelTask: Sender did not start task yet\"\n        );\n\n        _createdTasks[msg.sender].remove(_taskId);\n        delete taskCreator[_taskId];\n        delete execAddresses[_taskId];\n\n        emit TaskCancelled(_taskId, msg.sender);\n    }\n\n    /// @notice Execution API called by Gelato\n    /// @param _txFee Fee paid to Gelato for execution, deducted on the TaskTreasury\n    /// @param _feeToken Token used to pay for the execution. ETH = 0xeeeeee...\n    /// @param _taskCreator On which contract should Gelato check when to execute the tx\n    /// @param _execAddress On which contract should Gelato execute the tx\n    /// @param _execData Data used to execute the tx, queried from the Resolver by Gelato\n    function exec(\n        uint256 _txFee,\n        address _feeToken,\n        address _taskCreator,\n        address _execAddress,\n        bytes calldata _execData\n    ) external onlyGelato {\n        bytes32 task = getTaskId(\n            _taskCreator,\n            _execAddress,\n            _execData.calldataSliceSelector()\n        );\n\n        require(\n            taskCreator[task] == _taskCreator,\n            \"Ops: exec: No task found\"\n        );\n\n        (bool success, ) = _execAddress.call(_execData);\n        require(success, \"Ops: exec: Execution failed\");\n\n        TaskTreasury(taskTreasury).useFunds(_feeToken, _txFee, _taskCreator);\n\n        emit ExecSuccess(_txFee, _feeToken, _execAddress, _execData, task);\n    }\n\n    /// @notice Returns TaskId of a task Creator\n    /// @param _taskCreator Address of the task creator\n    /// @param _execAddress Address of the contract to be executed by Gelato\n    /// @param _selector Function on the _execAddress which should be executed\n    function getTaskId(\n        address _taskCreator,\n        address _execAddress,\n        bytes4 _selector\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encode(_taskCreator, _execAddress, _selector));\n    }\n\n    /// @notice Helper func to query the _selector of a function you want to automate\n    /// @param _func String of the function you want the selector from\n    /// @dev Example: \"transferFrom(address,address,uint256)\" => 0x23b872dd\n    function getSelector(string calldata _func) external pure returns (bytes4) {\n        return bytes4(keccak256(bytes(_func)));\n    }\n\n    /// @notice Helper func to query all open tasks by a task creator\n    /// @param _taskCreator Address who created the task\n    function getTaskIdsByUser(address _taskCreator)\n        external\n        view\n        returns (bytes32[] memory)\n    {\n        uint256 length = _createdTasks[_taskCreator].length();\n        bytes32[] memory taskIds = new bytes32[](length);\n\n        for (uint256 i; i < length; i++) {\n            taskIds[i] = _createdTasks[_taskCreator].at(i);\n        }\n\n        return taskIds;\n    }\n}\n"
    },
    "contracts/Gelatofied.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {_transfer, ETH} from \"./FGelato.sol\";\n\nabstract contract Gelatofied {\n    address payable public immutable gelato;\n\n    constructor(address payable _gelato) {\n        gelato = _gelato;\n    }\n\n    modifier gelatofy(uint256 _amount, address _paymentToken) {\n        require(msg.sender == gelato, \"Gelatofied: Only gelato\");\n        _;\n        _transfer(gelato, _paymentToken, _amount);\n    }\n\n    modifier onlyGelato() {\n        require(msg.sender == gelato, \"Gelatofied: Only gelato\");\n        _;\n    }\n}\n"
    },
    "contracts/GelatoBytes.sol": {
      "content": "// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity 0.8.0;\n\nlibrary GelatoBytes {\n    function calldataSliceSelector(bytes calldata _bytes)\n        internal\n        pure\n        returns (bytes4 selector)\n    {\n        selector =\n            _bytes[0] |\n            (bytes4(_bytes[1]) >> 8) |\n            (bytes4(_bytes[2]) >> 16) |\n            (bytes4(_bytes[3]) >> 24);\n    }\n\n    function memorySliceSelector(bytes memory _bytes)\n        internal\n        pure\n        returns (bytes4 selector)\n    {\n        selector =\n            _bytes[0] |\n            (bytes4(_bytes[1]) >> 8) |\n            (bytes4(_bytes[2]) >> 16) |\n            (bytes4(_bytes[3]) >> 24);\n    }\n\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\n        internal\n        pure\n    {\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\n        if (_bytes.length % 32 == 4) {\n            bytes4 selector;\n            assembly {\n                selector := mload(add(0x20, _bytes))\n            }\n            if (selector == 0x08c379a0) {\n                // Function selector for Error(string)\n                assembly {\n                    _bytes := add(_bytes, 68)\n                }\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\n            } else {\n                revert(\n                    string(abi.encodePacked(_tracingInfo, \"NoErrorSelector\"))\n                );\n            }\n        } else {\n            revert(\n                string(abi.encodePacked(_tracingInfo, \"UnexpectedReturndata\"))\n            );\n        }\n    }\n\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\n        internal\n        pure\n        returns (string memory)\n    {\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\n        if (_bytes.length % 32 == 4) {\n            bytes4 selector;\n            assembly {\n                selector := mload(add(0x20, _bytes))\n            }\n            if (selector == 0x08c379a0) {\n                // Function selector for Error(string)\n                assembly {\n                    _bytes := add(_bytes, 68)\n                }\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\n            } else {\n                return\n                    string(abi.encodePacked(_tracingInfo, \"NoErrorSelector\"));\n            }\n        } else {\n            return\n                string(abi.encodePacked(_tracingInfo, \"UnexpectedReturndata\"));\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
