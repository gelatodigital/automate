{
  "address": "0x99D30A8B8700f6C7bF6AA61506b1E895FAbc5E3A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITaskTreasury",
          "name": "_oldTreasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "service",
          "type": "address"
        }
      ],
      "name": "LogDeductFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maxFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMaxFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "service",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        }
      ],
      "name": "UpdatedService",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_SHARES_IN_TREASURY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCreditTokensByUser",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalCreditTokensByUser",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelistedServices",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFee",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldTreasury",
      "outputs": [
        {
          "internalType": "contract ITaskTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "totalUserTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxFee",
          "type": "uint256"
        }
      ],
      "name": "updateMaxFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_service",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_add",
          "type": "bool"
        }
      ],
      "name": "updateWhitelistedService",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "useFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "userTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x086a7c1a6c4817dbdd1f509af95cacd706512ee7a2d9a77025c438c901da2d1b",
  "receipt": {
    "to": null,
    "from": "0xCDf41a135C65d0013393B3793F92b4FAF31032d0",
    "contractAddress": "0x99D30A8B8700f6C7bF6AA61506b1E895FAbc5E3A",
    "transactionIndex": 20,
    "gasUsed": "3294713",
    "logsBloom": "0x
    "blockHash": "0x5971620dc307f356a19656bcbf64774e7329e141fda8cfa241c07b9f33680982",
    "transactionHash": "0x086a7c1a6c4817dbdd1f509af95cacd706512ee7a2d9a77025c438c901da2d1b",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 26844699,
        "transactionHash": "0x086a7c1a6c4817dbdd1f509af95cacd706512ee7a2d9a77025c438c901da2d1b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cdf41a135c65d0013393b3793f92b4faf31032d0",
          "0x000000000000000000000000de8da1ee512529b6c61fe7c769affc160308dea2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000020ebb936f5bd4610000000000000000000000000000000000000000000000000751152c49b30ed8000000000000000000000000000000000000000000000a9b642ccf08054ca2c000000000000000000000000000000000000000000000000005425998da573a77000000000000000000000000000000000000000000000a9b663b8a9b74a87721",
        "logIndex": 97,
        "blockHash": "0x5971620dc307f356a19656bcbf64774e7329e141fda8cfa241c07b9f33680982"
      }
    ],
    "blockNumber": 26844699,
    "cumulativeGasUsed": "7317323",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xA8a7BBe83960B29789d5CB06Dcd2e6C1DF20581C"],
  "solcInputHash": "07324167f4bf468b271334a7271a4559",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITaskTreasury\",\"name\":\"_oldTreasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"LogDeductFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"UpdatedService\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_SHARES_IN_TREASURY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCreditTokensByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalCreditTokensByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedServices\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldTreasury\",\"outputs\":[{\"internalType\":\"contract ITaskTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalUserTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxFee\",\"type\":\"uint256\"}],\"name\":\"updateMaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_service\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"updateWhitelistedService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"useFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"userTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositFunds(address,address,uint256)\":{\"params\":{\"_amount\":\"Amount to be credited\",\"_receiver\":\"Address receiving the credits\",\"_token\":\"Token to be credited, use \\\"0xeeee....\\\" for ETH\"}},\"getCreditTokensByUser(address)\":{\"params\":{\"_user\":\"User to get the balances from\"}},\"getTotalCreditTokensByUser(address)\":{\"params\":{\"_user\":\"User to get the balances from\"}},\"totalUserTokenBalance(address,address)\":{\"params\":{\"_token\":\"Token to check balance of\",\"_user\":\"User to get balance from\"}},\"updateMaxFee(uint256)\":{\"params\":{\"_newMaxFee\":\"New Max Fee to charge\"}},\"updateWhitelistedService(address,bool)\":{\"params\":{\"_add\":\"Add to whitelist if true, else remove from whitelist\",\"_service\":\"Service to add or remove from whitelist\"}},\"useFunds(address,address,uint256)\":{\"params\":{\"_amount\":\"Amount to be deducted\",\"_token\":\"Token to be used for payment by users\",\"_user\":\"Address of user whose balance will be deducted\"}},\"userTokenBalance(address,address)\":{\"params\":{\"_token\":\"Token to check balance of\",\"_user\":\"User to get balance from\"}},\"withdrawFunds(address,address,uint256)\":{\"params\":{\"_amount\":\"Amount to be credited\",\"_receiver\":\"Address receiving the credits\",\"_token\":\"Token to be credited, use \\\"0xeeee....\\\" for ETH\"}}},\"stateVariables\":{\"_tokens\":{\"details\":\"tracks the tokens deposited by users\"},\"shares\":{\"details\":\"tracks token shares of users\"},\"totalShares\":{\"details\":\"tracks total shares of tokens\"}},\"version\":1},\"userdoc\":{\"events\":{\"FundsDeposited(address,address,uint256)\":{\"notice\":\"Events ///\"}},\"kind\":\"user\",\"methods\":{\"depositFunds(address,address,uint256)\":{\"notice\":\"Function to deposit Funds which will be used to execute transactions on various services\"},\"getCreditTokensByUser(address)\":{\"notice\":\"Helper func to get all deposited tokens by a user.\"},\"getTotalCreditTokensByUser(address)\":{\"notice\":\"Helper func to get all deposited tokens by a user across treasuries.\"},\"getWhitelistedServices()\":{\"notice\":\"Get list of services that can call useFunds.\"},\"totalUserTokenBalance(address,address)\":{\"notice\":\"Get balance of a token owned by user across treasuries\"},\"updateMaxFee(uint256)\":{\"notice\":\"Change maxFee charged by Gelato (only relevant on Layer2s)\"},\"updateWhitelistedService(address,bool)\":{\"notice\":\"Add or remove service that can call useFunds. Gelato Governance\"},\"useFunds(address,address,uint256)\":{\"notice\":\"Function called by whitelisted services to handle payments, e.g. Gelato Ops\"},\"userTokenBalance(address,address)\":{\"notice\":\"Get balance of a token owned by user\"},\"withdrawFunds(address,address,uint256)\":{\"notice\":\"Function to withdraw Funds back to the _receiver\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/taskTreasury/TaskTreasuryUpgradable.sol\":\"TaskTreasuryUpgradable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Extended {\\n    function decimals() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xdfa1185ee541ba2ef0ef3cfe61fc277233ae557a90d2cb013546e01df7364695\",\"license\":\"MIT\"},\"contracts/interfaces/ITaskTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITaskTreasury {\\n    /// @notice Events ///\\n    event FundsDeposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 indexed amount\\n    );\\n\\n    event FundsWithdrawn(\\n        address indexed receiver,\\n        address indexed initiator,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    /// @notice External functions ///\\n\\n    function depositFunds(\\n        address receiver,\\n        address token,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdrawFunds(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function useFunds(\\n        address token,\\n        uint256 amount,\\n        address user\\n    ) external;\\n\\n    function addWhitelistedService(address service) external;\\n\\n    function removeWhitelistedService(address service) external;\\n\\n    /// @notice External view functions ///\\n\\n    function gelato() external view returns (address);\\n\\n    function getCreditTokensByUser(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getWhitelistedServices() external view returns (address[] memory);\\n\\n    function userTokenBalance(address user, address token)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3a9a4df2a2cb7b86802e1e7e31803283199e98955733c2744873e943497b1c4\",\"license\":\"MIT\"},\"contracts/interfaces/ITaskTreasuryUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITaskTreasuryUpgradable {\\n    /// @notice Events ///\\n    event FundsDeposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 indexed amount\\n    );\\n\\n    event FundsWithdrawn(\\n        address indexed receiver,\\n        address indexed initiator,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    event LogDeductFees(\\n        address indexed user,\\n        address indexed executor,\\n        address indexed token,\\n        uint256 fees,\\n        address service\\n    );\\n\\n    event UpdatedService(address indexed service, bool add);\\n\\n    event UpdatedMaxFee(uint256 indexed maxFee);\\n\\n    /// @notice External functions ///\\n\\n    function depositFunds(\\n        address receiver,\\n        address token,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdrawFunds(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function useFunds(\\n        address user,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function updateMaxFee(uint256 _newMaxFee) external;\\n\\n    function updateWhitelistedService(address service, bool isWhitelist)\\n        external;\\n\\n    /// @notice External view functions ///\\n\\n    function getCreditTokensByUser(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getTotalCreditTokensByUser(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getWhitelistedServices() external view returns (address[] memory);\\n\\n    function totalUserTokenBalance(address user, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userTokenBalance(address user, address token)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xa1452289581534124391c5f5c2a76048013e3a5c700824531c61476527562ba4\",\"license\":\"MIT\"},\"contracts/libraries/LibShares.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\nimport {ETH} from \\\"../vendor/gelato/FGelato.sol\\\";\\nimport {IERC20Extended} from \\\"../interfaces/IERC20Extended.sol\\\";\\n\\nlibrary LibShares {\\n    function contractBalance(address _token) internal view returns (uint256) {\\n        if (_token == ETH) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20Extended(_token).balanceOf(address(this));\\n        }\\n    }\\n\\n    function tokenToShares(\\n        address _token,\\n        uint256 _tokenAmount,\\n        uint256 _totalShares,\\n        uint256 _totalBalance\\n    ) internal view returns (uint256) {\\n        uint256 sharesOfToken;\\n\\n        uint256 tokenIn18Dp = to18Dp(_token, _tokenAmount);\\n        uint256 totalBalanceIn18Dp = to18Dp(_token, _totalBalance);\\n\\n        // credit shares equivalent to token amount\\n        if (_totalShares == 0 || _totalBalance == 0) {\\n            sharesOfToken = tokenIn18Dp;\\n        } else {\\n            sharesOfToken = divCeil(\\n                tokenIn18Dp * _totalShares,\\n                totalBalanceIn18Dp\\n            );\\n        }\\n\\n        return sharesOfToken;\\n    }\\n\\n    function to18Dp(address _token, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_token == ETH) return _amount;\\n        uint256 decimals = IERC20Extended(_token).decimals();\\n\\n        if (decimals < 18) {\\n            return _amount * 10**(18 - decimals);\\n        } else {\\n            return _amount / 10**(decimals - 18);\\n        }\\n    }\\n\\n    function sharesToToken(\\n        uint256 _shares,\\n        uint256 _totalShares,\\n        uint256 _totalBalance\\n    ) internal pure returns (uint256) {\\n        uint256 tokenOfShares;\\n\\n        if (_totalShares == 0 || _totalBalance == 0) {\\n            tokenOfShares = 0;\\n        } else {\\n            tokenOfShares = (_shares * _totalBalance) / _totalShares;\\n        }\\n\\n        return tokenOfShares;\\n    }\\n\\n    function divCeil(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 remainder = x % y;\\n        uint256 result;\\n\\n        if (remainder == 0) {\\n            result = x / y;\\n        } else {\\n            result = ((x - remainder) + y) / y;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xbb062b01df7f9afa11b37ff9ccdf62f98e4b057736cf624e83f5eb016899d59b\",\"license\":\"UNLICENSED\"},\"contracts/taskTreasury/TaskTreasuryUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.12;\\n\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {\\n    IERC20,\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {_transfer, ETH} from \\\"../vendor/gelato/FGelato.sol\\\";\\nimport {Proxied} from \\\"../vendor/proxy/EIP173/Proxied.sol\\\";\\nimport {ITaskTreasury} from \\\"../interfaces/ITaskTreasury.sol\\\";\\nimport {\\n    ITaskTreasuryUpgradable\\n} from \\\"../interfaces/ITaskTreasuryUpgradable.sol\\\";\\nimport {LibShares} from \\\"../libraries/LibShares.sol\\\";\\n\\ncontract TaskTreasuryUpgradable is\\n    ITaskTreasuryUpgradable,\\n    Proxied,\\n    Initializable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    ITaskTreasury public immutable oldTreasury;\\n    uint256 public constant MIN_SHARES_IN_TREASURY = 1e12;\\n    uint256 public maxFee;\\n\\n    ///@dev tracks token shares of users\\n    mapping(address => mapping(address => uint256)) public shares;\\n\\n    ///@dev tracks total shares of tokens\\n    mapping(address => uint256) public totalShares;\\n\\n    ///@dev tracks the tokens deposited by users\\n    mapping(address => EnumerableSet.AddressSet) internal _tokens;\\n\\n    EnumerableSet.AddressSet internal _whitelistedServices;\\n\\n    modifier onlyWhitelistedServices() {\\n        require(\\n            _whitelistedServices.contains(msg.sender),\\n            \\\"TaskTreasury: onlyWhitelistedServices\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(ITaskTreasury _oldTreasury) {\\n        oldTreasury = _oldTreasury;\\n    }\\n\\n    receive() external payable {\\n        depositFunds(msg.sender, ETH, msg.value);\\n    }\\n\\n    function initialize(uint256 _maxFee) external initializer {\\n        maxFee = _maxFee;\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /// @notice Function called by whitelisted services to handle payments, e.g. Gelato Ops\\n    /// @param _user Address of user whose balance will be deducted\\n    /// @param _token Token to be used for payment by users\\n    /// @param _amount Amount to be deducted\\n    function useFunds(\\n        address _user,\\n        address _token,\\n        uint256 _amount\\n    ) external override onlyWhitelistedServices {\\n        if (maxFee != 0)\\n            require(maxFee >= _amount, \\\"TaskTreasury: Overcharged\\\");\\n\\n        uint256 balanceInOld = oldTreasury.userTokenBalance(_user, _token);\\n\\n        if (_amount <= balanceInOld) {\\n            oldTreasury.useFunds(_token, _amount, _user);\\n        } else {\\n            if (balanceInOld > 0)\\n                oldTreasury.useFunds(_token, balanceInOld, _user);\\n\\n            _pay(_user, _token, _amount - balanceInOld);\\n        }\\n\\n        emit LogDeductFees(_user, tx.origin, _token, _amount, msg.sender);\\n    }\\n\\n    /// @notice Change maxFee charged by Gelato (only relevant on Layer2s)\\n    /// @param _newMaxFee New Max Fee to charge\\n    function updateMaxFee(uint256 _newMaxFee) external override onlyProxyAdmin {\\n        maxFee = _newMaxFee;\\n\\n        emit UpdatedMaxFee(_newMaxFee);\\n    }\\n\\n    /// @notice Add or remove service that can call useFunds. Gelato Governance\\n    /// @param _service Service to add or remove from whitelist\\n    /// @param _add Add to whitelist if true, else remove from whitelist\\n    function updateWhitelistedService(address _service, bool _add)\\n        external\\n        override\\n        onlyProxyAdmin\\n    {\\n        if (_add) {\\n            _whitelistedServices.add(_service);\\n        } else {\\n            _whitelistedServices.remove(_service);\\n        }\\n\\n        emit UpdatedService(_service, _add);\\n    }\\n\\n    /// @notice Get list of services that can call useFunds.\\n    function getWhitelistedServices()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return _whitelistedServices.values();\\n    }\\n\\n    // solhint-disable max-line-length\\n    /// @notice Function to deposit Funds which will be used to execute transactions on various services\\n    /// @param _receiver Address receiving the credits\\n    /// @param _token Token to be credited, use \\\"0xeeee....\\\" for ETH\\n    /// @param _amount Amount to be credited\\n    function depositFunds(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount\\n    ) public payable override nonReentrant {\\n        uint256 depositAmount;\\n        uint256 totalBalance;\\n        if (_token == ETH) {\\n            depositAmount = msg.value;\\n        } else {\\n            require(msg.value == 0, \\\"TaskTreasury: No ETH\\\");\\n            IERC20 token = IERC20(_token);\\n\\n            uint256 preBalance = token.balanceOf(address(this));\\n            token.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 postBalance = token.balanceOf(address(this));\\n\\n            depositAmount = postBalance - preBalance;\\n        }\\n\\n        totalBalance = LibShares.contractBalance(_token) - depositAmount;\\n\\n        _creditUser(_receiver, _token, depositAmount, totalBalance);\\n\\n        emit FundsDeposited(_receiver, _token, depositAmount);\\n    }\\n\\n    /// @notice Function to withdraw Funds back to the _receiver\\n    /// @param _receiver Address receiving the credits\\n    /// @param _token Token to be credited, use \\\"0xeeee....\\\" for ETH\\n    /// @param _amount Amount to be credited\\n    function withdrawFunds(\\n        address payable _receiver,\\n        address _token,\\n        uint256 _amount\\n    ) public override nonReentrant {\\n        _deductUser(msg.sender, _token, _amount);\\n\\n        _transfer(_receiver, _token, _amount);\\n\\n        emit FundsWithdrawn(_receiver, msg.sender, _token, _amount);\\n    }\\n\\n    /// @notice Helper func to get all deposited tokens by a user.\\n    /// @param _user User to get the balances from\\n    function getCreditTokensByUser(address _user)\\n        public\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return _tokens[_user].values();\\n    }\\n\\n    /// @notice Helper func to get all deposited tokens by a user across treasuries.\\n    /// @param _user User to get the balances from\\n    function getTotalCreditTokensByUser(address _user)\\n        public\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        address[] memory tokensInNew = _tokens[_user].values();\\n        address[] memory tokensInOld = oldTreasury.getCreditTokensByUser(_user);\\n\\n        uint256 tokensInOldOnlyLength;\\n        for (uint256 i; i < tokensInOld.length; i++) {\\n            if (!_tokens[_user].contains(tokensInOld[i])) {\\n                tokensInOld[tokensInOldOnlyLength] = tokensInOld[i];\\n                tokensInOldOnlyLength++;\\n            }\\n        }\\n\\n        uint256 uniqTokensLength = tokensInNew.length + tokensInOldOnlyLength;\\n        address[] memory tokens = new address[](uniqTokensLength);\\n\\n        for (uint256 i; i < uniqTokensLength; i++) {\\n            if (i < tokensInNew.length) {\\n                tokens[i] = tokensInNew[i];\\n            } else {\\n                uint256 j = i - tokensInNew.length;\\n                tokens[i] = tokensInOld[j];\\n            }\\n        }\\n\\n        return tokens;\\n    }\\n\\n    /// @notice Get balance of a token owned by user\\n    /// @param _user User to get balance from\\n    /// @param _token Token to check balance of\\n    function userTokenBalance(address _user, address _token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 totalBalance = LibShares.contractBalance(_token);\\n        return\\n            LibShares.sharesToToken(\\n                shares[_user][_token],\\n                totalShares[_token],\\n                totalBalance\\n            );\\n    }\\n\\n    /// @notice Get balance of a token owned by user across treasuries\\n    /// @param _user User to get balance from\\n    /// @param _token Token to check balance of\\n    function totalUserTokenBalance(address _user, address _token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 balanceInNew = userTokenBalance(_user, _token);\\n        uint256 balanceInOld = oldTreasury.userTokenBalance(_user, _token);\\n\\n        uint256 balance = balanceInNew + balanceInOld;\\n\\n        return balance;\\n    }\\n\\n    function _creditUser(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _totalBalance\\n    ) internal {\\n        uint256 sharesTotal = totalShares[_token];\\n        uint256 sharesToCredit = LibShares.tokenToShares(\\n            _token,\\n            _amount,\\n            sharesTotal,\\n            _totalBalance\\n        );\\n\\n        if (sharesTotal == 0)\\n            require(\\n                sharesToCredit >= MIN_SHARES_IN_TREASURY,\\n                \\\"TaskTreasury: Require MIN_SHARES_IN_TREASURY\\\"\\n            );\\n\\n        require(sharesToCredit > 0, \\\"TaskTreasury: Zero shares to credit\\\");\\n\\n        shares[_user][_token] += sharesToCredit;\\n        totalShares[_token] = sharesTotal + sharesToCredit;\\n\\n        _tokens[_user].add(_token);\\n    }\\n\\n    function _deductUser(\\n        address _user,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        uint256 totalBalance = LibShares.contractBalance(_token);\\n        uint256 sharesTotal = totalShares[_token];\\n        uint256 sharesToCharge = LibShares.tokenToShares(\\n            _token,\\n            _amount,\\n            sharesTotal,\\n            totalBalance\\n        );\\n\\n        require(\\n            sharesTotal - sharesToCharge >= MIN_SHARES_IN_TREASURY,\\n            \\\"TaskTreasury: Below MIN_SHARES_IN_TREASURY\\\"\\n        );\\n\\n        uint256 sharesOfUser = shares[_user][_token];\\n\\n        shares[_user][_token] = sharesOfUser - sharesToCharge;\\n        totalShares[_token] = sharesTotal - sharesToCharge;\\n\\n        if (sharesOfUser == sharesToCharge) _tokens[_user].remove(_token);\\n    }\\n\\n    function _pay(\\n        address _user,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        address admin = _proxyAdmin();\\n        require(_user != admin, \\\"TaskTreasury: No proxy admin\\\");\\n\\n        uint256 totalBalance = LibShares.contractBalance(_token);\\n        uint256 sharesToPay = LibShares.tokenToShares(\\n            _token,\\n            _amount,\\n            totalShares[_token],\\n            totalBalance\\n        );\\n\\n        require(\\n            shares[_user][_token] >= sharesToPay,\\n            \\\"TaskTreasury: Not enough funds\\\"\\n        );\\n        shares[_user][_token] -= sharesToPay;\\n        shares[admin][_token] += sharesToPay;\\n    }\\n}\\n\",\"keccak256\":\"0x5e02f6632abcc9db021bcb07d1f8f9acb048b351c3c1d77dc173df173f783f28\",\"license\":\"UNLICENSED\"},\"contracts/vendor/gelato/FGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n// solhint-disable private-vars-leading-underscore\\n// solhint-disable func-visibility\\nfunction _transfer(\\n    address payable _to,\\n    address _paymentToken,\\n    uint256 _amount\\n) {\\n    if (_paymentToken == ETH) {\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"_transfer: ETH transfer failed\\\");\\n    } else {\\n        SafeERC20.safeTransfer(IERC20(_paymentToken), _to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xecf150c4e9030703ac85cd5192fb98eca2e68a8df00ca50efd99fc8813cfb4a2\",\"license\":\"UNLICENSED\"},\"contracts/vendor/proxy/EIP173/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address adminAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x428ced1961d42c505a3e49d90498f92f4b0df8537e5ffa59f14ba375d99150a1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003c2d38038062003c2d8339818101604052810190620000379190620000f0565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000122565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b6000620000b88262000097565b9050919050565b620000ca81620000ab565b8114620000d657600080fd5b50565b600081519050620000ea81620000bf565b92915050565b60006020828403121562000109576200010862000072565b5b60006200011984828501620000d9565b91505092915050565b608051613acc6200016160003960008181610aa501528181610b4a01528181610be701528181610d610152818161117901526111ae0152613acc6000f3fe6080604052600436106100f75760003560e01c8063a3f1233e1161008a578063c1461d5711610059578063c1461d5714610378578063cf0ef51614610394578063d147adb9146103bf578063fe4b84df146103fc5761011d565b8063a3f1233e14610298578063b0da8d0b146102c1578063b47064c8146102fe578063bf6b874e1461033b5761011d565b80632bf30a0e116100c65780632bf30a0e146101ca578063550dddeb146102075780635dfad06a146102305780637df446471461025b5761011d565b806301f59d161461012257806303c845961461014d5780630a9b1803146101785780631c20fadd146101a15761011d565b3661011d5761011b3373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee34610425565b005b600080fd5b34801561012e57600080fd5b506101376106d4565b6040516101449190612619565b60405180910390f35b34801561015957600080fd5b506101626106da565b60405161016f9190612619565b60405180910390f35b34801561018457600080fd5b5061019f600480360381019061019a91906126de565b6106e3565b005b3480156101ad57600080fd5b506101c860048036038101906101c39190612788565b6107e0565b005b3480156101d657600080fd5b506101f160048036038101906101ec91906127db565b6108cc565b6040516101fe91906128c6565b60405180910390f35b34801561021357600080fd5b5061022e600480360381019061022991906128e8565b61091c565b005b34801561023c57600080fd5b506102456109c8565b60405161025291906128c6565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d9190612915565b6109d9565b60405161028f9190612619565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba9190612955565b6109fe565b005b3480156102cd57600080fd5b506102e860048036038101906102e391906127db565b610d10565b6040516102f591906128c6565b60405180910390f35b34801561030a57600080fd5b5061032560048036038101906103209190612915565b611082565b6040516103329190612619565b60405180910390f35b34801561034757600080fd5b50610362600480360381019061035d91906127db565b61115f565b60405161036f9190612619565b60405180910390f35b610392600480360381019061038d9190612955565b610425565b005b3480156103a057600080fd5b506103a9611177565b6040516103b69190612a07565b60405180910390f35b3480156103cb57600080fd5b506103e660048036038101906103e19190612915565b61119b565b6040516103f39190612619565b60405180910390f35b34801561040857600080fd5b50610423600480360381019061041e91906128e8565b611266565b005b6002600154141561046b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046290612a7f565b60405180910390fd5b600260018190555060008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156104c657349150610649565b60003414610509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050090612aeb565b60405180910390fd5b600084905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105499190612b1a565b602060405180830381865afa158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a9190612b4a565b90506105b93330878573ffffffffffffffffffffffffffffffffffffffff1661135a909392919063ffffffff16565b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105f49190612b1a565b602060405180830381865afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106359190612b4a565b905081816106439190612ba6565b94505050505b81610653856113e3565b61065d9190612ba6565b905061066b858584846114b7565b818473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ff0d0e99cae184d0187b093b48894117462462379674a6e11d89c3fbb618e96b060405160405180910390a4505060018081905550505050565b60335481565b64e8d4a5100081565b6106eb6116dc565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074f90612c26565b60405180910390fd5b80156107785761077282603761170590919063ffffffff16565b5061078e565b61078c82603761173590919063ffffffff16565b505b8173ffffffffffffffffffffffffffffffffffffffff167f112acfcc345761cf642cf6d7086cc68572679c383746552dcf2f71b26623c158826040516107d49190612c55565b60405180910390a25050565b60026001541415610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081d90612a7f565b60405180910390fd5b6002600181905550610839338383611765565b6108448383836119d9565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc322efa58c9cb2c39cfffdac61d35c8643f5cbf13c6a7d0034de2cf18923aff3846040516108b89190612619565b60405180910390a460018081905550505050565b6060610915603660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611ae4565b9050919050565b6109246116dc565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098890612c26565b60405180910390fd5b80603381905550807fd4710696fc3761c070b614c80e5020d726828d5f75aa8a6b8287c4194dfe6da260405160405180910390a250565b60606109d46037611ae4565b905090565b6034602052816000526040600020602052806000526040600020600091509150505481565b610a12336037611b0590919063ffffffff16565b610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4890612ce2565b60405180910390fd5b600060335414610aa157806033541015610aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9790612d4e565b60405180910390fd5b5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b47064c885856040518363ffffffff1660e01b8152600401610afe929190612d6e565b602060405180830381865afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f9190612b4a565b9050808211610bdc577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636f192acc8484876040518463ffffffff1660e01b8152600401610ba593929190612d97565b600060405180830381600087803b158015610bbf57600080fd5b505af1158015610bd3573d6000803e3d6000fd5b50505050610c8c565b6000811115610c75577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636f192acc8483876040518463ffffffff1660e01b8152600401610c4293929190612d97565b600060405180830381600087803b158015610c5c57600080fd5b505af1158015610c70573d6000803e3d6000fd5b505050505b610c8b84848385610c869190612ba6565b611b35565b5b8273ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fe06da4bed68570a3adccb02d0aed523ccc1dd372f85808168917d1c4a7e78acb8533604051610d02929190612dce565b60405180910390a450505050565b60606000610d5b603660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611ae4565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632bf30a0e856040518263ffffffff1660e01b8152600401610db89190612b1a565b600060405180830381865afa158015610dd5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dfe9190612f65565b90506000805b8251811015610f0657610e78838281518110610e2357610e22612fae565b5b6020026020010151603660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611b0590919063ffffffff16565b610ef357828181518110610e8f57610e8e612fae565b5b6020026020010151838381518110610eaa57610ea9612fae565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508180610eef90612fdd565b9250505b8080610efe90612fdd565b915050610e04565b506000818451610f169190613026565b905060008167ffffffffffffffff811115610f3457610f33612e0d565b5b604051908082528060200260200182016040528015610f625781602001602082028036833780820191505090505b50905060005b82811015611074578551811015610fe657858181518110610f8c57610f8b612fae565b5b6020026020010151828281518110610fa757610fa6612fae565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611061565b6000865182610ff59190612ba6565b905085818151811061100a57611009612fae565b5b602002602001015183838151811061102557611024612fae565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050505b808061106c90612fdd565b915050610f68565b508095505050505050919050565b60008061108e836113e3565b9050611156603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054603560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611df9565b91505092915050565b60356020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806111a88484611082565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b47064c886866040518363ffffffff1660e01b8152600401611207929190612d6e565b602060405180830381865afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112489190612b4a565b9050600081836112589190613026565b905080935050505092915050565b600060019054906101000a900460ff1661128e5760008054906101000a900460ff1615611297565b611296611e3e565b5b6112d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cd906130ee565b60405180910390fd5b60008060019054906101000a900460ff161590508015611326576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81603381905550611335611e4f565b80156113565760008060016101000a81548160ff0219169083151502179055505b5050565b6113dd846323b872dd60e01b85858560405160240161137b9392919061310e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ea8565b50505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611435574790506114b2565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161146e9190612b1a565b602060405180830381865afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af9190612b4a565b90505b919050565b6000603560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600061150985858486611f6f565b9050600082141561155d5764e8d4a5100081101561155c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611553906131b7565b60405180910390fd5b5b600081116115a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159790613249565b60405180910390fd5b80603460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461162c9190613026565b92505081905550808261163f9190613026565b603560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116d385603660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061170590919063ffffffff16565b50505050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b600061172d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611fd0565b905092915050565b600061175d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612040565b905092915050565b6000611770836113e3565b90506000603560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006117c485858486611f6f565b905064e8d4a5100081836117d89190612ba6565b1015611819576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611810906132db565b60405180910390fd5b6000603460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081816118a69190612ba6565b603460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081836119329190612ba6565b603560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550818114156119d0576119ce86603660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061173590919063ffffffff16565b505b50505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ad35760008373ffffffffffffffffffffffffffffffffffffffff1682604051611a479061332c565b60006040518083038185875af1925050503d8060008114611a84576040519150601f19603f3d011682016040523d82523d6000602084013e611a89565b606091505b5050905080611acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac49061338d565b60405180910390fd5b50611adf565b611ade828483612154565b5b505050565b60606000611af4836000016121da565b905060608190508092505050919050565b6000611b2d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612236565b905092915050565b6000611b3f6116dc565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba7906133f9565b60405180910390fd5b6000611bbb846113e3565b90506000611c0a8585603560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611f6f565b905080603460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc290613465565b60405180910390fd5b80603460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d579190612ba6565b9250508190555080603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611dea9190613026565b92505081905550505050505050565b6000806000841480611e0b5750600083145b15611e195760009050611e33565b838386611e269190613485565b611e30919061350e565b90505b809150509392505050565b6000611e4930612259565b15905090565b600060019054906101000a900460ff16611e9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e95906135b1565b60405180910390fd5b611ea661226c565b565b6000611f0a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122c49092919063ffffffff16565b9050600081511115611f6a5780806020019051810190611f2a91906135e6565b611f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6090613685565b60405180910390fd5b5b505050565b6000806000611f7e87876122dc565b90506000611f8c88866122dc565b90506000861480611f9d5750600085145b15611faa57819250611fc2565b611fbf8683611fb99190613485565b82612404565b92505b829350505050949350505050565b6000611fdc8383612236565b61203557826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061203a565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081146121485760006001826120729190612ba6565b905060006001866000018054905061208a9190612ba6565b90508181146120f95760008660000182815481106120ab576120aa612fae565b5b90600052602060002001549050808760000184815481106120cf576120ce612fae565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061210d5761210c6136a5565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061214e565b60009150505b92915050565b6121d58363a9059cbb60e01b84846040516024016121739291906136d4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ea8565b505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561222a57602002820191906000526020600020905b815481526020019060010190808311612216575b50505050509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b600080823b905060008111915050919050565b600060019054906101000a900460ff166122bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b2906135b1565b60405180910390fd5b60018081905550565b60606122d38484600085612462565b90509392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561232e578190506123fe565b60008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561237b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239f9190612b4a565b905060128110156123d6578060126123b79190612ba6565b600a6123c39190613830565b836123ce9190613485565b9150506123fe565b6012816123e39190612ba6565b600a6123ef9190613830565b836123fa919061350e565b9150505b92915050565b6000808284612413919061387b565b905060008082141561243257838561242b919061350e565b9050612457565b838483876124409190612ba6565b61244a9190613026565b612454919061350e565b90505b809250505092915050565b6060824710156124a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249e9061391e565b60405180910390fd5b6124b085612576565b6124ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e69061398a565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516125189190613a19565b60006040518083038185875af1925050503d8060008114612555576040519150601f19603f3d011682016040523d82523d6000602084013e61255a565b606091505b509150915061256a828286612599565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156125a9578290506125f9565b6000835111156125bc5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f09190613a74565b60405180910390fd5b9392505050565b6000819050919050565b61261381612600565b82525050565b600060208201905061262e600083018461260a565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061267382612648565b9050919050565b61268381612668565b811461268e57600080fd5b50565b6000813590506126a08161267a565b92915050565b60008115159050919050565b6126bb816126a6565b81146126c657600080fd5b50565b6000813590506126d8816126b2565b92915050565b600080604083850312156126f5576126f461263e565b5b600061270385828601612691565b9250506020612714858286016126c9565b9150509250929050565b600061272982612648565b9050919050565b6127398161271e565b811461274457600080fd5b50565b60008135905061275681612730565b92915050565b61276581612600565b811461277057600080fd5b50565b6000813590506127828161275c565b92915050565b6000806000606084860312156127a1576127a061263e565b5b60006127af86828701612747565b93505060206127c086828701612691565b92505060406127d186828701612773565b9150509250925092565b6000602082840312156127f1576127f061263e565b5b60006127ff84828501612691565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61283d81612668565b82525050565b600061284f8383612834565b60208301905092915050565b6000602082019050919050565b600061287382612808565b61287d8185612813565b935061288883612824565b8060005b838110156128b95781516128a08882612843565b97506128ab8361285b565b92505060018101905061288c565b5085935050505092915050565b600060208201905081810360008301526128e08184612868565b905092915050565b6000602082840312156128fe576128fd61263e565b5b600061290c84828501612773565b91505092915050565b6000806040838503121561292c5761292b61263e565b5b600061293a85828601612691565b925050602061294b85828601612691565b9150509250929050565b60008060006060848603121561296e5761296d61263e565b5b600061297c86828701612691565b935050602061298d86828701612691565b925050604061299e86828701612773565b9150509250925092565b6000819050919050565b60006129cd6129c86129c384612648565b6129a8565b612648565b9050919050565b60006129df826129b2565b9050919050565b60006129f1826129d4565b9050919050565b612a01816129e6565b82525050565b6000602082019050612a1c60008301846129f8565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612a69601f83612a22565b9150612a7482612a33565b602082019050919050565b60006020820190508181036000830152612a9881612a5c565b9050919050565b7f5461736b54726561737572793a204e6f20455448000000000000000000000000600082015250565b6000612ad5601483612a22565b9150612ae082612a9f565b602082019050919050565b60006020820190508181036000830152612b0481612ac8565b9050919050565b612b1481612668565b82525050565b6000602082019050612b2f6000830184612b0b565b92915050565b600081519050612b448161275c565b92915050565b600060208284031215612b6057612b5f61263e565b5b6000612b6e84828501612b35565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612bb182612600565b9150612bbc83612600565b925082821015612bcf57612bce612b77565b5b828203905092915050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000612c10600e83612a22565b9150612c1b82612bda565b602082019050919050565b60006020820190508181036000830152612c3f81612c03565b9050919050565b612c4f816126a6565b82525050565b6000602082019050612c6a6000830184612c46565b92915050565b7f5461736b54726561737572793a206f6e6c7957686974656c697374656453657260008201527f7669636573000000000000000000000000000000000000000000000000000000602082015250565b6000612ccc602583612a22565b9150612cd782612c70565b604082019050919050565b60006020820190508181036000830152612cfb81612cbf565b9050919050565b7f5461736b54726561737572793a204f7665726368617267656400000000000000600082015250565b6000612d38601983612a22565b9150612d4382612d02565b602082019050919050565b60006020820190508181036000830152612d6781612d2b565b9050919050565b6000604082019050612d836000830185612b0b565b612d906020830184612b0b565b9392505050565b6000606082019050612dac6000830186612b0b565b612db9602083018561260a565b612dc66040830184612b0b565b949350505050565b6000604082019050612de3600083018561260a565b612df06020830184612b0b565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612e4582612dfc565b810181811067ffffffffffffffff82111715612e6457612e63612e0d565b5b80604052505050565b6000612e77612634565b9050612e838282612e3c565b919050565b600067ffffffffffffffff821115612ea357612ea2612e0d565b5b602082029050602081019050919050565b600080fd5b600081519050612ec88161267a565b92915050565b6000612ee1612edc84612e88565b612e6d565b90508083825260208201905060208402830185811115612f0457612f03612eb4565b5b835b81811015612f2d5780612f198882612eb9565b845260208401935050602081019050612f06565b5050509392505050565b600082601f830112612f4c57612f4b612df7565b5b8151612f5c848260208601612ece565b91505092915050565b600060208284031215612f7b57612f7a61263e565b5b600082015167ffffffffffffffff811115612f9957612f98612643565b5b612fa584828501612f37565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612fe882612600565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561301b5761301a612b77565b5b600182019050919050565b600061303182612600565b915061303c83612600565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561307157613070612b77565b5b828201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006130d8602e83612a22565b91506130e38261307c565b604082019050919050565b60006020820190508181036000830152613107816130cb565b9050919050565b60006060820190506131236000830186612b0b565b6131306020830185612b0b565b61313d604083018461260a565b949350505050565b7f5461736b54726561737572793a2052657175697265204d494e5f53484152455360008201527f5f494e5f54524541535552590000000000000000000000000000000000000000602082015250565b60006131a1602c83612a22565b91506131ac82613145565b604082019050919050565b600060208201905081810360008301526131d081613194565b9050919050565b7f5461736b54726561737572793a205a65726f2073686172657320746f2063726560008201527f6469740000000000000000000000000000000000000000000000000000000000602082015250565b6000613233602383612a22565b915061323e826131d7565b604082019050919050565b6000602082019050818103600083015261326281613226565b9050919050565b7f5461736b54726561737572793a2042656c6f77204d494e5f5348415245535f4960008201527f4e5f545245415355525900000000000000000000000000000000000000000000602082015250565b60006132c5602a83612a22565b91506132d082613269565b604082019050919050565b600060208201905081810360008301526132f4816132b8565b9050919050565b600081905092915050565b50565b60006133166000836132fb565b915061332182613306565b600082019050919050565b600061333782613309565b9150819050919050565b7f5f7472616e736665723a20455448207472616e73666572206661696c65640000600082015250565b6000613377601e83612a22565b915061338282613341565b602082019050919050565b600060208201905081810360008301526133a68161336a565b9050919050565b7f5461736b54726561737572793a204e6f2070726f78792061646d696e00000000600082015250565b60006133e3601c83612a22565b91506133ee826133ad565b602082019050919050565b60006020820190508181036000830152613412816133d6565b9050919050565b7f5461736b54726561737572793a204e6f7420656e6f7567682066756e64730000600082015250565b600061344f601e83612a22565b915061345a82613419565b602082019050919050565b6000602082019050818103600083015261347e81613442565b9050919050565b600061349082612600565b915061349b83612600565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156134d4576134d3612b77565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061351982612600565b915061352483612600565b925082613534576135336134df565b5b828204905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061359b602b83612a22565b91506135a68261353f565b604082019050919050565b600060208201905081810360008301526135ca8161358e565b9050919050565b6000815190506135e0816126b2565b92915050565b6000602082840312156135fc576135fb61263e565b5b600061360a848285016135d1565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061366f602a83612a22565b915061367a82613613565b604082019050919050565b6000602082019050818103600083015261369e81613662565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006040820190506136e96000830185612b0b565b6136f6602083018461260a565b9392505050565b60008160011c9050919050565b6000808291508390505b6001851115613754578086048111156137305761372f612b77565b5b600185161561373f5780820291505b808102905061374d856136fd565b9450613714565b94509492505050565b60008261376d5760019050613829565b8161377b5760009050613829565b8160018114613791576002811461379b576137ca565b6001915050613829565b60ff8411156137ad576137ac612b77565b5b8360020a9150848211156137c4576137c3612b77565b5b50613829565b5060208310610133831016604e8410600b84101617156137ff5782820a9050838111156137fa576137f9612b77565b5b613829565b61380c848484600161370a565b9250905081840481111561382357613822612b77565b5b81810290505b9392505050565b600061383b82612600565b915061384683612600565b92506138737fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461375d565b905092915050565b600061388682612600565b915061389183612600565b9250826138a1576138a06134df565b5b828206905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613908602683612a22565b9150613913826138ac565b604082019050919050565b60006020820190508181036000830152613937816138fb565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613974601d83612a22565b915061397f8261393e565b602082019050919050565b600060208201905081810360008301526139a381613967565b9050919050565b600081519050919050565b60005b838110156139d35780820151818401526020810190506139b8565b838111156139e2576000848401525b50505050565b60006139f3826139aa565b6139fd81856132fb565b9350613a0d8185602086016139b5565b80840191505092915050565b6000613a2582846139e8565b915081905092915050565b600081519050919050565b6000613a4682613a30565b613a508185612a22565b9350613a608185602086016139b5565b613a6981612dfc565b840191505092915050565b60006020820190508181036000830152613a8e8184613a3b565b90509291505056fea264697066735822122041f45bcee684845ffa450d88eb0e84a5b7e307c0a356f2d4829ce349fa7145d664736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c8063a3f1233e1161008a578063c1461d5711610059578063c1461d5714610378578063cf0ef51614610394578063d147adb9146103bf578063fe4b84df146103fc5761011d565b8063a3f1233e14610298578063b0da8d0b146102c1578063b47064c8146102fe578063bf6b874e1461033b5761011d565b80632bf30a0e116100c65780632bf30a0e146101ca578063550dddeb146102075780635dfad06a146102305780637df446471461025b5761011d565b806301f59d161461012257806303c845961461014d5780630a9b1803146101785780631c20fadd146101a15761011d565b3661011d5761011b3373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee34610425565b005b600080fd5b34801561012e57600080fd5b506101376106d4565b6040516101449190612619565b60405180910390f35b34801561015957600080fd5b506101626106da565b60405161016f9190612619565b60405180910390f35b34801561018457600080fd5b5061019f600480360381019061019a91906126de565b6106e3565b005b3480156101ad57600080fd5b506101c860048036038101906101c39190612788565b6107e0565b005b3480156101d657600080fd5b506101f160048036038101906101ec91906127db565b6108cc565b6040516101fe91906128c6565b60405180910390f35b34801561021357600080fd5b5061022e600480360381019061022991906128e8565b61091c565b005b34801561023c57600080fd5b506102456109c8565b60405161025291906128c6565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d9190612915565b6109d9565b60405161028f9190612619565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba9190612955565b6109fe565b005b3480156102cd57600080fd5b506102e860048036038101906102e391906127db565b610d10565b6040516102f591906128c6565b60405180910390f35b34801561030a57600080fd5b5061032560048036038101906103209190612915565b611082565b6040516103329190612619565b60405180910390f35b34801561034757600080fd5b50610362600480360381019061035d91906127db565b61115f565b60405161036f9190612619565b60405180910390f35b610392600480360381019061038d9190612955565b610425565b005b3480156103a057600080fd5b506103a9611177565b6040516103b69190612a07565b60405180910390f35b3480156103cb57600080fd5b506103e660048036038101906103e19190612915565b61119b565b6040516103f39190612619565b60405180910390f35b34801561040857600080fd5b50610423600480360381019061041e91906128e8565b611266565b005b6002600154141561046b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046290612a7f565b60405180910390fd5b600260018190555060008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156104c657349150610649565b60003414610509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050090612aeb565b60405180910390fd5b600084905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105499190612b1a565b602060405180830381865afa158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a9190612b4a565b90506105b93330878573ffffffffffffffffffffffffffffffffffffffff1661135a909392919063ffffffff16565b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105f49190612b1a565b602060405180830381865afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106359190612b4a565b905081816106439190612ba6565b94505050505b81610653856113e3565b61065d9190612ba6565b905061066b858584846114b7565b818473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ff0d0e99cae184d0187b093b48894117462462379674a6e11d89c3fbb618e96b060405160405180910390a4505060018081905550505050565b60335481565b64e8d4a5100081565b6106eb6116dc565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074f90612c26565b60405180910390fd5b80156107785761077282603761170590919063ffffffff16565b5061078e565b61078c82603761173590919063ffffffff16565b505b8173ffffffffffffffffffffffffffffffffffffffff167f112acfcc345761cf642cf6d7086cc68572679c383746552dcf2f71b26623c158826040516107d49190612c55565b60405180910390a25050565b60026001541415610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081d90612a7f565b60405180910390fd5b6002600181905550610839338383611765565b6108448383836119d9565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc322efa58c9cb2c39cfffdac61d35c8643f5cbf13c6a7d0034de2cf18923aff3846040516108b89190612619565b60405180910390a460018081905550505050565b6060610915603660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611ae4565b9050919050565b6109246116dc565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098890612c26565b60405180910390fd5b80603381905550807fd4710696fc3761c070b614c80e5020d726828d5f75aa8a6b8287c4194dfe6da260405160405180910390a250565b60606109d46037611ae4565b905090565b6034602052816000526040600020602052806000526040600020600091509150505481565b610a12336037611b0590919063ffffffff16565b610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4890612ce2565b60405180910390fd5b600060335414610aa157806033541015610aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9790612d4e565b60405180910390fd5b5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b47064c885856040518363ffffffff1660e01b8152600401610afe929190612d6e565b602060405180830381865afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f9190612b4a565b9050808211610bdc577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636f192acc8484876040518463ffffffff1660e01b8152600401610ba593929190612d97565b600060405180830381600087803b158015610bbf57600080fd5b505af1158015610bd3573d6000803e3d6000fd5b50505050610c8c565b6000811115610c75577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636f192acc8483876040518463ffffffff1660e01b8152600401610c4293929190612d97565b600060405180830381600087803b158015610c5c57600080fd5b505af1158015610c70573d6000803e3d6000fd5b505050505b610c8b84848385610c869190612ba6565b611b35565b5b8273ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fe06da4bed68570a3adccb02d0aed523ccc1dd372f85808168917d1c4a7e78acb8533604051610d02929190612dce565b60405180910390a450505050565b60606000610d5b603660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611ae4565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632bf30a0e856040518263ffffffff1660e01b8152600401610db89190612b1a565b600060405180830381865afa158015610dd5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dfe9190612f65565b90506000805b8251811015610f0657610e78838281518110610e2357610e22612fae565b5b6020026020010151603660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611b0590919063ffffffff16565b610ef357828181518110610e8f57610e8e612fae565b5b6020026020010151838381518110610eaa57610ea9612fae565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508180610eef90612fdd565b9250505b8080610efe90612fdd565b915050610e04565b506000818451610f169190613026565b905060008167ffffffffffffffff811115610f3457610f33612e0d565b5b604051908082528060200260200182016040528015610f625781602001602082028036833780820191505090505b50905060005b82811015611074578551811015610fe657858181518110610f8c57610f8b612fae565b5b6020026020010151828281518110610fa757610fa6612fae565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611061565b6000865182610ff59190612ba6565b905085818151811061100a57611009612fae565b5b602002602001015183838151811061102557611024612fae565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050505b808061106c90612fdd565b915050610f68565b508095505050505050919050565b60008061108e836113e3565b9050611156603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054603560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611df9565b91505092915050565b60356020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806111a88484611082565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b47064c886866040518363ffffffff1660e01b8152600401611207929190612d6e565b602060405180830381865afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112489190612b4a565b9050600081836112589190613026565b905080935050505092915050565b600060019054906101000a900460ff1661128e5760008054906101000a900460ff1615611297565b611296611e3e565b5b6112d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cd906130ee565b60405180910390fd5b60008060019054906101000a900460ff161590508015611326576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81603381905550611335611e4f565b80156113565760008060016101000a81548160ff0219169083151502179055505b5050565b6113dd846323b872dd60e01b85858560405160240161137b9392919061310e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ea8565b50505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611435574790506114b2565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161146e9190612b1a565b602060405180830381865afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af9190612b4a565b90505b919050565b6000603560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600061150985858486611f6f565b9050600082141561155d5764e8d4a5100081101561155c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611553906131b7565b60405180910390fd5b5b600081116115a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159790613249565b60405180910390fd5b80603460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461162c9190613026565b92505081905550808261163f9190613026565b603560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116d385603660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061170590919063ffffffff16565b50505050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b600061172d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611fd0565b905092915050565b600061175d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612040565b905092915050565b6000611770836113e3565b90506000603560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006117c485858486611f6f565b905064e8d4a5100081836117d89190612ba6565b1015611819576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611810906132db565b60405180910390fd5b6000603460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081816118a69190612ba6565b603460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081836119329190612ba6565b603560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550818114156119d0576119ce86603660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061173590919063ffffffff16565b505b50505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ad35760008373ffffffffffffffffffffffffffffffffffffffff1682604051611a479061332c565b60006040518083038185875af1925050503d8060008114611a84576040519150601f19603f3d011682016040523d82523d6000602084013e611a89565b606091505b5050905080611acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac49061338d565b60405180910390fd5b50611adf565b611ade828483612154565b5b505050565b60606000611af4836000016121da565b905060608190508092505050919050565b6000611b2d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612236565b905092915050565b6000611b3f6116dc565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba7906133f9565b60405180910390fd5b6000611bbb846113e3565b90506000611c0a8585603560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611f6f565b905080603460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc290613465565b60405180910390fd5b80603460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d579190612ba6565b9250508190555080603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611dea9190613026565b92505081905550505050505050565b6000806000841480611e0b5750600083145b15611e195760009050611e33565b838386611e269190613485565b611e30919061350e565b90505b809150509392505050565b6000611e4930612259565b15905090565b600060019054906101000a900460ff16611e9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e95906135b1565b60405180910390fd5b611ea661226c565b565b6000611f0a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122c49092919063ffffffff16565b9050600081511115611f6a5780806020019051810190611f2a91906135e6565b611f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6090613685565b60405180910390fd5b5b505050565b6000806000611f7e87876122dc565b90506000611f8c88866122dc565b90506000861480611f9d5750600085145b15611faa57819250611fc2565b611fbf8683611fb99190613485565b82612404565b92505b829350505050949350505050565b6000611fdc8383612236565b61203557826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061203a565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081146121485760006001826120729190612ba6565b905060006001866000018054905061208a9190612ba6565b90508181146120f95760008660000182815481106120ab576120aa612fae565b5b90600052602060002001549050808760000184815481106120cf576120ce612fae565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061210d5761210c6136a5565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061214e565b60009150505b92915050565b6121d58363a9059cbb60e01b84846040516024016121739291906136d4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ea8565b505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561222a57602002820191906000526020600020905b815481526020019060010190808311612216575b50505050509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b600080823b905060008111915050919050565b600060019054906101000a900460ff166122bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b2906135b1565b60405180910390fd5b60018081905550565b60606122d38484600085612462565b90509392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561232e578190506123fe565b60008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561237b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239f9190612b4a565b905060128110156123d6578060126123b79190612ba6565b600a6123c39190613830565b836123ce9190613485565b9150506123fe565b6012816123e39190612ba6565b600a6123ef9190613830565b836123fa919061350e565b9150505b92915050565b6000808284612413919061387b565b905060008082141561243257838561242b919061350e565b9050612457565b838483876124409190612ba6565b61244a9190613026565b612454919061350e565b90505b809250505092915050565b6060824710156124a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249e9061391e565b60405180910390fd5b6124b085612576565b6124ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e69061398a565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516125189190613a19565b60006040518083038185875af1925050503d8060008114612555576040519150601f19603f3d011682016040523d82523d6000602084013e61255a565b606091505b509150915061256a828286612599565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156125a9578290506125f9565b6000835111156125bc5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f09190613a74565b60405180910390fd5b9392505050565b6000819050919050565b61261381612600565b82525050565b600060208201905061262e600083018461260a565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061267382612648565b9050919050565b61268381612668565b811461268e57600080fd5b50565b6000813590506126a08161267a565b92915050565b60008115159050919050565b6126bb816126a6565b81146126c657600080fd5b50565b6000813590506126d8816126b2565b92915050565b600080604083850312156126f5576126f461263e565b5b600061270385828601612691565b9250506020612714858286016126c9565b9150509250929050565b600061272982612648565b9050919050565b6127398161271e565b811461274457600080fd5b50565b60008135905061275681612730565b92915050565b61276581612600565b811461277057600080fd5b50565b6000813590506127828161275c565b92915050565b6000806000606084860312156127a1576127a061263e565b5b60006127af86828701612747565b93505060206127c086828701612691565b92505060406127d186828701612773565b9150509250925092565b6000602082840312156127f1576127f061263e565b5b60006127ff84828501612691565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61283d81612668565b82525050565b600061284f8383612834565b60208301905092915050565b6000602082019050919050565b600061287382612808565b61287d8185612813565b935061288883612824565b8060005b838110156128b95781516128a08882612843565b97506128ab8361285b565b92505060018101905061288c565b5085935050505092915050565b600060208201905081810360008301526128e08184612868565b905092915050565b6000602082840312156128fe576128fd61263e565b5b600061290c84828501612773565b91505092915050565b6000806040838503121561292c5761292b61263e565b5b600061293a85828601612691565b925050602061294b85828601612691565b9150509250929050565b60008060006060848603121561296e5761296d61263e565b5b600061297c86828701612691565b935050602061298d86828701612691565b925050604061299e86828701612773565b9150509250925092565b6000819050919050565b60006129cd6129c86129c384612648565b6129a8565b612648565b9050919050565b60006129df826129b2565b9050919050565b60006129f1826129d4565b9050919050565b612a01816129e6565b82525050565b6000602082019050612a1c60008301846129f8565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612a69601f83612a22565b9150612a7482612a33565b602082019050919050565b60006020820190508181036000830152612a9881612a5c565b9050919050565b7f5461736b54726561737572793a204e6f20455448000000000000000000000000600082015250565b6000612ad5601483612a22565b9150612ae082612a9f565b602082019050919050565b60006020820190508181036000830152612b0481612ac8565b9050919050565b612b1481612668565b82525050565b6000602082019050612b2f6000830184612b0b565b92915050565b600081519050612b448161275c565b92915050565b600060208284031215612b6057612b5f61263e565b5b6000612b6e84828501612b35565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612bb182612600565b9150612bbc83612600565b925082821015612bcf57612bce612b77565b5b828203905092915050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000612c10600e83612a22565b9150612c1b82612bda565b602082019050919050565b60006020820190508181036000830152612c3f81612c03565b9050919050565b612c4f816126a6565b82525050565b6000602082019050612c6a6000830184612c46565b92915050565b7f5461736b54726561737572793a206f6e6c7957686974656c697374656453657260008201527f7669636573000000000000000000000000000000000000000000000000000000602082015250565b6000612ccc602583612a22565b9150612cd782612c70565b604082019050919050565b60006020820190508181036000830152612cfb81612cbf565b9050919050565b7f5461736b54726561737572793a204f7665726368617267656400000000000000600082015250565b6000612d38601983612a22565b9150612d4382612d02565b602082019050919050565b60006020820190508181036000830152612d6781612d2b565b9050919050565b6000604082019050612d836000830185612b0b565b612d906020830184612b0b565b9392505050565b6000606082019050612dac6000830186612b0b565b612db9602083018561260a565b612dc66040830184612b0b565b949350505050565b6000604082019050612de3600083018561260a565b612df06020830184612b0b565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612e4582612dfc565b810181811067ffffffffffffffff82111715612e6457612e63612e0d565b5b80604052505050565b6000612e77612634565b9050612e838282612e3c565b919050565b600067ffffffffffffffff821115612ea357612ea2612e0d565b5b602082029050602081019050919050565b600080fd5b600081519050612ec88161267a565b92915050565b6000612ee1612edc84612e88565b612e6d565b90508083825260208201905060208402830185811115612f0457612f03612eb4565b5b835b81811015612f2d5780612f198882612eb9565b845260208401935050602081019050612f06565b5050509392505050565b600082601f830112612f4c57612f4b612df7565b5b8151612f5c848260208601612ece565b91505092915050565b600060208284031215612f7b57612f7a61263e565b5b600082015167ffffffffffffffff811115612f9957612f98612643565b5b612fa584828501612f37565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612fe882612600565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561301b5761301a612b77565b5b600182019050919050565b600061303182612600565b915061303c83612600565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561307157613070612b77565b5b828201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006130d8602e83612a22565b91506130e38261307c565b604082019050919050565b60006020820190508181036000830152613107816130cb565b9050919050565b60006060820190506131236000830186612b0b565b6131306020830185612b0b565b61313d604083018461260a565b949350505050565b7f5461736b54726561737572793a2052657175697265204d494e5f53484152455360008201527f5f494e5f54524541535552590000000000000000000000000000000000000000602082015250565b60006131a1602c83612a22565b91506131ac82613145565b604082019050919050565b600060208201905081810360008301526131d081613194565b9050919050565b7f5461736b54726561737572793a205a65726f2073686172657320746f2063726560008201527f6469740000000000000000000000000000000000000000000000000000000000602082015250565b6000613233602383612a22565b915061323e826131d7565b604082019050919050565b6000602082019050818103600083015261326281613226565b9050919050565b7f5461736b54726561737572793a2042656c6f77204d494e5f5348415245535f4960008201527f4e5f545245415355525900000000000000000000000000000000000000000000602082015250565b60006132c5602a83612a22565b91506132d082613269565b604082019050919050565b600060208201905081810360008301526132f4816132b8565b9050919050565b600081905092915050565b50565b60006133166000836132fb565b915061332182613306565b600082019050919050565b600061333782613309565b9150819050919050565b7f5f7472616e736665723a20455448207472616e73666572206661696c65640000600082015250565b6000613377601e83612a22565b915061338282613341565b602082019050919050565b600060208201905081810360008301526133a68161336a565b9050919050565b7f5461736b54726561737572793a204e6f2070726f78792061646d696e00000000600082015250565b60006133e3601c83612a22565b91506133ee826133ad565b602082019050919050565b60006020820190508181036000830152613412816133d6565b9050919050565b7f5461736b54726561737572793a204e6f7420656e6f7567682066756e64730000600082015250565b600061344f601e83612a22565b915061345a82613419565b602082019050919050565b6000602082019050818103600083015261347e81613442565b9050919050565b600061349082612600565b915061349b83612600565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156134d4576134d3612b77565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061351982612600565b915061352483612600565b925082613534576135336134df565b5b828204905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061359b602b83612a22565b91506135a68261353f565b604082019050919050565b600060208201905081810360008301526135ca8161358e565b9050919050565b6000815190506135e0816126b2565b92915050565b6000602082840312156135fc576135fb61263e565b5b600061360a848285016135d1565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061366f602a83612a22565b915061367a82613613565b604082019050919050565b6000602082019050818103600083015261369e81613662565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006040820190506136e96000830185612b0b565b6136f6602083018461260a565b9392505050565b60008160011c9050919050565b6000808291508390505b6001851115613754578086048111156137305761372f612b77565b5b600185161561373f5780820291505b808102905061374d856136fd565b9450613714565b94509492505050565b60008261376d5760019050613829565b8161377b5760009050613829565b8160018114613791576002811461379b576137ca565b6001915050613829565b60ff8411156137ad576137ac612b77565b5b8360020a9150848211156137c4576137c3612b77565b5b50613829565b5060208310610133831016604e8410600b84101617156137ff5782820a9050838111156137fa576137f9612b77565b5b613829565b61380c848484600161370a565b9250905081840481111561382357613822612b77565b5b81810290505b9392505050565b600061383b82612600565b915061384683612600565b92506138737fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461375d565b905092915050565b600061388682612600565b915061389183612600565b9250826138a1576138a06134df565b5b828206905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613908602683612a22565b9150613913826138ac565b604082019050919050565b60006020820190508181036000830152613937816138fb565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613974601d83612a22565b915061397f8261393e565b602082019050919050565b600060208201905081810360008301526139a381613967565b9050919050565b600081519050919050565b60005b838110156139d35780820151818401526020810190506139b8565b838111156139e2576000848401525b50505050565b60006139f3826139aa565b6139fd81856132fb565b9350613a0d8185602086016139b5565b80840191505092915050565b6000613a2582846139e8565b915081905092915050565b600081519050919050565b6000613a4682613a30565b613a508185612a22565b9350613a608185602086016139b5565b613a6981612dfc565b840191505092915050565b60006020820190508181036000830152613a8e8184613a3b565b90509291505056fea264697066735822122041f45bcee684845ffa450d88eb0e84a5b7e307c0a356f2d4829ce349fa7145d664736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositFunds(address,address,uint256)": {
        "params": {
          "_amount": "Amount to be credited",
          "_receiver": "Address receiving the credits",
          "_token": "Token to be credited, use \"0xeeee....\" for ETH"
        }
      },
      "getCreditTokensByUser(address)": {
        "params": {
          "_user": "User to get the balances from"
        }
      },
      "getTotalCreditTokensByUser(address)": {
        "params": {
          "_user": "User to get the balances from"
        }
      },
      "totalUserTokenBalance(address,address)": {
        "params": {
          "_token": "Token to check balance of",
          "_user": "User to get balance from"
        }
      },
      "updateMaxFee(uint256)": {
        "params": {
          "_newMaxFee": "New Max Fee to charge"
        }
      },
      "updateWhitelistedService(address,bool)": {
        "params": {
          "_add": "Add to whitelist if true, else remove from whitelist",
          "_service": "Service to add or remove from whitelist"
        }
      },
      "useFunds(address,address,uint256)": {
        "params": {
          "_amount": "Amount to be deducted",
          "_token": "Token to be used for payment by users",
          "_user": "Address of user whose balance will be deducted"
        }
      },
      "userTokenBalance(address,address)": {
        "params": {
          "_token": "Token to check balance of",
          "_user": "User to get balance from"
        }
      },
      "withdrawFunds(address,address,uint256)": {
        "params": {
          "_amount": "Amount to be credited",
          "_receiver": "Address receiving the credits",
          "_token": "Token to be credited, use \"0xeeee....\" for ETH"
        }
      }
    },
    "stateVariables": {
      "_tokens": {
        "details": "tracks the tokens deposited by users"
      },
      "shares": {
        "details": "tracks token shares of users"
      },
      "totalShares": {
        "details": "tracks total shares of tokens"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "FundsDeposited(address,address,uint256)": {
        "notice": "Events ///"
      }
    },
    "kind": "user",
    "methods": {
      "depositFunds(address,address,uint256)": {
        "notice": "Function to deposit Funds which will be used to execute transactions on various services"
      },
      "getCreditTokensByUser(address)": {
        "notice": "Helper func to get all deposited tokens by a user."
      },
      "getTotalCreditTokensByUser(address)": {
        "notice": "Helper func to get all deposited tokens by a user across treasuries."
      },
      "getWhitelistedServices()": {
        "notice": "Get list of services that can call useFunds."
      },
      "totalUserTokenBalance(address,address)": {
        "notice": "Get balance of a token owned by user across treasuries"
      },
      "updateMaxFee(uint256)": {
        "notice": "Change maxFee charged by Gelato (only relevant on Layer2s)"
      },
      "updateWhitelistedService(address,bool)": {
        "notice": "Add or remove service that can call useFunds. Gelato Governance"
      },
      "useFunds(address,address,uint256)": {
        "notice": "Function called by whitelisted services to handle payments, e.g. Gelato Ops"
      },
      "userTokenBalance(address,address)": {
        "notice": "Get balance of a token owned by user"
      },
      "withdrawFunds(address,address,uint256)": {
        "notice": "Function to withdraw Funds back to the _receiver"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 87,
        "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 130,
        "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4441,
        "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
        "label": "maxFee",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 4448,
        "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
        "label": "shares",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4453,
        "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
        "label": "totalShares",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4459,
        "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
        "label": "_tokens",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_struct(AddressSet)1540_storage)"
      },
      {
        "astId": 4462,
        "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
        "label": "_whitelistedServices",
        "offset": 0,
        "slot": "55",
        "type": "t_struct(AddressSet)1540_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AddressSet)1540_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1540_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1540_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1539,
            "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1239_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1239_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1234,
            "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1238,
            "contract": "contracts/taskTreasury/TaskTreasuryUpgradable.sol:TaskTreasuryUpgradable",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
