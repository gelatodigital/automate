{
  "address": "0xE8E0873f12d7E04630989401bC7b54a67E403df9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOpsProxyFactory",
          "name": "_opsProxyFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "execAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_taskCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onCreateTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "opsProxyFactory",
      "outputs": [
        {
          "internalType": "contract IOpsProxyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "taskCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "execData",
          "type": "bytes"
        }
      ],
      "name": "postExecCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_taskCreator",
          "type": "address"
        }
      ],
      "name": "preCancelTask",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taskCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        }
      ],
      "name": "preCreateTask",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_taskCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_execData",
          "type": "bytes"
        }
      ],
      "name": "preExecCall",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "execData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "taskCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LibDataTypes.Module",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "taskModuleAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "timedTask",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "nextExec",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "interval",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x69bf9cd86101c27d76a08fe5ef0015d1be75c303b04a2b1af8cfc1dfa1532d69",
  "receipt": {
    "to": null,
    "from": "0x5401fe33559A355638b9b37C9640a04a182fEff2",
    "contractAddress": "0xE8E0873f12d7E04630989401bC7b54a67E403df9",
    "transactionIndex": 184,
    "gasUsed": "1117342",
    "logsBloom": "0x
    "blockHash": "0xd7ea1d29290b2032ccc0ed3c4a0ab25dbaae7eadc7082069a9116f97f0983aa6",
    "transactionHash": "0x69bf9cd86101c27d76a08fe5ef0015d1be75c303b04a2b1af8cfc1dfa1532d69",
    "logs": [
      {
        "transactionIndex": 184,
        "blockNumber": 33176640,
        "transactionHash": "0x69bf9cd86101c27d76a08fe5ef0015d1be75c303b04a2b1af8cfc1dfa1532d69",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005401fe33559a355638b9b37c9640a04a182feff2",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000b2a1bf901e7ebe00000000000000000000000000000000000000000000000017b486fa8582fe350000000000000000000000000000000000000000000019a0c67028900c6572880000000000000000000000000000000000000000000000001701e53af5647f770000000000000000000000000000000000000000000019a0c722ca4f9c83f146",
        "logIndex": 540,
        "blockHash": "0xd7ea1d29290b2032ccc0ed3c4a0ab25dbaae7eadc7082069a9116f97f0983aa6"
      }
    ],
    "blockNumber": 33176640,
    "cumulativeGasUsed": "18528014",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xC815dB16D4be6ddf2685C201937905aBf338F5D7"],
  "numDeployments": 1,
  "solcInputHash": "46e05d039a6f051c260568df03bedd4f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOpsProxyFactory\",\"name\":\"_opsProxyFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"execAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_taskCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onCreateTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opsProxyFactory\",\"outputs\":[{\"internalType\":\"contract IOpsProxyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taskCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"execData\",\"type\":\"bytes\"}],\"name\":\"postExecCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_taskCreator\",\"type\":\"address\"}],\"name\":\"preCancelTask\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taskCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"}],\"name\":\"preCreateTask\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_taskCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_execData\",\"type\":\"bytes\"}],\"name\":\"preExecCall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"execData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"taskCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LibDataTypes.Module\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"taskModuleAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"timedTask\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"nextExec\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interval\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onCreateTask(bytes32,address,address,bytes,bytes)\":{\"params\":{\"execAddress\":\"Address of contract that should be called.\",\"execData\":\"Execution data to be called with / function selector if execution data is yet to be determined.\",\"initModuleArg\":\"Encoded arguments for module if any.\",\"taskCreator\":\"The address which created the task.\",\"taskId\":\"Unique hash of the task created.\"}},\"postExecCall(bytes32,address,address,bytes)\":{\"params\":{\"execAddress\":\"Address of contract that should be called.\",\"execData\":\"Execution data to be called with / function selector if execution data is yet to be determined.\",\"taskCreator\":\"The address which created the task.\",\"taskId\":\"Unique hash of the task created.\"}},\"preCancelTask(bytes32,address)\":{\"details\":\"Modules can override taskCreator.\",\"params\":{\"taskCreator\":\"The address which created the task.\",\"taskId\":\"Unique hash of the task created.\"},\"returns\":{\"_0\":\"address Overriden or original taskCreator.\"}},\"preCreateTask(address,address)\":{\"details\":\"_taskCreator cannot create task to other user's proxy\",\"params\":{\"execAddress\":\"Address of contract that should be called.\",\"taskCreator\":\"The address which created the task.\"},\"returns\":{\"_0\":\"address Overriden or original taskCreator.\",\"_1\":\"address Overriden or original execAddress.\"}},\"preExecCall(bytes32,address,address,bytes)\":{\"details\":\"_execData is encoded with proxy's `executeCall` function unless _execAddress is OpsProxy which assumes that _execData is encoded with `executeCall` or `batchExecuteCall`.\",\"params\":{\"execAddress\":\"Address of contract that should be called.\",\"execData\":\"Execution data to be called with / function selector if execution data is yet to be determined.\",\"taskCreator\":\"The address which created the task.\",\"taskId\":\"Unique hash of the task created.\"},\"returns\":{\"_0\":\"address Overriden or original execution address.\",\"execData\":\"bytes Overriden or original execution data.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onCreateTask(bytes32,address,address,bytes,bytes)\":{\"notice\":\"Initiates task module whenever `createTask` is being called.\"},\"postExecCall(bytes32,address,address,bytes)\":{\"notice\":\"Called during `exec` and after execAddress is called.\"},\"preCancelTask(bytes32,address)\":{\"notice\":\"Called before taskId is removed from _createdTasks[].\"},\"preCreateTask(address,address)\":{\"notice\":\"Called before generating taskId.\"},\"preExecCall(bytes32,address,address,bytes)\":{\"notice\":\"Called during `exec` and before execAddress is called.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/taskModules/ProxyModule.sol\":\"ProxyModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/OpsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibDataTypes} from \\\"./libraries/LibDataTypes.sol\\\";\\n\\n/**\\n * @notice Storage layout of Ops smart contract.\\n */\\n// solhint-disable max-states-count\\nabstract contract OpsStorage {\\n    mapping(bytes32 => address) public taskCreator; ///@dev Deprecated\\n    mapping(bytes32 => address) public execAddresses; ///@dev Deprecated\\n    mapping(address => EnumerableSet.Bytes32Set) internal _createdTasks;\\n\\n    uint256 public fee;\\n    address public feeToken;\\n\\n    ///@dev Appended State\\n    mapping(bytes32 => LibDataTypes.Time) public timedTask;\\n    mapping(LibDataTypes.Module => address) public taskModuleAddresses;\\n}\\n\",\"keccak256\":\"0x9437f759bed13c3f6df0f8737530bf1714e5444169705df2bedd85efdc5bd705\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOpsProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IOpsProxy {\\n    /**\\n     * @notice Emitted when proxy calls a contract successfully in `executeCall`\\n     *\\n     * @param target Address of contract that is called\\n     * @param data Data used in the call.\\n     * @param value Native token value used in the call.\\n     * @param returnData Data returned by the call.\\n     */\\n    event ExecuteCall(\\n        address indexed target,\\n        bytes data,\\n        uint256 value,\\n        bytes returnData\\n    );\\n\\n    /**\\n     * @notice Multicall to different contracts with different datas.\\n     *\\n     * @param targets Addresses of contracts to be called.\\n     * @param datas Datas for each contract call.\\n     * @param values Native token value for each contract call.\\n     */\\n    function batchExecuteCall(\\n        address[] calldata targets,\\n        bytes[] calldata datas,\\n        uint256[] calldata values\\n    ) external payable;\\n\\n    /**\\n     * @notice Call to a single contract.\\n     *\\n     * @param target Address of contracts to be called.\\n     * @param data Data for contract call.\\n     * @param value Native token value for contract call.\\n     */\\n    function executeCall(\\n        address target,\\n        bytes calldata data,\\n        uint256 value\\n    ) external payable;\\n\\n    /**\\n     * @return address Ops smart contract address\\n     */\\n    function ops() external view returns (address);\\n\\n    /**\\n     * @return address Owner of the proxy\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @return uint256 version of OpsProxy.\\n     */\\n    function version() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1b6e349287dfeb2735da8d3f7ae0aa5865996f7dd58622773b449a76bcaf881a\",\"license\":\"MIT\"},\"contracts/interfaces/IOpsProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IOpsProxyFactory {\\n    /**\\n     * @notice Emitted when an OpsProxy is deployed.\\n     *\\n     * @param deployer Address which initiated the deployment\\n     * @param owner The address which the proxy is for.\\n     * @param proxy Address of deployed proxy.\\n     */\\n    event DeployProxy(\\n        address indexed deployer,\\n        address indexed owner,\\n        address indexed proxy\\n    );\\n\\n    /**\\n     * @notice Emitted when OpsProxy implementation to be deployed is changed.\\n     *\\n     * @param oldImplementation Previous OpsProxy implementation.\\n     * @param newImplementation Current OpsProxy implementation.\\n     */\\n    event SetImplementation(\\n        address indexed oldImplementation,\\n        address indexed newImplementation\\n    );\\n\\n    /**\\n     * @notice Emitted when OpsProxy implementation is added or removed from whitelist.\\n     *\\n     * @param implementation OpsProxy implementation.\\n     * @param whitelisted Added or removed from whitelist.\\n     */\\n    event UpdateWhitelistedImplementation(\\n        address indexed implementation,\\n        bool indexed whitelisted\\n    );\\n\\n    /**\\n     * @notice Deploys OpsProxy for the msg.sender.\\n     *\\n     * @return proxy Address of deployed proxy.\\n     */\\n    function deploy() external returns (address payable proxy);\\n\\n    /**\\n     * @notice Deploys OpsProxy for another address.\\n     *\\n     * @param owner Address to deploy the proxy for.\\n     *\\n     * @return proxy Address of deployed proxy.\\n     */\\n    function deployFor(address owner) external returns (address payable proxy);\\n\\n    /**\\n     * @notice Sets the OpsProxy implementation that will be deployed by OpsProxyFactory.\\n     *\\n     * @param newImplementation New implementation to be set.\\n     */\\n    function setImplementation(address newImplementation) external;\\n\\n    /**\\n     * @notice Add or remove OpsProxy implementation from the whitelist.\\n     *\\n     * @param implementation OpsProxy implementation.\\n     * @param whitelist Added or removed from whitelist.\\n     */\\n    function updateWhitelistedImplementations(\\n        address implementation,\\n        bool whitelist\\n    ) external;\\n\\n    /**\\n     * @notice Determines the OpsProxy address when it is not deployed.\\n     *\\n     * @param account Address to determine the proxy address for.\\n     */\\n    function determineProxyAddress(address account)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @return address Proxy address owned by account.\\n     * @return bool Whether if proxy is deployed\\n     */\\n    function getProxyOf(address account) external view returns (address, bool);\\n\\n    /**\\n     * @return address Owner of deployed proxy.\\n     */\\n    function ownerOf(address proxy) external view returns (address);\\n\\n    /**\\n     * @return bool Whether if implementation is whitelisted.\\n     */\\n    function whitelistedImplementations(address implementation)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf4852a06be6f35a0671cf951f455fb9a58320c0908914c3ab9e62f9d27affe2b\",\"license\":\"MIT\"},\"contracts/interfaces/ITaskModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\n// solhint-disable max-line-length\\ninterface ITaskModule {\\n    /**\\n     * @notice Called before generating taskId.\\n     * @dev Modules can override execAddress or taskCreator. {See ProxyModule-preCreateTask}\\n     *\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called.\\n     *\\n     * @return address Overriden or original taskCreator.\\n     * @return address Overriden or original execAddress.\\n     */\\n    function preCreateTask(address taskCreator, address execAddress)\\n        external\\n        returns (address, address);\\n\\n    /**\\n     * @notice Initiates task module whenever `createTask` is being called.\\n     *\\n     * @param taskId Unique hash of the task created.\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called.\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\n     * @param initModuleArg Encoded arguments for module if any.\\n     */\\n    function onCreateTask(\\n        bytes32 taskId,\\n        address taskCreator,\\n        address execAddress,\\n        bytes calldata execData,\\n        bytes calldata initModuleArg\\n    ) external;\\n\\n    /**\\n     * @notice Called before taskId is removed from _createdTasks[].\\n     * @dev Modules can override taskCreator.\\n     *\\n     * @param taskId Unique hash of the task created.\\n     * @param taskCreator The address which created the task.\\n     *\\n     * @return address Overriden or original taskCreator.\\n     */\\n    function preCancelTask(bytes32 taskId, address taskCreator)\\n        external\\n        returns (address);\\n\\n    /**\\n     * @notice Called during `exec` and before execAddress is called.\\n     *\\n     * @param taskId Unique hash of the task created.\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called.\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\n     *\\n     * @return address Overriden or original execution address.\\n     * @return bytes Overriden or original execution data.\\n     */\\n    function preExecCall(\\n        bytes32 taskId,\\n        address taskCreator,\\n        address execAddress,\\n        bytes calldata execData\\n    ) external returns (address, bytes memory);\\n\\n    /**\\n     * @notice Called during `exec` and after execAddress is called.\\n     *\\n     * @param taskId Unique hash of the task created.\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called.\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\n     */\\n    function postExecCall(\\n        bytes32 taskId,\\n        address taskCreator,\\n        address execAddress,\\n        bytes calldata execData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd537257852c23ce7d0bc392b03aba1efd750be372d64a01edf1c726ef7c4274d\",\"license\":\"MIT\"},\"contracts/libraries/LibDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\n// solhint-disable max-line-length\\nlibrary LibDataTypes {\\n    /**\\n     * @notice Whitelisted modules that are available for users to customise conditions and specifications of their tasks.\\n     *\\n     * @param RESOLVER Use dynamic condition & input data for execution. {See ResolverModule.sol}\\n     * @param TIME Repeated execution of task at a specified timing and interval. {See TimeModule.sol}\\n     * @param PROXY Creates a dedicated caller (msg.sender) to be used when executing the task. {See ProxyModule.sol}\\n     * @param SINGLE_EXEC Task is cancelled after one execution. {See SingleExecModule.sol}\\n     */\\n    enum Module {\\n        RESOLVER,\\n        TIME,\\n        PROXY,\\n        SINGLE_EXEC\\n    }\\n\\n    /**\\n     * @notice Struct to contain modules and their relative arguments that are used for task creation.\\n     *\\n     * @param modules List of selected modules.\\n     * @param args Arguments of modules if any. Pass \\\"0x\\\" for modules which does not require args {See encodeModuleArg}\\n     */\\n    struct ModuleData {\\n        Module[] modules;\\n        bytes[] args;\\n    }\\n\\n    /**\\n     * @notice Struct for time module.\\n     *\\n     * @param nextExec Time when the next execution should occur.\\n     * @param interval Time interval between each execution.\\n     */\\n    struct Time {\\n        uint128 nextExec;\\n        uint128 interval;\\n    }\\n}\\n\",\"keccak256\":\"0x51822b759b6066c148adb18620e888ec4b4353b58678a5ebd4ba1cc10cff83b8\",\"license\":\"MIT\"},\"contracts/taskModules/ProxyModule.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {TaskModuleBase} from \\\"./TaskModuleBase.sol\\\";\\nimport {IOpsProxy} from \\\"../interfaces/IOpsProxy.sol\\\";\\nimport {IOpsProxyFactory} from \\\"../interfaces/IOpsProxyFactory.sol\\\";\\n\\ncontract ProxyModule is TaskModuleBase {\\n    IOpsProxyFactory public immutable opsProxyFactory;\\n\\n    constructor(IOpsProxyFactory _opsProxyFactory) {\\n        opsProxyFactory = _opsProxyFactory;\\n    }\\n\\n    /**\\n     * @inheritdoc TaskModuleBase\\n     */\\n    function onCreateTask(\\n        bytes32,\\n        address _taskCreator,\\n        address,\\n        bytes calldata,\\n        bytes calldata\\n    ) external override {\\n        _deployIfNoProxy(_taskCreator);\\n    }\\n\\n    /**\\n     * @inheritdoc TaskModuleBase\\n     * @dev _taskCreator cannot create task to other user's proxy\\n     */\\n    function preCreateTask(address _taskCreator, address _execAddress)\\n        external\\n        view\\n        override\\n        returns (address, address)\\n    {\\n        address ownerOfExecAddress = opsProxyFactory.ownerOf(_execAddress);\\n\\n        if (ownerOfExecAddress != address(0)) {\\n            // creating task to proxy\\n            require(\\n                _taskCreator == ownerOfExecAddress ||\\n                    _taskCreator == _execAddress,\\n                \\\"ProxyModule: Only owner of proxy\\\"\\n            );\\n\\n            return (ownerOfExecAddress, _execAddress);\\n        } else {\\n            address ownerOfTaskCreator = opsProxyFactory.ownerOf(_taskCreator);\\n\\n            if (ownerOfTaskCreator != address(0)) {\\n                // creating task to non proxy, with proxy\\n                // give task ownership to proxy owner\\n                return (ownerOfTaskCreator, _execAddress);\\n            }\\n\\n            // creating task to non proxy, without proxy\\n            return (_taskCreator, _execAddress);\\n        }\\n    }\\n\\n    function preCancelTask(bytes32, address _taskCreator)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        address ownerOfTaskCreator = opsProxyFactory.ownerOf(_taskCreator);\\n\\n        if (ownerOfTaskCreator != address(0)) {\\n            return ownerOfTaskCreator;\\n        }\\n\\n        return _taskCreator;\\n    }\\n\\n    /**\\n     * @inheritdoc TaskModuleBase\\n     * @dev _execData is encoded with proxy's `executeCall` function\\n     * unless _execAddress is OpsProxy which assumes that _execData is encoded\\n     * with `executeCall` or `batchExecuteCall`.\\n     */\\n    function preExecCall(\\n        bytes32,\\n        address _taskCreator,\\n        address _execAddress,\\n        bytes calldata _execData\\n    ) external view override returns (address, bytes memory execData) {\\n        (address proxy, ) = opsProxyFactory.getProxyOf(_taskCreator);\\n\\n        execData = _execAddress == proxy\\n            ? _execData\\n            : _encodeWithOpsProxy(_execAddress, _execData);\\n\\n        _execAddress = proxy;\\n\\n        return (_execAddress, execData);\\n    }\\n\\n    function _deployIfNoProxy(address _taskCreator) private {\\n        bool isTaskCreatorProxy = opsProxyFactory.ownerOf(_taskCreator) !=\\n            address(0);\\n\\n        if (!isTaskCreatorProxy) {\\n            (, bool deployed) = opsProxyFactory.getProxyOf(_taskCreator);\\n            if (!deployed) opsProxyFactory.deployFor(_taskCreator);\\n        }\\n    }\\n\\n    function _encodeWithOpsProxy(address _execAddress, bytes calldata _execData)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodeWithSelector(\\n                IOpsProxy.executeCall.selector,\\n                _execAddress,\\n                _execData,\\n                0\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe681a040fb7054876217145013a02ba86e73aaf06ec69940a0a7ce80a9c6a657\",\"license\":\"UNLICENSED\"},\"contracts/taskModules/TaskModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {OpsStorage} from \\\"../OpsStorage.sol\\\";\\nimport {ITaskModule} from \\\"../interfaces/ITaskModule.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\nabstract contract TaskModuleBase is OpsStorage, ITaskModule {\\n    ///@inheritdoc ITaskModule\\n    function preCreateTask(address _taskCreator, address _execAddress)\\n        external\\n        virtual\\n        override\\n        returns (address, address)\\n    {\\n        return (_taskCreator, _execAddress);\\n    }\\n\\n    ///@inheritdoc ITaskModule\\n    function onCreateTask(\\n        bytes32,\\n        address,\\n        address,\\n        bytes calldata,\\n        bytes calldata\\n    ) external virtual override {}\\n\\n    ///@inheritdoc ITaskModule\\n    function preCancelTask(bytes32, address _taskCreator)\\n        external\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return _taskCreator;\\n    }\\n\\n    ///@inheritdoc ITaskModule\\n    function preExecCall(\\n        bytes32,\\n        address,\\n        address _execAddress,\\n        bytes calldata _execData\\n    ) external virtual override returns (address, bytes memory) {\\n        return (_execAddress, _execData);\\n    }\\n\\n    ///@inheritdoc ITaskModule\\n    function postExecCall(\\n        bytes32 taskId,\\n        address taskCreator,\\n        address execAddress,\\n        bytes calldata execData\\n    ) external virtual override {}\\n}\\n\",\"keccak256\":\"0x1e6d8e0779844997da48d4deeadb7b25e352d7ec96de1726229902167befd457\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620014a5380380620014a58339818101604052810190620000379190620000f0565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000122565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b6000620000b88262000097565b9050919050565b620000ca81620000ab565b8114620000d657600080fd5b50565b600081519050620000ea81620000bf565b92915050565b60006020828403121562000109576200010862000072565b5b60006200011984828501620000d9565b91505092915050565b6080516113366200016f600039600081816102a3015281816104180152818161059a015281816106fc01528181610726015281816108b00152818161096b0152610a0c01526113366000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b2db0b4111610071578063b2db0b41146101b4578063b81cd866146101d0578063ba1d0ff414610201578063c10304f71461021f578063cd3d4fb914610250578063ddca3f4314610280576100b4565b806314ae9926146100b95780632e6e0bd0146100e9578063647846a5146101195780636d2dd29f1461013757806376474e6a14610167578063b0ccbdf014610198575b600080fd5b6100d360048036038101906100ce9190610bd4565b61029e565b6040516100e09190610c23565b60405180910390f35b61010360048036038101906100fe9190610c3e565b610385565b6040516101109190610c23565b60405180910390f35b6101216103b8565b60405161012e9190610c23565b60405180910390f35b610151600480360381019061014c9190610c3e565b6103de565b60405161015e9190610c23565b60405180910390f35b610181600480360381019061017c9190610c6b565b610411565b60405161018f929190610cab565b60405180910390f35b6101b260048036038101906101ad9190610d39565b610685565b005b6101ce60048036038101906101c99190610df5565b610697565b005b6101ea60048036038101906101e59190610c3e565b61069e565b6040516101f8929190610ea8565b60405180910390f35b6102096106fa565b6040516102169190610f30565b60405180910390f35b61023960048036038101906102349190610df5565b61071e565b604051610247929190610fe4565b60405180910390f35b61026a60048036038101906102659190611039565b61085c565b6040516102779190610c23565b60405180910390f35b61028861088f565b604051610295919061107f565b60405180910390f35b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314afd79e846040518263ffffffff1660e01b81526004016102fa9190610c23565b602060405180830381865afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b91906110af565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461037a578091505061037f565b829150505b92915050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314afd79e856040518263ffffffff1660e01b815260040161046f9190610c23565b602060405180830381865afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b091906110af565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610596578073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061054b57508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b61058a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058190611139565b60405180910390fd5b8084925092505061067e565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314afd79e876040518263ffffffff1660e01b81526004016105f19190610c23565b602060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063291906110af565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461067557808593509350505061067e565b85859350935050505b9250929050565b61068e86610895565b50505050505050565b5050505050565b60056020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ded89a7c886040518263ffffffff1660e01b815260040161077d9190610c23565b6040805180830381865afa158015610799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190611191565b5090508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610803576107fe868686610aae565b610849565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050505b9150809550859250509550959350505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60008073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314afd79e846040518263ffffffff1660e01b81526004016109079190610c23565b602060405180830381865afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094891906110af565b73ffffffffffffffffffffffffffffffffffffffff161415905080610aaa5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ded89a7c846040518263ffffffff1660e01b81526004016109c29190610c23565b6040805180830381865afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190611191565b91505080610aa8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166374912cd2846040518263ffffffff1660e01b8152600401610a639190610c23565b6020604051808303816000875af1158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa6919061120f565b505b505b5050565b60606354132d7860e01b8484846000604051602401610ad094939291906112c0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b600080fd5b600080fd5b6000819050919050565b610b5381610b40565b8114610b5e57600080fd5b50565b600081359050610b7081610b4a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ba182610b76565b9050919050565b610bb181610b96565b8114610bbc57600080fd5b50565b600081359050610bce81610ba8565b92915050565b60008060408385031215610beb57610bea610b36565b5b6000610bf985828601610b61565b9250506020610c0a85828601610bbf565b9150509250929050565b610c1d81610b96565b82525050565b6000602082019050610c386000830184610c14565b92915050565b600060208284031215610c5457610c53610b36565b5b6000610c6284828501610b61565b91505092915050565b60008060408385031215610c8257610c81610b36565b5b6000610c9085828601610bbf565b9250506020610ca185828601610bbf565b9150509250929050565b6000604082019050610cc06000830185610c14565b610ccd6020830184610c14565b9392505050565b600080fd5b600080fd5b600080fd5b60008083601f840112610cf957610cf8610cd4565b5b8235905067ffffffffffffffff811115610d1657610d15610cd9565b5b602083019150836001820283011115610d3257610d31610cde565b5b9250929050565b600080600080600080600060a0888a031215610d5857610d57610b36565b5b6000610d668a828b01610b61565b9750506020610d778a828b01610bbf565b9650506040610d888a828b01610bbf565b955050606088013567ffffffffffffffff811115610da957610da8610b3b565b5b610db58a828b01610ce3565b9450945050608088013567ffffffffffffffff811115610dd857610dd7610b3b565b5b610de48a828b01610ce3565b925092505092959891949750929550565b600080600080600060808688031215610e1157610e10610b36565b5b6000610e1f88828901610b61565b9550506020610e3088828901610bbf565b9450506040610e4188828901610bbf565b935050606086013567ffffffffffffffff811115610e6257610e61610b3b565b5b610e6e88828901610ce3565b92509250509295509295909350565b60006fffffffffffffffffffffffffffffffff82169050919050565b610ea281610e7d565b82525050565b6000604082019050610ebd6000830185610e99565b610eca6020830184610e99565b9392505050565b6000819050919050565b6000610ef6610ef1610eec84610b76565b610ed1565b610b76565b9050919050565b6000610f0882610edb565b9050919050565b6000610f1a82610efd565b9050919050565b610f2a81610f0f565b82525050565b6000602082019050610f456000830184610f21565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f85578082015181840152602081019050610f6a565b83811115610f94576000848401525b50505050565b6000601f19601f8301169050919050565b6000610fb682610f4b565b610fc08185610f56565b9350610fd0818560208601610f67565b610fd981610f9a565b840191505092915050565b6000604082019050610ff96000830185610c14565b818103602083015261100b8184610fab565b90509392505050565b6004811061102157600080fd5b50565b60008135905061103381611014565b92915050565b60006020828403121561104f5761104e610b36565b5b600061105d84828501611024565b91505092915050565b6000819050919050565b61107981611066565b82525050565b60006020820190506110946000830184611070565b92915050565b6000815190506110a981610ba8565b92915050565b6000602082840312156110c5576110c4610b36565b5b60006110d38482850161109a565b91505092915050565b600082825260208201905092915050565b7f50726f78794d6f64756c653a204f6e6c79206f776e6572206f662070726f7879600082015250565b60006111236020836110dc565b915061112e826110ed565b602082019050919050565b6000602082019050818103600083015261115281611116565b9050919050565b60008115159050919050565b61116e81611159565b811461117957600080fd5b50565b60008151905061118b81611165565b92915050565b600080604083850312156111a8576111a7610b36565b5b60006111b68582860161109a565b92505060206111c78582860161117c565b9150509250929050565b60006111dc82610b76565b9050919050565b6111ec816111d1565b81146111f757600080fd5b50565b600081519050611209816111e3565b92915050565b60006020828403121561122557611224610b36565b5b6000611233848285016111fa565b91505092915050565b82818337600083830152505050565b60006112578385610f56565b935061126483858461123c565b61126d83610f9a565b840190509392505050565b6000819050919050565b600060ff82169050919050565b60006112aa6112a56112a084611278565b610ed1565b611282565b9050919050565b6112ba8161128f565b82525050565b60006060820190506112d56000830187610c14565b81810360208301526112e881858761124b565b90506112f760408301846112b1565b9594505050505056fea264697066735822122050ecea14d3794becfcefdd20e632183256a6ee4fe00a06dbb0451f2d55f314e464736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b2db0b4111610071578063b2db0b41146101b4578063b81cd866146101d0578063ba1d0ff414610201578063c10304f71461021f578063cd3d4fb914610250578063ddca3f4314610280576100b4565b806314ae9926146100b95780632e6e0bd0146100e9578063647846a5146101195780636d2dd29f1461013757806376474e6a14610167578063b0ccbdf014610198575b600080fd5b6100d360048036038101906100ce9190610bd4565b61029e565b6040516100e09190610c23565b60405180910390f35b61010360048036038101906100fe9190610c3e565b610385565b6040516101109190610c23565b60405180910390f35b6101216103b8565b60405161012e9190610c23565b60405180910390f35b610151600480360381019061014c9190610c3e565b6103de565b60405161015e9190610c23565b60405180910390f35b610181600480360381019061017c9190610c6b565b610411565b60405161018f929190610cab565b60405180910390f35b6101b260048036038101906101ad9190610d39565b610685565b005b6101ce60048036038101906101c99190610df5565b610697565b005b6101ea60048036038101906101e59190610c3e565b61069e565b6040516101f8929190610ea8565b60405180910390f35b6102096106fa565b6040516102169190610f30565b60405180910390f35b61023960048036038101906102349190610df5565b61071e565b604051610247929190610fe4565b60405180910390f35b61026a60048036038101906102659190611039565b61085c565b6040516102779190610c23565b60405180910390f35b61028861088f565b604051610295919061107f565b60405180910390f35b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314afd79e846040518263ffffffff1660e01b81526004016102fa9190610c23565b602060405180830381865afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b91906110af565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461037a578091505061037f565b829150505b92915050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314afd79e856040518263ffffffff1660e01b815260040161046f9190610c23565b602060405180830381865afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b091906110af565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610596578073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061054b57508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b61058a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058190611139565b60405180910390fd5b8084925092505061067e565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314afd79e876040518263ffffffff1660e01b81526004016105f19190610c23565b602060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063291906110af565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461067557808593509350505061067e565b85859350935050505b9250929050565b61068e86610895565b50505050505050565b5050505050565b60056020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ded89a7c886040518263ffffffff1660e01b815260040161077d9190610c23565b6040805180830381865afa158015610799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190611191565b5090508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610803576107fe868686610aae565b610849565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050505b9150809550859250509550959350505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60008073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314afd79e846040518263ffffffff1660e01b81526004016109079190610c23565b602060405180830381865afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094891906110af565b73ffffffffffffffffffffffffffffffffffffffff161415905080610aaa5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ded89a7c846040518263ffffffff1660e01b81526004016109c29190610c23565b6040805180830381865afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190611191565b91505080610aa8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166374912cd2846040518263ffffffff1660e01b8152600401610a639190610c23565b6020604051808303816000875af1158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa6919061120f565b505b505b5050565b60606354132d7860e01b8484846000604051602401610ad094939291906112c0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b600080fd5b600080fd5b6000819050919050565b610b5381610b40565b8114610b5e57600080fd5b50565b600081359050610b7081610b4a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ba182610b76565b9050919050565b610bb181610b96565b8114610bbc57600080fd5b50565b600081359050610bce81610ba8565b92915050565b60008060408385031215610beb57610bea610b36565b5b6000610bf985828601610b61565b9250506020610c0a85828601610bbf565b9150509250929050565b610c1d81610b96565b82525050565b6000602082019050610c386000830184610c14565b92915050565b600060208284031215610c5457610c53610b36565b5b6000610c6284828501610b61565b91505092915050565b60008060408385031215610c8257610c81610b36565b5b6000610c9085828601610bbf565b9250506020610ca185828601610bbf565b9150509250929050565b6000604082019050610cc06000830185610c14565b610ccd6020830184610c14565b9392505050565b600080fd5b600080fd5b600080fd5b60008083601f840112610cf957610cf8610cd4565b5b8235905067ffffffffffffffff811115610d1657610d15610cd9565b5b602083019150836001820283011115610d3257610d31610cde565b5b9250929050565b600080600080600080600060a0888a031215610d5857610d57610b36565b5b6000610d668a828b01610b61565b9750506020610d778a828b01610bbf565b9650506040610d888a828b01610bbf565b955050606088013567ffffffffffffffff811115610da957610da8610b3b565b5b610db58a828b01610ce3565b9450945050608088013567ffffffffffffffff811115610dd857610dd7610b3b565b5b610de48a828b01610ce3565b925092505092959891949750929550565b600080600080600060808688031215610e1157610e10610b36565b5b6000610e1f88828901610b61565b9550506020610e3088828901610bbf565b9450506040610e4188828901610bbf565b935050606086013567ffffffffffffffff811115610e6257610e61610b3b565b5b610e6e88828901610ce3565b92509250509295509295909350565b60006fffffffffffffffffffffffffffffffff82169050919050565b610ea281610e7d565b82525050565b6000604082019050610ebd6000830185610e99565b610eca6020830184610e99565b9392505050565b6000819050919050565b6000610ef6610ef1610eec84610b76565b610ed1565b610b76565b9050919050565b6000610f0882610edb565b9050919050565b6000610f1a82610efd565b9050919050565b610f2a81610f0f565b82525050565b6000602082019050610f456000830184610f21565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f85578082015181840152602081019050610f6a565b83811115610f94576000848401525b50505050565b6000601f19601f8301169050919050565b6000610fb682610f4b565b610fc08185610f56565b9350610fd0818560208601610f67565b610fd981610f9a565b840191505092915050565b6000604082019050610ff96000830185610c14565b818103602083015261100b8184610fab565b90509392505050565b6004811061102157600080fd5b50565b60008135905061103381611014565b92915050565b60006020828403121561104f5761104e610b36565b5b600061105d84828501611024565b91505092915050565b6000819050919050565b61107981611066565b82525050565b60006020820190506110946000830184611070565b92915050565b6000815190506110a981610ba8565b92915050565b6000602082840312156110c5576110c4610b36565b5b60006110d38482850161109a565b91505092915050565b600082825260208201905092915050565b7f50726f78794d6f64756c653a204f6e6c79206f776e6572206f662070726f7879600082015250565b60006111236020836110dc565b915061112e826110ed565b602082019050919050565b6000602082019050818103600083015261115281611116565b9050919050565b60008115159050919050565b61116e81611159565b811461117957600080fd5b50565b60008151905061118b81611165565b92915050565b600080604083850312156111a8576111a7610b36565b5b60006111b68582860161109a565b92505060206111c78582860161117c565b9150509250929050565b60006111dc82610b76565b9050919050565b6111ec816111d1565b81146111f757600080fd5b50565b600081519050611209816111e3565b92915050565b60006020828403121561122557611224610b36565b5b6000611233848285016111fa565b91505092915050565b82818337600083830152505050565b60006112578385610f56565b935061126483858461123c565b61126d83610f9a565b840190509392505050565b6000819050919050565b600060ff82169050919050565b60006112aa6112a56112a084611278565b610ed1565b611282565b9050919050565b6112ba8161128f565b82525050565b60006060820190506112d56000830187610c14565b81810360208301526112e881858761124b565b90506112f760408301846112b1565b9594505050505056fea264697066735822122050ecea14d3794becfcefdd20e632183256a6ee4fe00a06dbb0451f2d55f314e464736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onCreateTask(bytes32,address,address,bytes,bytes)": {
        "params": {
          "execAddress": "Address of contract that should be called.",
          "execData": "Execution data to be called with / function selector if execution data is yet to be determined.",
          "initModuleArg": "Encoded arguments for module if any.",
          "taskCreator": "The address which created the task.",
          "taskId": "Unique hash of the task created."
        }
      },
      "postExecCall(bytes32,address,address,bytes)": {
        "params": {
          "execAddress": "Address of contract that should be called.",
          "execData": "Execution data to be called with / function selector if execution data is yet to be determined.",
          "taskCreator": "The address which created the task.",
          "taskId": "Unique hash of the task created."
        }
      },
      "preCancelTask(bytes32,address)": {
        "details": "Modules can override taskCreator.",
        "params": {
          "taskCreator": "The address which created the task.",
          "taskId": "Unique hash of the task created."
        },
        "returns": {
          "_0": "address Overriden or original taskCreator."
        }
      },
      "preCreateTask(address,address)": {
        "details": "_taskCreator cannot create task to other user's proxy",
        "params": {
          "execAddress": "Address of contract that should be called.",
          "taskCreator": "The address which created the task."
        },
        "returns": {
          "_0": "address Overriden or original taskCreator.",
          "_1": "address Overriden or original execAddress."
        }
      },
      "preExecCall(bytes32,address,address,bytes)": {
        "details": "_execData is encoded with proxy's `executeCall` function unless _execAddress is OpsProxy which assumes that _execData is encoded with `executeCall` or `batchExecuteCall`.",
        "params": {
          "execAddress": "Address of contract that should be called.",
          "execData": "Execution data to be called with / function selector if execution data is yet to be determined.",
          "taskCreator": "The address which created the task.",
          "taskId": "Unique hash of the task created."
        },
        "returns": {
          "_0": "address Overriden or original execution address.",
          "execData": "bytes Overriden or original execution data."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "onCreateTask(bytes32,address,address,bytes,bytes)": {
        "notice": "Initiates task module whenever `createTask` is being called."
      },
      "postExecCall(bytes32,address,address,bytes)": {
        "notice": "Called during `exec` and after execAddress is called."
      },
      "preCancelTask(bytes32,address)": {
        "notice": "Called before taskId is removed from _createdTasks[]."
      },
      "preCreateTask(address,address)": {
        "notice": "Called before generating taskId."
      },
      "preExecCall(bytes32,address,address,bytes)": {
        "notice": "Called during `exec` and before execAddress is called."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2351,
        "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
        "label": "taskCreator",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2356,
        "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
        "label": "execAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2362,
        "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
        "label": "_createdTasks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)1433_storage)"
      },
      {
        "astId": 2364,
        "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
        "label": "fee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2366,
        "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
        "label": "feeToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2372,
        "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
        "label": "timedTask",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Time)3569_storage)"
      },
      {
        "astId": 2377,
        "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
        "label": "taskModuleAddresses",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(Module)3556,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Module)3556": {
        "encoding": "inplace",
        "label": "enum LibDataTypes.Module",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)1433_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1433_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(Time)3569_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibDataTypes.Time)",
        "numberOfBytes": "32",
        "value": "t_struct(Time)3569_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Module)3556,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(Module)3556",
        "label": "mapping(enum LibDataTypes.Module => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Bytes32Set)1433_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1432,
            "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1239_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1239_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1234,
            "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1238,
            "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Time)3569_storage": {
        "encoding": "inplace",
        "label": "struct LibDataTypes.Time",
        "members": [
          {
            "astId": 3566,
            "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
            "label": "nextExec",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 3568,
            "contract": "contracts/taskModules/ProxyModule.sol:ProxyModule",
            "label": "interval",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
