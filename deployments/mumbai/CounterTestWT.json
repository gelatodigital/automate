{
  "address": "0xaF60B6b627423945D691439EAa3872c2d0Ef1cBA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ops",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_taskCreator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "checker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "execPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dedicatedMsgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastExecuted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ops",
      "outputs": [
        {
          "internalType": "contract IOps",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb7449d3509052efbc744f6b98feeef17cc4eecf2b28d4c60c6b3e88f862926ad",
  "receipt": {
    "to": null,
    "from": "0xCDf41a135C65d0013393B3793F92b4FAF31032d0",
    "contractAddress": "0xaF60B6b627423945D691439EAa3872c2d0Ef1cBA",
    "transactionIndex": 21,
    "gasUsed": "962504",
    "logsBloom": "0x
    "blockHash": "0xf84cb40881bb3e3b897a56230ad672907f666bc46d2854ac7e91c1e251e17f2d",
    "transactionHash": "0xb7449d3509052efbc744f6b98feeef17cc4eecf2b28d4c60c6b3e88f862926ad",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 29555511,
        "transactionHash": "0xb7449d3509052efbc744f6b98feeef17cc4eecf2b28d4c60c6b3e88f862926ad",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cdf41a135c65d0013393b3793f92b4faf31032d0",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003c12cb6950140000000000000000000000000000000000000000000000002cc1d187342d4ad9500000000000000000000000000000000000000000000280d4ce9ce892e8497ef000000000000000000000000000000000000000000000002cc1957468c3fac5500000000000000000000000000000000000000000000280d4ced8fb5e519992f",
        "logIndex": 83,
        "blockHash": "0xf84cb40881bb3e3b897a56230ad672907f666bc46d2854ac7e91c1e251e17f2d"
      }
    ],
    "blockNumber": 29555511,
    "cumulativeGasUsed": "3182884",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB3f5503f93d5Ef84b06993a1975B9D21B962892F",
    "0xCDf41a135C65d0013393B3793F92b4FAF31032d0"
  ],
  "numDeployments": 1,
  "solcInputHash": "0fcf7604ca384e64088cfb6326cdd37d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ops\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taskCreator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dedicatedMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastExecuted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"contract IOps\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tests/CounterTestWT.sol\":\"CounterTestWT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/integrations/OpsReady.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * @dev Inherit this contract to allow your smart contract to\\n * - Make synchronous fee payments.\\n * - Have call restrictions for functions to be automated.\\n */\\n// solhint-disable private-vars-leading-underscore\\nabstract contract OpsReady {\\n    IOps public immutable ops;\\n    address public immutable dedicatedMsgSender;\\n    address private immutable _gelato;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address private constant OPS_PROXY_FACTORY =\\n        0xC815dB16D4be6ddf2685C201937905aBf338F5D7;\\n\\n    /**\\n     * @dev\\n     * Only tasks created by _taskCreator defined in constructor can call\\n     * the functions with this modifier.\\n     */\\n    modifier onlyDedicatedMsgSender() {\\n        require(msg.sender == dedicatedMsgSender, \\\"Only dedicated msg.sender\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev\\n     * _taskCreator is the address which will create tasks for this contract.\\n     */\\n    constructor(address _ops, address _taskCreator) {\\n        ops = IOps(_ops);\\n        _gelato = IOps(_ops).gelato();\\n        (dedicatedMsgSender, ) = IOpsProxyFactory(OPS_PROXY_FACTORY).getProxyOf(\\n            _taskCreator\\n        );\\n    }\\n\\n    /**\\n     * @dev\\n     * Transfers fee to gelato for synchronous fee payments.\\n     *\\n     * _fee & _feeToken should be queried from IOps.getFeeDetails()\\n     */\\n    function _transfer(uint256 _fee, address _feeToken) internal {\\n        if (_feeToken == ETH) {\\n            (bool success, ) = _gelato.call{value: _fee}(\\\"\\\");\\n            require(success, \\\"_transfer: ETH transfer failed\\\");\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_feeToken), _gelato, _fee);\\n        }\\n    }\\n\\n    function _getFeeDetails()\\n        internal\\n        view\\n        returns (uint256 fee, address feeToken)\\n    {\\n        (fee, feeToken) = ops.getFeeDetails();\\n    }\\n}\\n\",\"keccak256\":\"0xb2b26e4f1ab69a191343aa820dac9708bec0302f99d52dea734d50a1f2e1274f\",\"license\":\"UNLICENSED\"},\"contracts/integrations/Types.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nenum Module {\\n    RESOLVER,\\n    TIME,\\n    PROXY,\\n    SINGLE_EXEC\\n}\\n\\nstruct ModuleData {\\n    Module[] modules;\\n    bytes[] args;\\n}\\n\\ninterface IOps {\\n    function createTask(\\n        address execAddress,\\n        bytes calldata execDataOrSelector,\\n        ModuleData calldata moduleData,\\n        address feeToken\\n    ) external returns (bytes32 taskId);\\n\\n    function cancelTask(bytes32 taskId) external;\\n\\n    function getFeeDetails() external view returns (uint256, address);\\n\\n    function gelato() external view returns (address payable);\\n\\n    function taskTreasury() external view returns (ITaskTreasuryUpgradable);\\n}\\n\\ninterface ITaskTreasuryUpgradable {\\n    function depositFunds(\\n        address receiver,\\n        address token,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdrawFunds(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\\ninterface IOpsProxyFactory {\\n    function getProxyOf(address account) external view returns (address, bool);\\n}\\n\",\"keccak256\":\"0x674b4d863f605053c166c474d97f342459a9e0c0fada620ac33bd0dd4785569f\",\"license\":\"UNLICENSED\"},\"contracts/tests/CounterTestWT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../integrations/OpsReady.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n// solhint-disable not-rely-on-time\\ncontract CounterTestWT is OpsReady {\\n    uint256 public count;\\n    uint256 public lastExecuted;\\n\\n    constructor(address _ops, address _taskCreator)\\n        OpsReady(_ops, _taskCreator)\\n    {}\\n\\n    receive() external payable {}\\n\\n    function increaseCount(uint256 amount) external {\\n        require(\\n            ((block.timestamp - lastExecuted) > 180),\\n            \\\"Counter: increaseCount: Time not elapsed\\\"\\n        );\\n\\n        count += amount;\\n        lastExecuted = block.timestamp;\\n\\n        (uint256 fee, address feeToken) = _getFeeDetails();\\n\\n        _transfer(fee, feeToken);\\n    }\\n\\n    function checker()\\n        external\\n        view\\n        returns (bool canExec, bytes memory execPayload)\\n    {\\n        canExec = (block.timestamp - lastExecuted) > 180;\\n\\n        execPayload = abi.encodeCall(this.increaseCount, (1));\\n    }\\n}\\n\",\"keccak256\":\"0x82fcdc1bd09413a2bf7d3921831d40df6fb63c481c9523a7455d1d66ce8c2738\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c806306661abd146100655780631c15ff771461009057806328f150eb146100bb57806346d4adf2146100e6578063cf5303cf1461010f578063e70abe921461013b57610060565b3661006057005b600080fd5b34801561007157600080fd5b5061007a610166565b60405161008791906107d6565b60405180910390f35b34801561009c57600080fd5b506100a561016c565b6040516100b291906107d6565b60405180910390f35b3480156100c757600080fd5b506100d0610172565b6040516100dd9190610832565b60405180910390f35b3480156100f257600080fd5b5061010d6004803603810190610108919061087e565b610196565b005b34801561011b57600080fd5b50610124610223565b60405161013292919061095f565b60405180910390f35b34801561014757600080fd5b506101506102b0565b60405161015d91906109ee565b60405180910390f35b60005481565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60b4600154426101a69190610a38565b116101e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd90610aef565b60405180910390fd5b806000808282546101f79190610b0f565b92505081905550426001819055506000806102106102d4565b9150915061021e8282610371565b505050565b6000606060b4600154426102379190610a38565b1191503073ffffffffffffffffffffffffffffffffffffffff166346d4adf260016040516024016102689190610ba0565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509091565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa158015610341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103659190610bfc565b80925081935050509091565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361048a5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16836040516103fe90610c6d565b60006040518083038185875af1925050503d806000811461043b576040519150601f19603f3d011682016040523d82523d6000602084013e610440565b606091505b5050905080610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b90610cce565b60405180910390fd5b506104b6565b6104b5817f0000000000000000000000000000000000000000000000000000000000000000846104ba565b5b5050565b61053b8363a9059cbb60e01b84846040516024016104d9929190610cee565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610540565b505050565b60006105a2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106079092919063ffffffff16565b905060008151111561060257808060200190518101906105c29190610d43565b610601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f890610de2565b60405180910390fd5b5b505050565b6060610616848460008561061f565b90509392505050565b606082471015610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b90610e74565b60405180910390fd5b61066d85610733565b6106ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a390610ee0565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516106d59190610f31565b60006040518083038185875af1925050503d8060008114610712576040519150601f19603f3d011682016040523d82523d6000602084013e610717565b606091505b5091509150610727828286610756565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610766578290506107b6565b6000835111156107795782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad9190610f8c565b60405180910390fd5b9392505050565b6000819050919050565b6107d0816107bd565b82525050565b60006020820190506107eb60008301846107c7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061081c826107f1565b9050919050565b61082c81610811565b82525050565b60006020820190506108476000830184610823565b92915050565b600080fd5b61085b816107bd565b811461086657600080fd5b50565b60008135905061087881610852565b92915050565b6000602082840312156108945761089361084d565b5b60006108a284828501610869565b91505092915050565b60008115159050919050565b6108c0816108ab565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109005780820151818401526020810190506108e5565b8381111561090f576000848401525b50505050565b6000601f19601f8301169050919050565b6000610931826108c6565b61093b81856108d1565b935061094b8185602086016108e2565b61095481610915565b840191505092915050565b600060408201905061097460008301856108b7565b81810360208301526109868184610926565b90509392505050565b6000819050919050565b60006109b46109af6109aa846107f1565b61098f565b6107f1565b9050919050565b60006109c682610999565b9050919050565b60006109d8826109bb565b9050919050565b6109e8816109cd565b82525050565b6000602082019050610a0360008301846109df565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a43826107bd565b9150610a4e836107bd565b925082821015610a6157610a60610a09565b5b828203905092915050565b600082825260208201905092915050565b7f436f756e7465723a20696e637265617365436f756e743a2054696d65206e6f7460008201527f20656c6170736564000000000000000000000000000000000000000000000000602082015250565b6000610ad9602883610a6c565b9150610ae482610a7d565b604082019050919050565b60006020820190508181036000830152610b0881610acc565b9050919050565b6000610b1a826107bd565b9150610b25836107bd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b5a57610b59610a09565b5b828201905092915050565b6000819050919050565b6000610b8a610b85610b8084610b65565b61098f565b6107bd565b9050919050565b610b9a81610b6f565b82525050565b6000602082019050610bb56000830184610b91565b92915050565b600081519050610bca81610852565b92915050565b610bd981610811565b8114610be457600080fd5b50565b600081519050610bf681610bd0565b92915050565b60008060408385031215610c1357610c1261084d565b5b6000610c2185828601610bbb565b9250506020610c3285828601610be7565b9150509250929050565b600081905092915050565b50565b6000610c57600083610c3c565b9150610c6282610c47565b600082019050919050565b6000610c7882610c4a565b9150819050919050565b7f5f7472616e736665723a20455448207472616e73666572206661696c65640000600082015250565b6000610cb8601e83610a6c565b9150610cc382610c82565b602082019050919050565b60006020820190508181036000830152610ce781610cab565b9050919050565b6000604082019050610d036000830185610823565b610d1060208301846107c7565b9392505050565b610d20816108ab565b8114610d2b57600080fd5b50565b600081519050610d3d81610d17565b92915050565b600060208284031215610d5957610d5861084d565b5b6000610d6784828501610d2e565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610dcc602a83610a6c565b9150610dd782610d70565b604082019050919050565b60006020820190508181036000830152610dfb81610dbf565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610e5e602683610a6c565b9150610e6982610e02565b604082019050919050565b60006020820190508181036000830152610e8d81610e51565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610eca601d83610a6c565b9150610ed582610e94565b602082019050919050565b60006020820190508181036000830152610ef981610ebd565b9050919050565b6000610f0b826108c6565b610f158185610c3c565b9350610f258185602086016108e2565b80840191505092915050565b6000610f3d8284610f00565b915081905092915050565b600081519050919050565b6000610f5e82610f48565b610f688185610a6c565b9350610f788185602086016108e2565b610f8181610915565b840191505092915050565b60006020820190508181036000830152610fa68184610f53565b90509291505056fea2646970667358221220c2888ba4b44ea29ab656d959cd3c072556e0331dbfd85afe09facf1788c56e3164736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9764,
        "contract": "contracts/tests/CounterTestWT.sol:CounterTestWT",
        "label": "count",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9766,
        "contract": "contracts/tests/CounterTestWT.sol:CounterTestWT",
        "label": "lastExecuted",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
