{
  "address": "0x847454FA01D2FAcA4bA8C69B50e317849Cb70515",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ops",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "DeployProxy",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "deployFor",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "determineProxyAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getNextSeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getOwnerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getProxyOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "isProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ops",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xba50bb1b99ea826a93437047d1d23802994f74d1c124154b38a95fa81591a783",
  "receipt": {
    "to": null,
    "from": "0x5ce6047a715B1919A58C549E6FBc1921B4d9287D",
    "contractAddress": "0x847454FA01D2FAcA4bA8C69B50e317849Cb70515",
    "transactionIndex": 27,
    "gasUsed": "1803195",
    "logsBloom": "0x
    "blockHash": "0x848e0c1191a34bbeb879dcdf2607ba478ef882cc9ae21dd5ca85532352dd04c2",
    "transactionHash": "0xba50bb1b99ea826a93437047d1d23802994f74d1c124154b38a95fa81591a783",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 27457359,
        "transactionHash": "0xba50bb1b99ea826a93437047d1d23802994f74d1c124154b38a95fa81591a783",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005ce6047a715b1919a58c549e6fbc1921b4d9287d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000ccffe19cbf6b200000000000000000000000000000000000000000000000045cef2bae86cd7e60000000000000000000000000000000000000000000012dc941d5c910d22991400000000000000000000000000000000000000000000000045c222bccea0e1340000000000000000000000000000000000000000000012dc942a2c8f26ee8fc6",
        "logIndex": 57,
        "blockHash": "0x848e0c1191a34bbeb879dcdf2607ba478ef882cc9ae21dd5ca85532352dd04c2"
      }
    ],
    "blockNumber": 27457359,
    "cumulativeGasUsed": "3556579",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA16a69BFbBf1600490E667865f91aAFA11d62371",
    "0x1cC0fA340c61667a97862304F776c2F26b56200f"
  ],
  "numDeployments": 2,
  "solcInputHash": "8e85eb588af66df445d71ad3c9cb58f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ops\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"DeployProxy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"deployFor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"determineProxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getNextSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getProxyOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"isProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy()\":{\"returns\":{\"proxy\":\"Address of deployed proxy.\"}},\"deployFor(address)\":{\"params\":{\"owner\":\"Address to deploy the proxy for.\"},\"returns\":{\"proxy\":\"Address of deployed proxy.\"}},\"determineProxyAddress(address)\":{\"params\":{\"account\":\"Address to determine the proxy address for.\"}},\"getNextSeed(address)\":{\"returns\":{\"_0\":\"bytes32 Next seed which will be used for deployment for an address.\"}},\"getOwnerOf(address)\":{\"returns\":{\"_0\":\"address Owner of deployed proxy.\"}},\"getProxyOf(address)\":{\"returns\":{\"_0\":\"address Proxy address owned by account.\",\"_1\":\"bool Whether if proxy is deployed\"}},\"isProxy(address)\":{\"returns\":{\"_0\":\"bool Whether if a contract is an OpsProxy.\"}}},\"stateVariables\":{\"_nextSeeds\":{\"details\":\"track the next seed to be used by an EOA.\"},\"_ownerOf\":{\"details\":\"track owner of proxy\"},\"_proxies\":{\"details\":\"track deployed proxies\"},\"_proxyOf\":{\"details\":\"track proxy of user\"},\"version\":{\"return\":\"uint256 version of OpsProxyFactory.\",\"returns\":{\"_0\":\"uint256 version of OpsProxyFactory.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DeployProxy(address,address,bytes32,bytes32,address)\":{\"notice\":\"Emitted when an OpsProxy is deployed.\"}},\"kind\":\"user\",\"methods\":{\"deploy()\":{\"notice\":\"Deploys OpsProxy for the msg.sender.\"},\"deployFor(address)\":{\"notice\":\"Deploys OpsProxy for another address.\"},\"determineProxyAddress(address)\":{\"notice\":\"Determines the OpsProxy address when it is not deployed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/opsProxy/OpsProxyFactory.sol\":\"OpsProxyFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/functions/FExec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport {GelatoBytes} from \\\"../vendor/gelato/GelatoBytes.sol\\\";\\n\\n// solhint-disable private-vars-leading-underscore\\n// solhint-disable func-visibility\\n\\nfunction _call(\\n    address _add,\\n    bytes memory _data,\\n    uint256 _value,\\n    bool _revertOnFailure,\\n    string memory _tracingInfo\\n) returns (bool success, bytes memory returnData) {\\n    (success, returnData) = _add.call{value: _value}(_data);\\n\\n    if (!success && _revertOnFailure)\\n        GelatoBytes.revertWithError(returnData, _tracingInfo);\\n}\\n\\nfunction _delegateCall(\\n    address _add,\\n    bytes memory _data,\\n    string memory _tracingInfo\\n) returns (bool success, bytes memory returnData) {\\n    (success, returnData) = _add.delegatecall(_data);\\n\\n    if (!success) GelatoBytes.revertWithError(returnData, _tracingInfo);\\n}\\n\",\"keccak256\":\"0x48375d0645cf4dfe7d3f18dc727cbb2322a09233a2e9cce9352a73acc357bf07\",\"license\":\"MIT\"},\"contracts/interfaces/IOpsProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IOpsProxy {\\n    /**\\n     * @notice Emitted when proxy calls a contract successfully in `executeCall`\\n     *\\n     * @param target Address of contract that is called\\n     * @param data Data used in the call.\\n     * @param value Native token value used in the call.\\n     * @param returnData Data returned by the call.\\n     */\\n    event ExecuteCall(\\n        address indexed target,\\n        bytes data,\\n        uint256 value,\\n        bytes returnData\\n    );\\n\\n    /**\\n     * @notice Multicall to different contracts with different datas.\\n     *\\n     * @param targets Addresses of contracts to be called.\\n     * @param datas Datas for each contract call.\\n     * @param values Native token value for each contract call.\\n     */\\n    function batchExecuteCall(\\n        address[] calldata targets,\\n        bytes[] calldata datas,\\n        uint256[] calldata values\\n    ) external payable;\\n\\n    /**\\n     * @notice Call to a single contract.\\n     *\\n     * @param target Address of contracts to be called.\\n     * @param data Data for contract call.\\n     * @param value Native token value for contract call.\\n     */\\n    function executeCall(\\n        address target,\\n        bytes calldata data,\\n        uint256 value\\n    ) external payable;\\n\\n    /**\\n     * @return address Ops smart contract address\\n     */\\n    function ops() external view returns (address);\\n\\n    /**\\n     * @return address Owner of the proxy\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @return uint256 version of OpsProxy.\\n     */\\n    function version() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1b6e349287dfeb2735da8d3f7ae0aa5865996f7dd58622773b449a76bcaf881a\",\"license\":\"MIT\"},\"contracts/interfaces/IOpsProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IOpsProxyFactory {\\n    /**\\n     * @notice Emitted when an OpsProxy is deployed.\\n     *\\n     * @param deployer Address which initiated the deployment\\n     * @param owner The address which the proxy is for.\\n     * @param seed Seed used for deployment.\\n     * @param salt Salt used for deployment.\\n     * @param proxy Address of deployed proxy.\\n     */\\n    event DeployProxy(\\n        address indexed deployer,\\n        address indexed owner,\\n        bytes32 seed,\\n        bytes32 salt,\\n        address proxy\\n    );\\n\\n    /**\\n     * @notice Deploys OpsProxy for the msg.sender.\\n     *\\n     * @return proxy Address of deployed proxy.\\n     */\\n    function deploy() external returns (address payable proxy);\\n\\n    /**\\n     * @notice Deploys OpsProxy for another address.\\n     *\\n     * @param owner Address to deploy the proxy for.\\n     *\\n     * @return proxy Address of deployed proxy.\\n     */\\n    function deployFor(address owner) external returns (address payable proxy);\\n\\n    /**\\n     * @notice Determines the OpsProxy address when it is not deployed.\\n     *\\n     * @param account Address to determine the proxy address for.\\n     */\\n    function determineProxyAddress(address account)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @return bytes32 Next seed which will be used for deployment for an address.\\n     */\\n    function getNextSeed(address account) external view returns (bytes32);\\n\\n    /**\\n     * @return address Proxy address owned by account.\\n     * @return bool Whether if proxy is deployed\\n     */\\n    function getProxyOf(address account) external view returns (address, bool);\\n\\n    /**\\n     * @return address Owner of deployed proxy.\\n     */\\n    function getOwnerOf(address proxy) external view returns (address);\\n\\n    /**\\n     * @return bool Whether if a contract is an OpsProxy.\\n     */\\n    function isProxy(address proxy) external view returns (bool);\\n\\n    /**\\n     * @return uint256 version of OpsProxyFactory.\\n     */\\n    function version() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf53cb730c6ebdc07b74be1c8fb6b033bb71a840d5ecce78884dd7f0b6b6488d1\",\"license\":\"MIT\"},\"contracts/opsProxy/OpsProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {Proxied} from \\\"../vendor/proxy/EIP173/Proxied.sol\\\";\\nimport {GelatoBytes} from \\\"../vendor/gelato/GelatoBytes.sol\\\";\\nimport {_call} from \\\"../functions/FExec.sol\\\";\\nimport {IOpsProxy} from \\\"../interfaces/IOpsProxy.sol\\\";\\n\\ncontract OpsProxy is Proxied, IOpsProxy {\\n    using GelatoBytes for bytes;\\n\\n    // solhint-disable const-name-snakecase\\n    uint256 public constant override version = 1;\\n    address public immutable override ops;\\n\\n    modifier onlyAuth() {\\n        require(\\n            msg.sender == ops || msg.sender == owner(),\\n            \\\"OpsProxy: Not authorised\\\"\\n        );\\n\\n        if (msg.sender == ops) {\\n            address taskCreator = _getTaskCreator();\\n\\n            require(\\n                taskCreator == owner(),\\n                \\\"OpsProxy: Only tasks created by owner\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    constructor(address _ops) {\\n        ops = _ops;\\n    }\\n\\n    receive() external payable {}\\n\\n    ///@inheritdoc IOpsProxy\\n    function batchExecuteCall(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        uint256[] calldata _values\\n    ) external payable override onlyAuth {\\n        uint256 length = _targets.length;\\n        require(\\n            length == _datas.length && length == _values.length,\\n            \\\"OpsProxy: Length mismatch\\\"\\n        );\\n\\n        for (uint256 i; i < length; i++)\\n            _executeCall(_targets[i], _datas[i], _values[i]);\\n    }\\n\\n    ///@inheritdoc IOpsProxy\\n    function executeCall(\\n        address _target,\\n        bytes calldata _data,\\n        uint256 _value\\n    ) external payable override onlyAuth {\\n        _executeCall(_target, _data, _value);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _proxyAdmin();\\n    }\\n\\n    function _executeCall(\\n        address _target,\\n        bytes calldata _data,\\n        uint256 _value\\n    ) private {\\n        (, bytes memory returnData) = _call(\\n            _target,\\n            _data,\\n            _value,\\n            true,\\n            \\\"OpsProxy.executeCall: \\\"\\n        );\\n\\n        emit ExecuteCall(_target, _data, _value, returnData);\\n    }\\n\\n    function _getTaskCreator() private pure returns (address taskCreator) {\\n        assembly {\\n            taskCreator := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5af2ba32afc7227a9566a5bd49c69a5fa5f34f53b319e6fe87e790f75af53eec\",\"license\":\"UNLICENSED\"},\"contracts/opsProxy/OpsProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {\\n    EIP173NonTransferableWithCustomReceive\\n} from \\\"../vendor/proxy/EIP173/EIP173NonTransferableWithCustomReceive.sol\\\";\\nimport {OpsProxy} from \\\"./OpsProxy.sol\\\";\\nimport {IOpsProxy} from \\\"../interfaces/IOpsProxy.sol\\\";\\nimport {IOpsProxyFactory} from \\\"../interfaces/IOpsProxyFactory.sol\\\";\\n\\n// solhint-disable max-states-count\\ncontract OpsProxyFactory is IOpsProxyFactory {\\n    // solhint-disable const-name-snakecase\\n    uint256 public constant override version = 1;\\n    address public immutable ops;\\n    address public immutable implementation;\\n\\n    ///@dev track the next seed to be used by an EOA.\\n    mapping(address => bytes32) internal _nextSeeds;\\n\\n    ///@dev track deployed proxies\\n    mapping(address => bool) internal _proxies;\\n\\n    ///@dev track proxy of user\\n    mapping(address => address) internal _proxyOf;\\n\\n    ///@dev track owner of proxy\\n    mapping(address => address) internal _ownerOf;\\n\\n    modifier onlyOneProxy(address _account) {\\n        require(_proxyOf[_account] == address(0), \\\"OpsProxyFactory: One proxy\\\");\\n        _;\\n    }\\n\\n    modifier notProxy(address _account) {\\n        require(!isProxy(_account), \\\"OpsProxyFactory: No proxy\\\");\\n        _;\\n    }\\n\\n    constructor(address _ops, address _implementation) {\\n        ops = _ops;\\n        implementation = _implementation;\\n    }\\n\\n    ///@inheritdoc IOpsProxyFactory\\n    function deploy() external override returns (address payable proxy) {\\n        proxy = deployFor(msg.sender);\\n    }\\n\\n    ///@inheritdoc IOpsProxyFactory\\n    function getNextSeed(address _account)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        return _nextSeeds[_account];\\n    }\\n\\n    ///@inheritdoc IOpsProxyFactory\\n    function getProxyOf(address _account)\\n        external\\n        view\\n        override\\n        returns (address, bool)\\n    {\\n        address proxyAddress = _proxyOf[_account];\\n\\n        if (proxyAddress != address(0)) return (proxyAddress, true);\\n\\n        proxyAddress = determineProxyAddress(_account);\\n        return (proxyAddress, false);\\n    }\\n\\n    ///@inheritdoc IOpsProxyFactory\\n    function getOwnerOf(address _proxy)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(isProxy(_proxy), \\\"OpsProxyFactory: Not proxy\\\");\\n\\n        return _ownerOf[_proxy];\\n    }\\n\\n    ///@inheritdoc IOpsProxyFactory\\n    function deployFor(address owner)\\n        public\\n        override\\n        onlyOneProxy(owner)\\n        notProxy(owner)\\n        returns (address payable proxy)\\n    {\\n        (bytes32 seed, bytes32 salt) = _getSeedAndSalt(owner);\\n\\n        bytes memory bytecode = _getBytecode(owner);\\n\\n        proxy = _deploy(salt, bytecode);\\n\\n        _proxies[proxy] = true;\\n        _proxyOf[owner] = proxy;\\n        _ownerOf[proxy] = owner;\\n\\n        unchecked {\\n            _nextSeeds[owner] = bytes32(uint256(seed) + 1);\\n        }\\n\\n        emit DeployProxy(msg.sender, owner, seed, salt, address(proxy));\\n    }\\n\\n    ///@inheritdoc IOpsProxyFactory\\n    function determineProxyAddress(address _account)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        address proxyAddress = _proxyOf[_account];\\n        if (proxyAddress != address(0)) return proxyAddress;\\n\\n        (, bytes32 salt) = _getSeedAndSalt(_account);\\n\\n        bytes memory bytecode = _getBytecode(_account);\\n\\n        bytes32 codeHash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                address(this),\\n                salt,\\n                keccak256(bytecode)\\n            )\\n        );\\n\\n        return address(uint160(uint256(codeHash)));\\n    }\\n\\n    ///@inheritdoc IOpsProxyFactory\\n    function isProxy(address proxy) public view override returns (bool) {\\n        return _proxies[proxy];\\n    }\\n\\n    function _deploy(bytes32 _salt, bytes memory _bytecode)\\n        internal\\n        returns (address payable proxy)\\n    {\\n        assembly {\\n            let endowment := 0\\n            let bytecodeStart := add(_bytecode, 0x20)\\n            let bytecodeLength := mload(_bytecode)\\n            proxy := create2(endowment, bytecodeStart, bytecodeLength, _salt)\\n        }\\n    }\\n\\n    function _getSeedAndSalt(address _account)\\n        internal\\n        view\\n        returns (bytes32 seed, bytes32 salt)\\n    {\\n        seed = _nextSeeds[_account];\\n\\n        salt = keccak256(abi.encode(_account, seed));\\n    }\\n\\n    function _getBytecode(address _owner) internal view returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                type(EIP173NonTransferableWithCustomReceive).creationCode,\\n                abi.encode(implementation, _owner, bytes(\\\"\\\"))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x31e4034724eeee9897650ace7873f03f52f431b5ee9ca5b270392eaa2f3d89ac\",\"license\":\"UNLICENSED\"},\"contracts/vendor/gelato/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ec59b2c6f678f3bbe186677e5970e59e46a40d22881dc813c49ffb18e417951\",\"license\":\"UNLICENSED\"},\"contracts/vendor/proxy/EIP173/EIP173NonTransferable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./Proxy.sol\\\";\\n\\ninterface ERC165 {\\n    function supportsInterface(bytes4 id) external view returns (bool);\\n}\\n\\n/**\\n * @notice Proxy implementing EIP173 for ownership management\\n * @dev transferProxyAdmin removed\\n */\\ncontract EIP173NonTransferable is Proxy {\\n    // ////////////////////////// EVENTS ///////////////////////////////////////////////////////////////////////\\n\\n    event ProxyAdminTransferred(\\n        address indexed previousAdmin,\\n        address indexed newAdmin\\n    );\\n\\n    // /////////////////////// CONSTRUCTOR //////////////////////////////////////////////////////////////////////\\n\\n    constructor(\\n        address implementationAddress,\\n        address adminAddress,\\n        bytes memory data\\n    ) payable {\\n        _setImplementation(implementationAddress, data);\\n        _setProxyAdmin(adminAddress);\\n    }\\n\\n    // ///////////////////// EXTERNAL ///////////////////////////////////////////////////////////////////////////\\n\\n    function proxyAdmin() external view returns (address) {\\n        return _proxyAdmin();\\n    }\\n\\n    function supportsInterface(bytes4 id) external view returns (bool) {\\n        if (id == 0x01ffc9a7 || id == 0x7f5828d0) {\\n            return true;\\n        }\\n        if (id == 0xFFFFFFFF) {\\n            return false;\\n        }\\n\\n        ERC165 implementation;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            implementation := sload(\\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\n            )\\n        }\\n\\n        // Technically this is not standard compliant as ERC-165 require 30,000 gas which that call cannot ensure\\n        // because it is itself inside `supportsInterface` that might only get 30,000 gas.\\n        // In practise this is unlikely to be an issue.\\n        try implementation.supportsInterface(id) returns (bool support) {\\n            return support;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function upgradeTo(address newImplementation) external onlyProxyAdmin {\\n        _setImplementation(newImplementation, \\\"\\\");\\n    }\\n\\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\\n        external\\n        payable\\n        onlyProxyAdmin\\n    {\\n        _setImplementation(newImplementation, data);\\n    }\\n\\n    // /////////////////////// MODIFIERS ////////////////////////////////////////////////////////////////////////\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    // ///////////////////////// INTERNAL //////////////////////////////////////////////////////////////////////\\n\\n    function _proxyAdmin() internal view returns (address adminAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n\\n    function _setProxyAdmin(address newAdmin) internal {\\n        address previousAdmin = _proxyAdmin();\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            sstore(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                newAdmin\\n            )\\n        }\\n        emit ProxyAdminTransferred(previousAdmin, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xa03493eac31a9bf59067021f29cac57fe61dd75a2a790c8f45ce852d4cb78b85\",\"license\":\"GPL-3.0\"},\"contracts/vendor/proxy/EIP173/EIP173NonTransferableWithCustomReceive.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./EIP173NonTransferable.sol\\\";\\n\\n///@notice Proxy implementing EIP173 for ownership management that accept ETH via receive\\ncontract EIP173NonTransferableWithCustomReceive is EIP173NonTransferable {\\n    constructor(\\n        address implementationAddress,\\n        address ownerAddress,\\n        bytes memory data\\n    )\\n        payable\\n        EIP173NonTransferable(implementationAddress, ownerAddress, data)\\n    {}\\n\\n    receive() external payable override {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0x1c74d0d388f67a4f5308558f1959de33685df6e52cca75e852ab0c75b575e218\",\"license\":\"GPL-3.0\"},\"contracts/vendor/proxy/EIP173/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address adminAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x428ced1961d42c505a3e49d90498f92f4b0df8537e5ffa59f14ba375d99150a1\",\"license\":\"GPL-3.0\"},\"contracts/vendor/proxy/EIP173/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n// EIP-1967\\nabstract contract Proxy {\\n    // /////////////////////// EVENTS ///////////////////////////////////////////////////////////////////////////\\n\\n    event ProxyImplementationUpdated(\\n        address indexed previousImplementation,\\n        address indexed newImplementation\\n    );\\n\\n    // ///////////////////// EXTERNAL ///////////////////////////////////////////////////////////////////////////\\n\\n    // prettier-ignore\\n    receive() external payable virtual {\\n        revert(\\\"ETHER_REJECTED\\\"); // explicit reject by default\\n    }\\n\\n    fallback() external payable {\\n        _fallback();\\n    }\\n\\n    // ///////////////////////// INTERNAL //////////////////////////////////////////////////////////////////////\\n\\n    function _fallback() internal {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let implementationAddress := sload(\\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\n            )\\n            calldatacopy(0x0, 0x0, calldatasize())\\n            let success := delegatecall(\\n                gas(),\\n                implementationAddress,\\n                0x0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            let retSz := returndatasize()\\n            returndatacopy(0, 0, retSz)\\n            switch success\\n            case 0 {\\n                revert(0, retSz)\\n            }\\n            default {\\n                return(0, retSz)\\n            }\\n        }\\n    }\\n\\n    function _setImplementation(address newImplementation, bytes memory data)\\n        internal\\n    {\\n        address previousImplementation;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            previousImplementation := sload(\\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\n            )\\n        }\\n\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            sstore(\\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc,\\n                newImplementation\\n            )\\n        }\\n\\n        emit ProxyImplementationUpdated(\\n            previousImplementation,\\n            newImplementation\\n        );\\n\\n        if (data.length > 0) {\\n            (bool success, ) = newImplementation.delegatecall(data);\\n            if (!success) {\\n                assembly {\\n                    // This assembly ensure the revert contains the exact string data\\n                    let returnDataSize := returndatasize()\\n                    returndatacopy(0, 0, returnDataSize)\\n                    revert(0, returnDataSize)\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb5e3e1c4cab8a5e3bd968f51c201a11e651f62b47aa78a4e3e0b7508be268d35\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200213738038062002137833981810160405281019062000037919062000111565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505062000158565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d982620000ac565b9050919050565b620000eb81620000cc565b8114620000f757600080fd5b50565b6000815190506200010b81620000e0565b92915050565b600080604083850312156200012b576200012a620000a7565b5b60006200013b85828601620000fa565b92505060206200014e85828601620000fa565b9150509250929050565b60805160a051611fb262000185600039600081816103230152610a0d0152600061094b0152611fb26000f3fe60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c806374912cd2116200006f57806374912cd21462000197578063775c300c14620001cd578063bd4972c314620001ef578063ded89a7c1462000225578063e70abe92146200025c57620000ac565b80632971038814620000b157806337a6be1614620000e757806354fd4d50146200011d5780635c60da1b146200013f578063606aa7151462000161575b600080fd5b620000cf6004803603810190620000c9919062000b1a565b6200027e565b604051620000de919062000b69565b60405180910390f35b620001056004803603810190620000ff919062000b1a565b620002d4565b60405162000114919062000ba1565b60405180910390f35b620001276200031c565b60405162000136919062000bd9565b60405180910390f35b6200014962000321565b60405162000158919062000c07565b60405180910390f35b6200017f600480360381019062000179919062000b1a565b62000345565b6040516200018e919062000c07565b60405180910390f35b620001b56004803603810190620001af919062000b1a565b62000456565b604051620001c4919062000c49565b60405180910390f35b620001d7620007bc565b604051620001e6919062000c49565b60405180910390f35b6200020d600480360381019062000207919062000b1a565b620007ce565b6040516200021c919062000c07565b60405180910390f35b6200024360048036038101906200023d919062000b1a565b62000884565b6040516200025392919062000c66565b60405180910390f35b6200026662000949565b60405162000275919062000c07565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620003e9578091505062000451565b6000620003f6846200096d565b91505060006200040685620009e3565b9050600060ff60f81b308484805190602001206040516020016200042e949392919062000d59565b6040516020818303038152906040528051906020012090508060001c9450505050505b919050565b600081600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200052a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005219062000e10565b60405180910390fd5b8262000536816200027e565b1562000579576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005709062000e82565b60405180910390fd5b60008062000587866200096d565b9150915060006200059887620009e3565b9050620005a6828262000a89565b955060018060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555085600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018360001c0160001b6000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1bd7b67c90068c779f5700cbfefe89aea540a111a3eea6c228fd9d2b5d74a92a85858a604051620007aa9392919062000ea4565b60405180910390a35050505050919050565b6000620007c93362000456565b905090565b6000620007db826200027e565b6200081d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008149062000f31565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200092e57806001925092505062000944565b620009398462000345565b905080600092509250505b915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491508282604051602001620009c692919062000f53565b604051602081830303815290604052805190602001209050915091565b606060405180602001620009f79062000aa2565b6020820181038252601f19601f820116604052507f0000000000000000000000000000000000000000000000000000000000000000836040518060200160405280600081525060405160200162000a519392919062001024565b60405160208183030381529060405260405160200162000a73929190620010aa565b6040516020818303038152906040529050919050565b60008060208301835185818385f5935050505092915050565b610eaa80620010d383390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ae28262000ab5565b9050919050565b62000af48162000ad5565b811462000b0057600080fd5b50565b60008135905062000b148162000ae9565b92915050565b60006020828403121562000b335762000b3262000ab0565b5b600062000b438482850162000b03565b91505092915050565b60008115159050919050565b62000b638162000b4c565b82525050565b600060208201905062000b80600083018462000b58565b92915050565b6000819050919050565b62000b9b8162000b86565b82525050565b600060208201905062000bb8600083018462000b90565b92915050565b6000819050919050565b62000bd38162000bbe565b82525050565b600060208201905062000bf0600083018462000bc8565b92915050565b62000c018162000ad5565b82525050565b600060208201905062000c1e600083018462000bf6565b92915050565b600062000c318262000ab5565b9050919050565b62000c438162000c24565b82525050565b600060208201905062000c60600083018462000c38565b92915050565b600060408201905062000c7d600083018562000bf6565b62000c8c602083018462000b58565b9392505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b62000cde62000cd88262000c93565b62000cbf565b82525050565b60008160601b9050919050565b600062000cfe8262000ce4565b9050919050565b600062000d128262000cf1565b9050919050565b62000d2e62000d288262000ad5565b62000d05565b82525050565b6000819050919050565b62000d5362000d4d8262000b86565b62000d34565b82525050565b600062000d67828762000cc9565b60018201915062000d79828662000d19565b60148201915062000d8b828562000d3e565b60208201915062000d9d828462000d3e565b60208201915081905095945050505050565b600082825260208201905092915050565b7f4f707350726f7879466163746f72793a204f6e652070726f7879000000000000600082015250565b600062000df8601a8362000daf565b915062000e058262000dc0565b602082019050919050565b6000602082019050818103600083015262000e2b8162000de9565b9050919050565b7f4f707350726f7879466163746f72793a204e6f2070726f787900000000000000600082015250565b600062000e6a60198362000daf565b915062000e778262000e32565b602082019050919050565b6000602082019050818103600083015262000e9d8162000e5b565b9050919050565b600060608201905062000ebb600083018662000b90565b62000eca602083018562000b90565b62000ed9604083018462000bf6565b949350505050565b7f4f707350726f7879466163746f72793a204e6f742070726f7879000000000000600082015250565b600062000f19601a8362000daf565b915062000f268262000ee1565b602082019050919050565b6000602082019050818103600083015262000f4c8162000f0a565b9050919050565b600060408201905062000f6a600083018562000bf6565b62000f79602083018462000b90565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000fbc57808201518184015260208101905062000f9f565b8381111562000fcc576000848401525b50505050565b6000601f19601f8301169050919050565b600062000ff08262000f80565b62000ffc818562000f8b565b93506200100e81856020860162000f9c565b620010198162000fd2565b840191505092915050565b60006060820190506200103b600083018662000bf6565b6200104a602083018562000bf6565b81810360408301526200105e818462000fe3565b9050949350505050565b600081905092915050565b6000620010808262000f80565b6200108c818562001068565b93506200109e81856020860162000f9c565b80840191505092915050565b6000620010b8828562001073565b9150620010c6828462001073565b9150819050939250505056fe608060405260405162000eaa38038062000eaa833981810160405281019062000029919062000450565b8282826200003e83826200005b60201b60201c565b6200004f826200019060201b60201c565b50505050505062000531565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc549050827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc558273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829660405160405180910390a36000825111156200018b5760008373ffffffffffffffffffffffffffffffffffffffff168360405162000132919062000518565b600060405180830381855af49150503d80600081146200016f576040519150601f19603f3d011682016040523d82523d6000602084013e62000174565b606091505b505090508062000189573d806000803e806000fd5b505b505050565b6000620001a26200022560201b60201c565b9050817fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103558173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fdf435d422321da6b195902d70fc417c06a32f88379c20dd8f2a8da07088cec2960405160405180910390a35050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200028f8262000262565b9050919050565b620002a18162000282565b8114620002ad57600080fd5b50565b600081519050620002c18162000296565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200031c82620002d1565b810181811067ffffffffffffffff821117156200033e576200033d620002e2565b5b80604052505050565b6000620003536200024e565b905062000361828262000311565b919050565b600067ffffffffffffffff821115620003845762000383620002e2565b5b6200038f82620002d1565b9050602081019050919050565b60005b83811015620003bc5780820151818401526020810190506200039f565b83811115620003cc576000848401525b50505050565b6000620003e9620003e38462000366565b62000347565b905082815260208101848484011115620004085762000407620002cc565b5b620004158482856200039c565b509392505050565b600082601f830112620004355762000434620002c7565b5b815162000447848260208601620003d2565b91505092915050565b6000806000606084860312156200046c576200046b62000258565b5b60006200047c86828701620002b0565b93505060206200048f86828701620002b0565b925050604084015167ffffffffffffffff811115620004b357620004b26200025d565b5b620004c1868287016200041d565b9150509250925092565b600081519050919050565b600081905092915050565b6000620004ee82620004cb565b620004fa8185620004d6565b93506200050c8185602086016200039c565b80840191505092915050565b6000620005268284620004e1565b915081905092915050565b61096980620005416000396000f3fe6080604052600436106100435760003560e01c806301ffc9a71461005c5780633659cfe6146100995780633e47158c146100c25780634f1ef286146100ed57610052565b3661005257610050610109565b005b61005a610109565b005b34801561006857600080fd5b50610083600480360381019061007e91906105c5565b610152565b604051610090919061060d565b60405180910390f35b3480156100a557600080fd5b506100c060048036038101906100bb9190610686565b6102a3565b005b3480156100ce57600080fd5b506100d7610334565b6040516100e491906106c2565b60405180910390f35b61010760048036038101906101029190610742565b610343565b005b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc543660008037600080366000845af43d806000803e816000811461014d57816000f35b816000fd5b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101ad5750637f5828d060e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156101bb576001905061029e565b63ffffffff60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036101f1576000905061029e565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a7846040518263ffffffff1660e01b815260040161025091906107b1565b602060405180830381865afa92505050801561028a57506040513d601f19601f8201168201806040525081019061028791906107f8565b60015b61029857600091505061029e565b80925050505b919050565b6102ab61040b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030f90610882565b60405180910390fd5b6103318160405180602001604052806000815250610434565b50565b600061033e61040b565b905090565b61034b61040b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103af90610882565b60405180910390fd5b6104068383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610434565b505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc549050827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc558273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829660405160405180910390a360008251111561055e5760008373ffffffffffffffffffffffffffffffffffffffff1683604051610508919061091c565b600060405180830381855af49150503d8060008114610543576040519150601f19603f3d011682016040523d82523d6000602084013e610548565b606091505b505090508061055c573d806000803e806000fd5b505b505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6105a28161056d565b81146105ad57600080fd5b50565b6000813590506105bf81610599565b92915050565b6000602082840312156105db576105da610563565b5b60006105e9848285016105b0565b91505092915050565b60008115159050919050565b610607816105f2565b82525050565b600060208201905061062260008301846105fe565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061065382610628565b9050919050565b61066381610648565b811461066e57600080fd5b50565b6000813590506106808161065a565b92915050565b60006020828403121561069c5761069b610563565b5b60006106aa84828501610671565b91505092915050565b6106bc81610648565b82525050565b60006020820190506106d760008301846106b3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610702576107016106dd565b5b8235905067ffffffffffffffff81111561071f5761071e6106e2565b5b60208301915083600182028301111561073b5761073a6106e7565b5b9250929050565b60008060006040848603121561075b5761075a610563565b5b600061076986828701610671565b935050602084013567ffffffffffffffff81111561078a57610789610568565b5b610796868287016106ec565b92509250509250925092565b6107ab8161056d565b82525050565b60006020820190506107c660008301846107a2565b92915050565b6107d5816105f2565b81146107e057600080fd5b50565b6000815190506107f2816107cc565b92915050565b60006020828403121561080e5761080d610563565b5b600061081c848285016107e3565b91505092915050565b600082825260208201905092915050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b600061086c600e83610825565b915061087782610836565b602082019050919050565b6000602082019050818103600083015261089b8161085f565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156108d65780820151818401526020810190506108bb565b838111156108e5576000848401525b50505050565b60006108f6826108a2565b61090081856108ad565b93506109108185602086016108b8565b80840191505092915050565b600061092882846108eb565b91508190509291505056fea26469706673582212206e91ee918eaf2d72006259ead94f89e030de6bc632993a508e2fef49a677f85c64736f6c634300080e0033a2646970667358221220a86b6d2e1229f333577eec3bcf9d70648b3925768ef88eae26abce869aba87f964736f6c634300080e0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c806374912cd2116200006f57806374912cd21462000197578063775c300c14620001cd578063bd4972c314620001ef578063ded89a7c1462000225578063e70abe92146200025c57620000ac565b80632971038814620000b157806337a6be1614620000e757806354fd4d50146200011d5780635c60da1b146200013f578063606aa7151462000161575b600080fd5b620000cf6004803603810190620000c9919062000b1a565b6200027e565b604051620000de919062000b69565b60405180910390f35b620001056004803603810190620000ff919062000b1a565b620002d4565b60405162000114919062000ba1565b60405180910390f35b620001276200031c565b60405162000136919062000bd9565b60405180910390f35b6200014962000321565b60405162000158919062000c07565b60405180910390f35b6200017f600480360381019062000179919062000b1a565b62000345565b6040516200018e919062000c07565b60405180910390f35b620001b56004803603810190620001af919062000b1a565b62000456565b604051620001c4919062000c49565b60405180910390f35b620001d7620007bc565b604051620001e6919062000c49565b60405180910390f35b6200020d600480360381019062000207919062000b1a565b620007ce565b6040516200021c919062000c07565b60405180910390f35b6200024360048036038101906200023d919062000b1a565b62000884565b6040516200025392919062000c66565b60405180910390f35b6200026662000949565b60405162000275919062000c07565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620003e9578091505062000451565b6000620003f6846200096d565b91505060006200040685620009e3565b9050600060ff60f81b308484805190602001206040516020016200042e949392919062000d59565b6040516020818303038152906040528051906020012090508060001c9450505050505b919050565b600081600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200052a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005219062000e10565b60405180910390fd5b8262000536816200027e565b1562000579576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005709062000e82565b60405180910390fd5b60008062000587866200096d565b9150915060006200059887620009e3565b9050620005a6828262000a89565b955060018060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555085600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018360001c0160001b6000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1bd7b67c90068c779f5700cbfefe89aea540a111a3eea6c228fd9d2b5d74a92a85858a604051620007aa9392919062000ea4565b60405180910390a35050505050919050565b6000620007c93362000456565b905090565b6000620007db826200027e565b6200081d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008149062000f31565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200092e57806001925092505062000944565b620009398462000345565b905080600092509250505b915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491508282604051602001620009c692919062000f53565b604051602081830303815290604052805190602001209050915091565b606060405180602001620009f79062000aa2565b6020820181038252601f19601f820116604052507f0000000000000000000000000000000000000000000000000000000000000000836040518060200160405280600081525060405160200162000a519392919062001024565b60405160208183030381529060405260405160200162000a73929190620010aa565b6040516020818303038152906040529050919050565b60008060208301835185818385f5935050505092915050565b610eaa80620010d383390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ae28262000ab5565b9050919050565b62000af48162000ad5565b811462000b0057600080fd5b50565b60008135905062000b148162000ae9565b92915050565b60006020828403121562000b335762000b3262000ab0565b5b600062000b438482850162000b03565b91505092915050565b60008115159050919050565b62000b638162000b4c565b82525050565b600060208201905062000b80600083018462000b58565b92915050565b6000819050919050565b62000b9b8162000b86565b82525050565b600060208201905062000bb8600083018462000b90565b92915050565b6000819050919050565b62000bd38162000bbe565b82525050565b600060208201905062000bf0600083018462000bc8565b92915050565b62000c018162000ad5565b82525050565b600060208201905062000c1e600083018462000bf6565b92915050565b600062000c318262000ab5565b9050919050565b62000c438162000c24565b82525050565b600060208201905062000c60600083018462000c38565b92915050565b600060408201905062000c7d600083018562000bf6565b62000c8c602083018462000b58565b9392505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b62000cde62000cd88262000c93565b62000cbf565b82525050565b60008160601b9050919050565b600062000cfe8262000ce4565b9050919050565b600062000d128262000cf1565b9050919050565b62000d2e62000d288262000ad5565b62000d05565b82525050565b6000819050919050565b62000d5362000d4d8262000b86565b62000d34565b82525050565b600062000d67828762000cc9565b60018201915062000d79828662000d19565b60148201915062000d8b828562000d3e565b60208201915062000d9d828462000d3e565b60208201915081905095945050505050565b600082825260208201905092915050565b7f4f707350726f7879466163746f72793a204f6e652070726f7879000000000000600082015250565b600062000df8601a8362000daf565b915062000e058262000dc0565b602082019050919050565b6000602082019050818103600083015262000e2b8162000de9565b9050919050565b7f4f707350726f7879466163746f72793a204e6f2070726f787900000000000000600082015250565b600062000e6a60198362000daf565b915062000e778262000e32565b602082019050919050565b6000602082019050818103600083015262000e9d8162000e5b565b9050919050565b600060608201905062000ebb600083018662000b90565b62000eca602083018562000b90565b62000ed9604083018462000bf6565b949350505050565b7f4f707350726f7879466163746f72793a204e6f742070726f7879000000000000600082015250565b600062000f19601a8362000daf565b915062000f268262000ee1565b602082019050919050565b6000602082019050818103600083015262000f4c8162000f0a565b9050919050565b600060408201905062000f6a600083018562000bf6565b62000f79602083018462000b90565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000fbc57808201518184015260208101905062000f9f565b8381111562000fcc576000848401525b50505050565b6000601f19601f8301169050919050565b600062000ff08262000f80565b62000ffc818562000f8b565b93506200100e81856020860162000f9c565b620010198162000fd2565b840191505092915050565b60006060820190506200103b600083018662000bf6565b6200104a602083018562000bf6565b81810360408301526200105e818462000fe3565b9050949350505050565b600081905092915050565b6000620010808262000f80565b6200108c818562001068565b93506200109e81856020860162000f9c565b80840191505092915050565b6000620010b8828562001073565b9150620010c6828462001073565b9150819050939250505056fe608060405260405162000eaa38038062000eaa833981810160405281019062000029919062000450565b8282826200003e83826200005b60201b60201c565b6200004f826200019060201b60201c565b50505050505062000531565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc549050827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc558273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829660405160405180910390a36000825111156200018b5760008373ffffffffffffffffffffffffffffffffffffffff168360405162000132919062000518565b600060405180830381855af49150503d80600081146200016f576040519150601f19603f3d011682016040523d82523d6000602084013e62000174565b606091505b505090508062000189573d806000803e806000fd5b505b505050565b6000620001a26200022560201b60201c565b9050817fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103558173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fdf435d422321da6b195902d70fc417c06a32f88379c20dd8f2a8da07088cec2960405160405180910390a35050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200028f8262000262565b9050919050565b620002a18162000282565b8114620002ad57600080fd5b50565b600081519050620002c18162000296565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200031c82620002d1565b810181811067ffffffffffffffff821117156200033e576200033d620002e2565b5b80604052505050565b6000620003536200024e565b905062000361828262000311565b919050565b600067ffffffffffffffff821115620003845762000383620002e2565b5b6200038f82620002d1565b9050602081019050919050565b60005b83811015620003bc5780820151818401526020810190506200039f565b83811115620003cc576000848401525b50505050565b6000620003e9620003e38462000366565b62000347565b905082815260208101848484011115620004085762000407620002cc565b5b620004158482856200039c565b509392505050565b600082601f830112620004355762000434620002c7565b5b815162000447848260208601620003d2565b91505092915050565b6000806000606084860312156200046c576200046b62000258565b5b60006200047c86828701620002b0565b93505060206200048f86828701620002b0565b925050604084015167ffffffffffffffff811115620004b357620004b26200025d565b5b620004c1868287016200041d565b9150509250925092565b600081519050919050565b600081905092915050565b6000620004ee82620004cb565b620004fa8185620004d6565b93506200050c8185602086016200039c565b80840191505092915050565b6000620005268284620004e1565b915081905092915050565b61096980620005416000396000f3fe6080604052600436106100435760003560e01c806301ffc9a71461005c5780633659cfe6146100995780633e47158c146100c25780634f1ef286146100ed57610052565b3661005257610050610109565b005b61005a610109565b005b34801561006857600080fd5b50610083600480360381019061007e91906105c5565b610152565b604051610090919061060d565b60405180910390f35b3480156100a557600080fd5b506100c060048036038101906100bb9190610686565b6102a3565b005b3480156100ce57600080fd5b506100d7610334565b6040516100e491906106c2565b60405180910390f35b61010760048036038101906101029190610742565b610343565b005b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc543660008037600080366000845af43d806000803e816000811461014d57816000f35b816000fd5b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101ad5750637f5828d060e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156101bb576001905061029e565b63ffffffff60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036101f1576000905061029e565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a7846040518263ffffffff1660e01b815260040161025091906107b1565b602060405180830381865afa92505050801561028a57506040513d601f19601f8201168201806040525081019061028791906107f8565b60015b61029857600091505061029e565b80925050505b919050565b6102ab61040b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030f90610882565b60405180910390fd5b6103318160405180602001604052806000815250610434565b50565b600061033e61040b565b905090565b61034b61040b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103af90610882565b60405180910390fd5b6104068383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610434565b505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc549050827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc558273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829660405160405180910390a360008251111561055e5760008373ffffffffffffffffffffffffffffffffffffffff1683604051610508919061091c565b600060405180830381855af49150503d8060008114610543576040519150601f19603f3d011682016040523d82523d6000602084013e610548565b606091505b505090508061055c573d806000803e806000fd5b505b505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6105a28161056d565b81146105ad57600080fd5b50565b6000813590506105bf81610599565b92915050565b6000602082840312156105db576105da610563565b5b60006105e9848285016105b0565b91505092915050565b60008115159050919050565b610607816105f2565b82525050565b600060208201905061062260008301846105fe565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061065382610628565b9050919050565b61066381610648565b811461066e57600080fd5b50565b6000813590506106808161065a565b92915050565b60006020828403121561069c5761069b610563565b5b60006106aa84828501610671565b91505092915050565b6106bc81610648565b82525050565b60006020820190506106d760008301846106b3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610702576107016106dd565b5b8235905067ffffffffffffffff81111561071f5761071e6106e2565b5b60208301915083600182028301111561073b5761073a6106e7565b5b9250929050565b60008060006040848603121561075b5761075a610563565b5b600061076986828701610671565b935050602084013567ffffffffffffffff81111561078a57610789610568565b5b610796868287016106ec565b92509250509250925092565b6107ab8161056d565b82525050565b60006020820190506107c660008301846107a2565b92915050565b6107d5816105f2565b81146107e057600080fd5b50565b6000815190506107f2816107cc565b92915050565b60006020828403121561080e5761080d610563565b5b600061081c848285016107e3565b91505092915050565b600082825260208201905092915050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b600061086c600e83610825565b915061087782610836565b602082019050919050565b6000602082019050818103600083015261089b8161085f565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156108d65780820151818401526020810190506108bb565b838111156108e5576000848401525b50505050565b60006108f6826108a2565b61090081856108ad565b93506109108185602086016108b8565b80840191505092915050565b600061092882846108eb565b91508190509291505056fea26469706673582212206e91ee918eaf2d72006259ead94f89e030de6bc632993a508e2fef49a677f85c64736f6c634300080e0033a2646970667358221220a86b6d2e1229f333577eec3bcf9d70648b3925768ef88eae26abce869aba87f964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy()": {
        "returns": {
          "proxy": "Address of deployed proxy."
        }
      },
      "deployFor(address)": {
        "params": {
          "owner": "Address to deploy the proxy for."
        },
        "returns": {
          "proxy": "Address of deployed proxy."
        }
      },
      "determineProxyAddress(address)": {
        "params": {
          "account": "Address to determine the proxy address for."
        }
      },
      "getNextSeed(address)": {
        "returns": {
          "_0": "bytes32 Next seed which will be used for deployment for an address."
        }
      },
      "getOwnerOf(address)": {
        "returns": {
          "_0": "address Owner of deployed proxy."
        }
      },
      "getProxyOf(address)": {
        "returns": {
          "_0": "address Proxy address owned by account.",
          "_1": "bool Whether if proxy is deployed"
        }
      },
      "isProxy(address)": {
        "returns": {
          "_0": "bool Whether if a contract is an OpsProxy."
        }
      }
    },
    "stateVariables": {
      "_nextSeeds": {
        "details": "track the next seed to be used by an EOA."
      },
      "_ownerOf": {
        "details": "track owner of proxy"
      },
      "_proxies": {
        "details": "track deployed proxies"
      },
      "_proxyOf": {
        "details": "track proxy of user"
      },
      "version": {
        "return": "uint256 version of OpsProxyFactory.",
        "returns": {
          "_0": "uint256 version of OpsProxyFactory."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DeployProxy(address,address,bytes32,bytes32,address)": {
        "notice": "Emitted when an OpsProxy is deployed."
      }
    },
    "kind": "user",
    "methods": {
      "deploy()": {
        "notice": "Deploys OpsProxy for the msg.sender."
      },
      "deployFor(address)": {
        "notice": "Deploys OpsProxy for another address."
      },
      "determineProxyAddress(address)": {
        "notice": "Determines the OpsProxy address when it is not deployed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4081,
        "contract": "contracts/opsProxy/OpsProxyFactory.sol:OpsProxyFactory",
        "label": "_nextSeeds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 4086,
        "contract": "contracts/opsProxy/OpsProxyFactory.sol:OpsProxyFactory",
        "label": "_proxies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4091,
        "contract": "contracts/opsProxy/OpsProxyFactory.sol:OpsProxyFactory",
        "label": "_proxyOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4096,
        "contract": "contracts/opsProxy/OpsProxyFactory.sol:OpsProxyFactory",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}
