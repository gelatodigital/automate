{
  "address": "0x28DEF88a5225fD50cdD081306bE18FA7368e59f9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_startTime",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_interval",
          "type": "bytes"
        }
      ],
      "name": "encodeModuleArg",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "execAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_arg",
          "type": "bytes"
        }
      ],
      "name": "onCreateTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "taskCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "execData",
          "type": "bytes"
        }
      ],
      "name": "postExecTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_execData",
          "type": "bytes"
        }
      ],
      "name": "preExecTask",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "taskCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LibDataTypes.Module",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "taskModuleAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "timedTask",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "nextExec",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "interval",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2b092e9c63f774803d437df09d8c5c284ddf1a438a963c5fe5ac8fd1593d8c3",
  "receipt": {
    "to": null,
    "from": "0xCDf41a135C65d0013393B3793F92b4FAF31032d0",
    "contractAddress": "0x28DEF88a5225fD50cdD081306bE18FA7368e59f9",
    "transactionIndex": 9,
    "gasUsed": "880127",
    "logsBloom": "0x
    "blockHash": "0x5e1d832195cd553ff418d97811ae8e6be2aff3bd40930eeaa77aa3bc1ffad505",
    "transactionHash": "0xf2b092e9c63f774803d437df09d8c5c284ddf1a438a963c5fe5ac8fd1593d8c3",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 26873155,
        "transactionHash": "0xf2b092e9c63f774803d437df09d8c5c284ddf1a438a963c5fe5ac8fd1593d8c3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cdf41a135c65d0013393b3793f92b4faf31032d0",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000795244cb0efc0000000000000000000000000000000000000000000000003b273cc12c8b644f9000000000000000000000000000000000000000000000f3c2add04467cafa1f0000000000000000000000000000000000000000000000003b26c36ee7c055539000000000000000000000000000000000000000000000f3c2ae4996ac96091b0",
        "logIndex": 26,
        "blockHash": "0x5e1d832195cd553ff418d97811ae8e6be2aff3bd40930eeaa77aa3bc1ffad505"
      }
    ],
    "blockNumber": 26873155,
    "cumulativeGasUsed": "2080824",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ec5e7c52a427c068bbd33ab52da213bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_startTime\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_interval\",\"type\":\"bytes\"}],\"name\":\"encodeModuleArg\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"execAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_arg\",\"type\":\"bytes\"}],\"name\":\"onCreateTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taskCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"execData\",\"type\":\"bytes\"}],\"name\":\"postExecTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_execData\",\"type\":\"bytes\"}],\"name\":\"preExecTask\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"taskCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LibDataTypes.Module\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"taskModuleAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"timedTask\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"nextExec\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interval\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"encodeModuleArg(address,bytes)\":{\"params\":{\"_interval\":\"Time interval between each execution.\",\"_startTime\":\"Time when the first execution should occur.\"}},\"onCreateTask(bytes32,address,address,bytes,bytes)\":{\"params\":{\"execAddress\":\"Address of contract that should be called.\",\"execData\":\"Execution data to be called with / function selector if execution data is yet to be determined.\",\"initModuleArg\":\"Encoded arguments for module if any.\",\"taskCreator\":\"The address which created the task.\",\"taskId\":\"Unique hash of the task created.\"}},\"postExecTask(bytes32,address,address,bytes)\":{\"params\":{\"execAddress\":\"Address of contract that should be called.\",\"execData\":\"Execution data to be called with / function selector if execution data is yet to be determined.\",\"taskCreator\":\"The address which created the task.\",\"taskId\":\"Unique hash of the task created.\"}},\"preExecTask(bytes32,address,address,bytes)\":{\"details\":\"Time is updated at preExec because if SingleExec is used concurrently, it will delete timedTask.\",\"params\":{\"execAddress\":\"Address of contract that should be called.\",\"execData\":\"Execution data to be called with / function selector if execution data is yet to be determined.\",\"taskCreator\":\"The address which created the task.\",\"taskId\":\"Unique hash of the task created.\"},\"returns\":{\"_0\":\"address Overriden or original execution address\",\"_1\":\"bytes Overriden or original execution data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeModuleArg(address,bytes)\":{\"notice\":\"Helper function to encode arguments for TimeModule.\"},\"onCreateTask(bytes32,address,address,bytes,bytes)\":{\"notice\":\"Initiates task module whenever `createTask` is being called.\"},\"postExecTask(bytes32,address,address,bytes)\":{\"notice\":\"Called during `exec` and after execAddress is called.\"},\"preExecTask(bytes32,address,address,bytes)\":{\"notice\":\"Called during `exec` and before execAddress is being called.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/taskModules/TimeModule.sol\":\"TimeModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/OpsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibDataTypes} from \\\"./libraries/LibDataTypes.sol\\\";\\n\\n/**\\n * @notice Storage layout of Ops smart contract.\\n */\\n// solhint-disable max-states-count\\nabstract contract OpsStorage {\\n    mapping(bytes32 => address) public taskCreator; ///@dev Deprecated\\n    mapping(bytes32 => address) public execAddresses; ///@dev Deprecated\\n    mapping(address => EnumerableSet.Bytes32Set) internal _createdTasks;\\n\\n    uint256 public fee;\\n    address public feeToken;\\n\\n    ///@dev Appended State\\n    mapping(bytes32 => LibDataTypes.Time) public timedTask;\\n    mapping(LibDataTypes.Module => address) public taskModuleAddresses;\\n}\\n\",\"keccak256\":\"0x9437f759bed13c3f6df0f8737530bf1714e5444169705df2bedd85efdc5bd705\",\"license\":\"UNLICENSED\"},\"contracts/functions/FExec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport {GelatoBytes} from \\\"../vendor/gelato/GelatoBytes.sol\\\";\\n\\n// solhint-disable private-vars-leading-underscore\\n// solhint-disable func-visibility\\n\\nfunction _call(\\n    address _add,\\n    bytes memory _data,\\n    uint256 _value,\\n    bool _revertOnFailure,\\n    string memory _tracingInfo\\n) returns (bool success, bytes memory returnData) {\\n    (success, returnData) = _add.call{value: _value}(_data);\\n\\n    if (!success && _revertOnFailure)\\n        GelatoBytes.revertWithError(returnData, _tracingInfo);\\n}\\n\\nfunction _delegateCall(\\n    address _add,\\n    bytes memory _data,\\n    string memory _tracingInfo\\n) returns (bool success, bytes memory returnData) {\\n    (success, returnData) = _add.delegatecall(_data);\\n\\n    if (!success) GelatoBytes.revertWithError(returnData, _tracingInfo);\\n}\\n\",\"keccak256\":\"0x48375d0645cf4dfe7d3f18dc727cbb2322a09233a2e9cce9352a73acc357bf07\",\"license\":\"MIT\"},\"contracts/interfaces/ITaskModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\n// solhint-disable max-line-length\\ninterface ITaskModule {\\n    /**\\n     * @notice Initiates task module whenever `createTask` is being called.\\n     *\\n     * @param taskId Unique hash of the task created.\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called.\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\n     * @param initModuleArg Encoded arguments for module if any.\\n     */\\n    function onCreateTask(\\n        bytes32 taskId,\\n        address taskCreator,\\n        address execAddress,\\n        bytes calldata execData,\\n        bytes calldata initModuleArg\\n    ) external;\\n\\n    /**\\n     * @notice Called during `exec` and before execAddress is being called.\\n     *\\n     * @param taskId Unique hash of the task created.\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called.\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\n     *\\n     * @return address Overriden or original execution address\\n     * @return bytes Overriden or original execution data\\n     */\\n    function preExecTask(\\n        bytes32 taskId,\\n        address taskCreator,\\n        address execAddress,\\n        bytes calldata execData\\n    ) external returns (address, bytes memory);\\n\\n    /**\\n     * @notice Called during `exec` and after execAddress is called.\\n     *\\n     * @param taskId Unique hash of the task created.\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that should be called.\\n     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.\\n     */\\n    function postExecTask(\\n        bytes32 taskId,\\n        address taskCreator,\\n        address execAddress,\\n        bytes calldata execData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeb783117b941a8dea16c8c8789a0fa1c0b5d28f05d1245fa4704da516d2536f7\",\"license\":\"MIT\"},\"contracts/libraries/LibDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\n// solhint-disable max-line-length\\nlibrary LibDataTypes {\\n    /**\\n     * @notice Whitelisted modules that are available for users to customise conditions and specifications of their tasks.\\n     *\\n     * @param RESOLVER Use dynamic condition & input data for execution. {See ResolverModule.sol}\\n     * @param TIME Repeated execution of task at a specified timing and interval. {See TimeModule.sol}\\n     * @param PROXY Creates a dedicated caller (msg.sender) to be used when executing the task. {See ProxyModule.sol}\\n     * @param SINGLE_EXEC Task is cancelled after one execution. {See SingleExecModule.sol}\\n     */\\n    enum Module {\\n        RESOLVER,\\n        TIME,\\n        PROXY,\\n        SINGLE_EXEC\\n    }\\n\\n    /**\\n     * @notice Struct to contain modules and their relative arguments that are used for task creation.\\n     *\\n     * @param modules List of selected modules.\\n     * @param args Arguments of modules if any. Pass \\\"0x\\\" for modules which does not require args {See encodeModuleArg}\\n     */\\n    struct ModuleData {\\n        Module[] modules;\\n        bytes[] args;\\n    }\\n\\n    /**\\n     * @notice Struct for time module.\\n     *\\n     * @param nextExec Time when the next execution should occur.\\n     * @param interval Time interval between each execution.\\n     */\\n    struct Time {\\n        uint128 nextExec;\\n        uint128 interval;\\n    }\\n}\\n\",\"keccak256\":\"0x51822b759b6066c148adb18620e888ec4b4353b58678a5ebd4ba1cc10cff83b8\",\"license\":\"MIT\"},\"contracts/libraries/LibEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport {LibDataTypes} from \\\"./LibDataTypes.sol\\\";\\n\\nlibrary LibEvents {\\n    /**\\n     * @notice Emitted when `createTask` is called.\\n     *\\n     * @param taskCreator The address which created the task.\\n     * @param execAddress Address of contract that is called by Gelato.\\n     * @param execDataOrSelector Execution data / function selector.\\n     * @param moduleData Conditional modules used. {See LibDataTypes-ModuleData}\\n     * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...\\n     * @param taskId Unique hash of the task. {See LibTaskId-getTaskId}\\n     */\\n    event TaskCreated(\\n        address indexed taskCreator,\\n        address indexed execAddress,\\n        bytes execDataOrSelector,\\n        LibDataTypes.ModuleData moduleData,\\n        address feeToken,\\n        bytes32 indexed taskId\\n    );\\n\\n    /**\\n     * @notice Emitted when `cancelTask` is called.\\n     *\\n     * @param taskId Unique hash of the task. {See LibTaskId-getTaskId}\\n     * @param taskCreator The address which owned the task.\\n     */\\n    event TaskCancelled(bytes32 taskId, address taskCreator);\\n\\n    /**\\n     * @notice Emitted when `exec` is called.\\n     *\\n     * @param txFee Fee paid to Gelato for execution\\n     * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...\\n     * @param execAddress Address of contract that will be called by Gelato.\\n     * @param execData Execution data / function selector.\\n     * @param taskId Unique hash of the task. {See LibTaskId-getTaskId}\\n     * @param callSuccess Status of the call to execAddress.\\n     */\\n    event ExecSuccess(\\n        uint256 indexed txFee,\\n        address indexed feeToken,\\n        address indexed execAddress,\\n        bytes execData,\\n        bytes32 taskId,\\n        bool callSuccess\\n    );\\n\\n    /**\\n     * @notice Emitted when TimeModule is initialised.\\n     *\\n     * @param taskId Unique hash of the task. {See LibTaskId-getTaskId}\\n     * @param nextExec Time when the next execution will occur.\\n     * @param interval Time interval between each execution.\\n     */\\n    event TimerSet(\\n        bytes32 indexed taskId,\\n        uint128 indexed nextExec,\\n        uint128 indexed interval\\n    );\\n}\\n\",\"keccak256\":\"0x9b323ae92e046ff9fa10031abb70d748fc25cfa7b2d829d0a1d3bf4da220f05b\",\"license\":\"MIT\"},\"contracts/taskModules/TaskModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.12;\\n\\nimport {OpsStorage} from \\\"../OpsStorage.sol\\\";\\nimport {_call} from \\\"../functions/FExec.sol\\\";\\nimport {ITaskModule} from \\\"../interfaces/ITaskModule.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\nabstract contract TaskModuleBase is OpsStorage, ITaskModule {\\n    ///@inheritdoc ITaskModule\\n    function onCreateTask(\\n        bytes32,\\n        address,\\n        address,\\n        bytes calldata,\\n        bytes calldata\\n    ) external virtual override {}\\n\\n    ///@inheritdoc ITaskModule\\n    function preExecTask(\\n        bytes32,\\n        address,\\n        address _execAddress,\\n        bytes calldata _execData\\n    ) external virtual override returns (address, bytes memory) {\\n        return (_execAddress, _execData);\\n    }\\n\\n    ///@inheritdoc ITaskModule\\n    function postExecTask(\\n        bytes32 taskId,\\n        address taskCreator,\\n        address execAddress,\\n        bytes calldata execData\\n    ) external virtual override {}\\n}\\n\",\"keccak256\":\"0x726b19266d693e5a1774e5a2a809573678920f5cdbb025ed6100cdc12b47d2bc\",\"license\":\"UNLICENSED\"},\"contracts/taskModules/TimeModule.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.12;\\n\\nimport {OpsStorage} from \\\"../OpsStorage.sol\\\";\\nimport {TaskModuleBase} from \\\"./TaskModuleBase.sol\\\";\\nimport {LibDataTypes} from \\\"../libraries/LibDataTypes.sol\\\";\\nimport {LibEvents} from \\\"../libraries/LibEvents.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\ncontract TimeModule is TaskModuleBase {\\n    ///@inheritdoc TaskModuleBase\\n    function onCreateTask(\\n        bytes32 _taskId,\\n        address,\\n        address,\\n        bytes calldata,\\n        bytes calldata _arg\\n    ) external override {\\n        (uint128 startTime, uint128 interval) = _decodeModuleArg(_arg);\\n\\n        uint128 nextExec = uint256(startTime) > block.timestamp\\n            ? startTime\\n            : uint128(block.timestamp);\\n\\n        timedTask[_taskId] = LibDataTypes.Time(nextExec, interval);\\n\\n        emit LibEvents.TimerSet(_taskId, nextExec, interval);\\n    }\\n\\n    /**\\n     * @inheritdoc TaskModuleBase\\n     * @dev Time is updated at preExec because if\\n     * SingleExec is used concurrently, it will delete timedTask.\\n     */\\n    function preExecTask(\\n        bytes32 _taskId,\\n        address,\\n        address _execAddress,\\n        bytes calldata _execData\\n    ) external override returns (address, bytes memory) {\\n        LibDataTypes.Time memory time = timedTask[_taskId];\\n        bool isTimedTask = time.nextExec != 0;\\n\\n        if (isTimedTask) {\\n            require(\\n                time.nextExec <= uint128(block.timestamp),\\n                \\\"TimeModule: Too early\\\"\\n            );\\n\\n            uint128 timeDiff = uint128(block.timestamp) - time.nextExec;\\n            uint128 intervals = (timeDiff / time.interval) + 1;\\n\\n            timedTask[_taskId].nextExec =\\n                time.nextExec +\\n                (intervals * time.interval);\\n        }\\n        return (_execAddress, _execData);\\n    }\\n\\n    /**\\n     * @notice Helper function to encode arguments for TimeModule.\\n     *\\n     * @param _startTime Time when the first execution should occur.\\n     * @param _interval Time interval between each execution.\\n     */\\n    function encodeModuleArg(address _startTime, bytes calldata _interval)\\n        external\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(_startTime, _interval);\\n    }\\n\\n    function _decodeModuleArg(bytes calldata _arg)\\n        private\\n        pure\\n        returns (uint128 startTime, uint128 interval)\\n    {\\n        (startTime, interval) = abi.decode(_arg, (uint128, uint128));\\n    }\\n}\\n\",\"keccak256\":\"0x2dd6d5b94178f9ca9ef333dfb19e17c545fab1e2812c070b412f66dd5790b2dd\",\"license\":\"UNLICENSED\"},\"contracts/vendor/gelato/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ec59b2c6f678f3bbe186677e5970e59e46a40d22881dc813c49ffb18e417951\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610efd806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b0ccbdf011610066578063b0ccbdf01461016d578063b73944ed14610189578063b81cd866146101ba578063cd3d4fb9146101eb578063ddca3f431461021b5761009e565b80632e6e0bd0146100a3578063370f5760146100d35780633c706c6f146100ef578063647846a51461011f5780636d2dd29f1461013d575b600080fd5b6100bd60048036038101906100b8919061079a565b610239565b6040516100ca9190610808565b60405180910390f35b6100ed60048036038101906100e891906108b4565b61026c565b005b6101096004803603810190610104919061093c565b610273565b6040516101169190610a35565b60405180910390f35b6101276102a2565b6040516101349190610808565b60405180910390f35b6101576004803603810190610152919061079a565b6102c8565b6040516101649190610808565b60405180910390f35b61018760048036038101906101829190610a57565b6102fb565b005b6101a3600480360381019061019e91906108b4565b61045d565b6040516101b1929190610b13565b60405180910390f35b6101d460048036038101906101cf919061079a565b6106a4565b6040516101e2929190610b6e565b60405180910390f35b61020560048036038101906102009190610bbc565b610700565b6040516102129190610808565b60405180910390f35b610223610733565b6040516102309190610c02565b60405180910390f35b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5050505050565b606083838360405160200161028a93929190610c59565b60405160208183030381529060405290509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806103088484610739565b91509150600042836fffffffffffffffffffffffffffffffff161161032d574261032f565b825b90506040518060400160405280826fffffffffffffffffffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff16815250600560008c815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550905050816fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff168b7f857791ec95701b6fff966bff1b5ce9a86107aeabaf6d2fdfd89993aa0f084e3760405160405180910390a450505050505050505050565b600060606000600560008981526020019081526020016000206040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050905060008082600001516fffffffffffffffffffffffffffffffff1614159050801561064857426fffffffffffffffffffffffffffffffff1682600001516fffffffffffffffffffffffffffffffff1611156105a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059d90610ce8565b60405180910390fd5b60008260000151426105b89190610d37565b9050600060018460200151836105ce9190610d9a565b6105d89190610dcb565b90508360200151816105ea9190610e11565b84600001516105f99190610dcb565b600560008d815260200190815260200160002060000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505b86868681818080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905090509350935050509550959350505050565b60056020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600080838381019061074b9190610e87565b80925081935050509250929050565b600080fd5b600080fd5b6000819050919050565b61077781610764565b811461078257600080fd5b50565b6000813590506107948161076e565b92915050565b6000602082840312156107b0576107af61075a565b5b60006107be84828501610785565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107f2826107c7565b9050919050565b610802816107e7565b82525050565b600060208201905061081d60008301846107f9565b92915050565b61082c816107e7565b811461083757600080fd5b50565b60008135905061084981610823565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126108745761087361084f565b5b8235905067ffffffffffffffff81111561089157610890610854565b5b6020830191508360018202830111156108ad576108ac610859565b5b9250929050565b6000806000806000608086880312156108d0576108cf61075a565b5b60006108de88828901610785565b95505060206108ef8882890161083a565b94505060406109008882890161083a565b935050606086013567ffffffffffffffff8111156109215761092061075f565b5b61092d8882890161085e565b92509250509295509295909350565b6000806000604084860312156109555761095461075a565b5b60006109638682870161083a565b935050602084013567ffffffffffffffff8111156109845761098361075f565b5b6109908682870161085e565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156109d65780820151818401526020810190506109bb565b838111156109e5576000848401525b50505050565b6000601f19601f8301169050919050565b6000610a078261099c565b610a1181856109a7565b9350610a218185602086016109b8565b610a2a816109eb565b840191505092915050565b60006020820190508181036000830152610a4f81846109fc565b905092915050565b600080600080600080600060a0888a031215610a7657610a7561075a565b5b6000610a848a828b01610785565b9750506020610a958a828b0161083a565b9650506040610aa68a828b0161083a565b955050606088013567ffffffffffffffff811115610ac757610ac661075f565b5b610ad38a828b0161085e565b9450945050608088013567ffffffffffffffff811115610af657610af561075f565b5b610b028a828b0161085e565b925092505092959891949750929550565b6000604082019050610b2860008301856107f9565b8181036020830152610b3a81846109fc565b90509392505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610b6881610b43565b82525050565b6000604082019050610b836000830185610b5f565b610b906020830184610b5f565b9392505050565b60048110610ba457600080fd5b50565b600081359050610bb681610b97565b92915050565b600060208284031215610bd257610bd161075a565b5b6000610be084828501610ba7565b91505092915050565b6000819050919050565b610bfc81610be9565b82525050565b6000602082019050610c176000830184610bf3565b92915050565b82818337600083830152505050565b6000610c3883856109a7565b9350610c45838584610c1d565b610c4e836109eb565b840190509392505050565b6000604082019050610c6e60008301866107f9565b8181036020830152610c81818486610c2c565b9050949350505050565b600082825260208201905092915050565b7f54696d654d6f64756c653a20546f6f206561726c790000000000000000000000600082015250565b6000610cd2601583610c8b565b9150610cdd82610c9c565b602082019050919050565b60006020820190508181036000830152610d0181610cc5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4282610b43565b9150610d4d83610b43565b925082821015610d6057610d5f610d08565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610da582610b43565b9150610db083610b43565b925082610dc057610dbf610d6b565b5b828204905092915050565b6000610dd682610b43565b9150610de183610b43565b9250826fffffffffffffffffffffffffffffffff03821115610e0657610e05610d08565b5b828201905092915050565b6000610e1c82610b43565b9150610e2783610b43565b9250816fffffffffffffffffffffffffffffffff0483118215151615610e5057610e4f610d08565b5b828202905092915050565b610e6481610b43565b8114610e6f57600080fd5b50565b600081359050610e8181610e5b565b92915050565b60008060408385031215610e9e57610e9d61075a565b5b6000610eac85828601610e72565b9250506020610ebd85828601610e72565b915050925092905056fea26469706673582212201f7b4f87b1a8e11b9d7aa69ad7a20ed624dfe2acd535dbcb8e76f823b0c5c70e64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b0ccbdf011610066578063b0ccbdf01461016d578063b73944ed14610189578063b81cd866146101ba578063cd3d4fb9146101eb578063ddca3f431461021b5761009e565b80632e6e0bd0146100a3578063370f5760146100d35780633c706c6f146100ef578063647846a51461011f5780636d2dd29f1461013d575b600080fd5b6100bd60048036038101906100b8919061079a565b610239565b6040516100ca9190610808565b60405180910390f35b6100ed60048036038101906100e891906108b4565b61026c565b005b6101096004803603810190610104919061093c565b610273565b6040516101169190610a35565b60405180910390f35b6101276102a2565b6040516101349190610808565b60405180910390f35b6101576004803603810190610152919061079a565b6102c8565b6040516101649190610808565b60405180910390f35b61018760048036038101906101829190610a57565b6102fb565b005b6101a3600480360381019061019e91906108b4565b61045d565b6040516101b1929190610b13565b60405180910390f35b6101d460048036038101906101cf919061079a565b6106a4565b6040516101e2929190610b6e565b60405180910390f35b61020560048036038101906102009190610bbc565b610700565b6040516102129190610808565b60405180910390f35b610223610733565b6040516102309190610c02565b60405180910390f35b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5050505050565b606083838360405160200161028a93929190610c59565b60405160208183030381529060405290509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806103088484610739565b91509150600042836fffffffffffffffffffffffffffffffff161161032d574261032f565b825b90506040518060400160405280826fffffffffffffffffffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff16815250600560008c815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550905050816fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff168b7f857791ec95701b6fff966bff1b5ce9a86107aeabaf6d2fdfd89993aa0f084e3760405160405180910390a450505050505050505050565b600060606000600560008981526020019081526020016000206040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050905060008082600001516fffffffffffffffffffffffffffffffff1614159050801561064857426fffffffffffffffffffffffffffffffff1682600001516fffffffffffffffffffffffffffffffff1611156105a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059d90610ce8565b60405180910390fd5b60008260000151426105b89190610d37565b9050600060018460200151836105ce9190610d9a565b6105d89190610dcb565b90508360200151816105ea9190610e11565b84600001516105f99190610dcb565b600560008d815260200190815260200160002060000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505b86868681818080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905090509350935050509550959350505050565b60056020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600080838381019061074b9190610e87565b80925081935050509250929050565b600080fd5b600080fd5b6000819050919050565b61077781610764565b811461078257600080fd5b50565b6000813590506107948161076e565b92915050565b6000602082840312156107b0576107af61075a565b5b60006107be84828501610785565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107f2826107c7565b9050919050565b610802816107e7565b82525050565b600060208201905061081d60008301846107f9565b92915050565b61082c816107e7565b811461083757600080fd5b50565b60008135905061084981610823565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126108745761087361084f565b5b8235905067ffffffffffffffff81111561089157610890610854565b5b6020830191508360018202830111156108ad576108ac610859565b5b9250929050565b6000806000806000608086880312156108d0576108cf61075a565b5b60006108de88828901610785565b95505060206108ef8882890161083a565b94505060406109008882890161083a565b935050606086013567ffffffffffffffff8111156109215761092061075f565b5b61092d8882890161085e565b92509250509295509295909350565b6000806000604084860312156109555761095461075a565b5b60006109638682870161083a565b935050602084013567ffffffffffffffff8111156109845761098361075f565b5b6109908682870161085e565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156109d65780820151818401526020810190506109bb565b838111156109e5576000848401525b50505050565b6000601f19601f8301169050919050565b6000610a078261099c565b610a1181856109a7565b9350610a218185602086016109b8565b610a2a816109eb565b840191505092915050565b60006020820190508181036000830152610a4f81846109fc565b905092915050565b600080600080600080600060a0888a031215610a7657610a7561075a565b5b6000610a848a828b01610785565b9750506020610a958a828b0161083a565b9650506040610aa68a828b0161083a565b955050606088013567ffffffffffffffff811115610ac757610ac661075f565b5b610ad38a828b0161085e565b9450945050608088013567ffffffffffffffff811115610af657610af561075f565b5b610b028a828b0161085e565b925092505092959891949750929550565b6000604082019050610b2860008301856107f9565b8181036020830152610b3a81846109fc565b90509392505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610b6881610b43565b82525050565b6000604082019050610b836000830185610b5f565b610b906020830184610b5f565b9392505050565b60048110610ba457600080fd5b50565b600081359050610bb681610b97565b92915050565b600060208284031215610bd257610bd161075a565b5b6000610be084828501610ba7565b91505092915050565b6000819050919050565b610bfc81610be9565b82525050565b6000602082019050610c176000830184610bf3565b92915050565b82818337600083830152505050565b6000610c3883856109a7565b9350610c45838584610c1d565b610c4e836109eb565b840190509392505050565b6000604082019050610c6e60008301866107f9565b8181036020830152610c81818486610c2c565b9050949350505050565b600082825260208201905092915050565b7f54696d654d6f64756c653a20546f6f206561726c790000000000000000000000600082015250565b6000610cd2601583610c8b565b9150610cdd82610c9c565b602082019050919050565b60006020820190508181036000830152610d0181610cc5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4282610b43565b9150610d4d83610b43565b925082821015610d6057610d5f610d08565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610da582610b43565b9150610db083610b43565b925082610dc057610dbf610d6b565b5b828204905092915050565b6000610dd682610b43565b9150610de183610b43565b9250826fffffffffffffffffffffffffffffffff03821115610e0657610e05610d08565b5b828201905092915050565b6000610e1c82610b43565b9150610e2783610b43565b9250816fffffffffffffffffffffffffffffffff0483118215151615610e5057610e4f610d08565b5b828202905092915050565b610e6481610b43565b8114610e6f57600080fd5b50565b600081359050610e8181610e5b565b92915050565b60008060408385031215610e9e57610e9d61075a565b5b6000610eac85828601610e72565b9250506020610ebd85828601610e72565b915050925092905056fea26469706673582212201f7b4f87b1a8e11b9d7aa69ad7a20ed624dfe2acd535dbcb8e76f823b0c5c70e64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "encodeModuleArg(address,bytes)": {
        "params": {
          "_interval": "Time interval between each execution.",
          "_startTime": "Time when the first execution should occur."
        }
      },
      "onCreateTask(bytes32,address,address,bytes,bytes)": {
        "params": {
          "execAddress": "Address of contract that should be called.",
          "execData": "Execution data to be called with / function selector if execution data is yet to be determined.",
          "initModuleArg": "Encoded arguments for module if any.",
          "taskCreator": "The address which created the task.",
          "taskId": "Unique hash of the task created."
        }
      },
      "postExecTask(bytes32,address,address,bytes)": {
        "params": {
          "execAddress": "Address of contract that should be called.",
          "execData": "Execution data to be called with / function selector if execution data is yet to be determined.",
          "taskCreator": "The address which created the task.",
          "taskId": "Unique hash of the task created."
        }
      },
      "preExecTask(bytes32,address,address,bytes)": {
        "details": "Time is updated at preExec because if SingleExec is used concurrently, it will delete timedTask.",
        "params": {
          "execAddress": "Address of contract that should be called.",
          "execData": "Execution data to be called with / function selector if execution data is yet to be determined.",
          "taskCreator": "The address which created the task.",
          "taskId": "Unique hash of the task created."
        },
        "returns": {
          "_0": "address Overriden or original execution address",
          "_1": "bytes Overriden or original execution data"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeModuleArg(address,bytes)": {
        "notice": "Helper function to encode arguments for TimeModule."
      },
      "onCreateTask(bytes32,address,address,bytes,bytes)": {
        "notice": "Initiates task module whenever `createTask` is being called."
      },
      "postExecTask(bytes32,address,address,bytes)": {
        "notice": "Called during `exec` and after execAddress is called."
      },
      "preExecTask(bytes32,address,address,bytes)": {
        "notice": "Called during `exec` and before execAddress is being called."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2939,
        "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
        "label": "taskCreator",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2944,
        "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
        "label": "execAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2950,
        "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
        "label": "_createdTasks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)2039_storage)"
      },
      {
        "astId": 2952,
        "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
        "label": "fee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2954,
        "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
        "label": "feeToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2960,
        "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
        "label": "timedTask",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Time)4138_storage)"
      },
      {
        "astId": 2965,
        "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
        "label": "taskModuleAddresses",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(Module)4125,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Module)4125": {
        "encoding": "inplace",
        "label": "enum LibDataTypes.Module",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)2039_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)2039_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(Time)4138_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibDataTypes.Time)",
        "numberOfBytes": "32",
        "value": "t_struct(Time)4138_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Module)4125,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(Module)4125",
        "label": "mapping(enum LibDataTypes.Module => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Bytes32Set)2039_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2038,
            "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1845_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1845_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1840,
            "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1844,
            "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Time)4138_storage": {
        "encoding": "inplace",
        "label": "struct LibDataTypes.Time",
        "members": [
          {
            "astId": 4135,
            "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
            "label": "nextExec",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 4137,
            "contract": "contracts/taskModules/TimeModule.sol:TimeModule",
            "label": "interval",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
