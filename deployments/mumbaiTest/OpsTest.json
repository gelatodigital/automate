{
  "address": "0xD4AE5E73095526a8C84fDb48cBe756B2DD820B61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ops",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "checker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "checkerNoPrepayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "increaseCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "increaseCountNoPrepayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ops",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdad30d8e11703f6009244f8d12713330295d136fe19be64985cd6665c0dd6f8f",
  "receipt": {
    "to": null,
    "from": "0x5ce6047a715B1919A58C549E6FBc1921B4d9287D",
    "contractAddress": "0xD4AE5E73095526a8C84fDb48cBe756B2DD820B61",
    "transactionIndex": 11,
    "gasUsed": "918378",
    "logsBloom": "0x
    "blockHash": "0xf8900ec29a5e71609dde4bce00d99be4a4e38acef398c78dbd6d82432b492d2a",
    "transactionHash": "0xdad30d8e11703f6009244f8d12713330295d136fe19be64985cd6665c0dd6f8f",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 26868322,
        "transactionHash": "0xdad30d8e11703f6009244f8d12713330295d136fe19be64985cd6665c0dd6f8f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005ce6047a715b1919a58c549e6fbc1921b4d9287d",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000828265a261a0000000000000000000000000000000000000000000000000027e66a570d21c68e000000000000000000000000000000000000000000001ba30d17637caf3f3f3a00000000000000000000000000000000000000000000000027de4230b2fbac8e000000000000000000000000000000000000000000001ba30d1f8ba30965593a",
        "logIndex": 38,
        "blockHash": "0xf8900ec29a5e71609dde4bce00d99be4a4e38acef398c78dbd6d82432b492d2a"
      }
    ],
    "blockNumber": 26868322,
    "cumulativeGasUsed": "2846022",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xA16a69BFbBf1600490E667865f91aAFA11d62371"],
  "numDeployments": 2,
  "solcInputHash": "23054c9ab3050ed36b78e1cc5e977b31",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ops\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"checkerNoPrepayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"increaseCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"increaseCountNoPrepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/OpsTest.sol\":\"OpsTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/test/OpsTest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {OpsReady} from \\\"../vendor/gelato/OpsReady.sol\\\";\\n\\ninterface IOps {\\n    function getFeeDetails() external view returns (uint256, address);\\n}\\n\\n// solhint-disable no-empty-blocks\\ncontract OpsTest is OpsReady {\\n    uint256 public count;\\n\\n    constructor(address _ops) OpsReady(_ops) {}\\n\\n    receive() external payable {}\\n\\n    function increaseCount(uint256 _count) external {\\n        count += _count;\\n    }\\n\\n    function increaseCountNoPrepayment(uint256 _count) external {\\n        count += _count;\\n\\n        uint256 fee;\\n        address feeToken;\\n\\n        (fee, feeToken) = IOps(ops).getFeeDetails();\\n\\n        _transfer(fee, feeToken);\\n    }\\n\\n    function checker(uint256 _count)\\n        external\\n        pure\\n        returns (bool canExec, bytes memory payload)\\n    {\\n        canExec = true;\\n        payload = abi.encodeWithSelector(this.increaseCount.selector, _count);\\n    }\\n\\n    function checkerNoPrepayment(uint256 _count)\\n        external\\n        pure\\n        returns (bool canExec, bytes memory payload)\\n    {\\n        canExec = true;\\n        payload = abi.encodeWithSelector(\\n            this.increaseCountNoPrepayment.selector,\\n            _count\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x643423aeac439e31f50c158df59e9ebea7d1f9ef362cd7394710405f50636c88\",\"license\":\"UNLICENSED\"},\"contracts/vendor/gelato/OpsReady.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IOps {\\n    function gelato() external view returns (address payable);\\n}\\n\\nabstract contract OpsReady {\\n    address public immutable ops;\\n    address payable public immutable gelato;\\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    modifier onlyOps() {\\n        require(msg.sender == ops, \\\"OpsReady: onlyOps\\\");\\n        _;\\n    }\\n\\n    constructor(address _ops) {\\n        ops = _ops;\\n        gelato = IOps(_ops).gelato();\\n    }\\n\\n    function _transfer(uint256 _amount, address _paymentToken) internal {\\n        if (_paymentToken == ETH) {\\n            (bool success, ) = gelato.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"_transfer: ETH transfer failed\\\");\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_paymentToken), gelato, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x72e76d3e3f7c5f0e2fda964314fd5a8a53e0e7988eec683271e33166399f8903\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620011d0380380620011d0833981810160405281019062000037919062000183565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000de9190620001fa565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050506200022c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014b826200011e565b9050919050565b6200015d816200013e565b81146200016957600080fd5b50565b6000815190506200017d8162000152565b92915050565b6000602082840312156200019c576200019b62000119565b5b6000620001ac848285016200016c565b91505092915050565b6000620001c2826200011e565b9050919050565b620001d481620001b5565b8114620001e057600080fd5b50565b600081519050620001f481620001c9565b92915050565b60006020828403121562000213576200021262000119565b5b60006200022384828501620001e3565b91505092915050565b60805160a051610f6962000267600039600081816102ad0152818161049b015261056f0152600081816102ec015261042e0152610f696000f3fe60806040526004361061007f5760003560e01c80637507d4621161004e5780637507d462146101485780638322fff21461017157806394e05b2c1461019c578063e70abe92146101da57610086565b806306661abd1461008b57806327192ce7146100b657806346d4adf2146100f4578063573ea5751461011d57610086565b3661008657005b600080fd5b34801561009757600080fd5b506100a0610205565b6040516100ad91906108b5565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190610901565b61020b565b6040516100eb9291906109e2565b60405180910390f35b34801561010057600080fd5b5061011b60048036038101906101169190610901565b610290565b005b34801561012957600080fd5b506101326102ab565b60405161013f9190610a53565b60405180910390f35b34801561015457600080fd5b5061016f600480360381019061016a9190610901565b6102cf565b005b34801561017d57600080fd5b5061018661038f565b6040516101939190610a8f565b60405180910390f35b3480156101a857600080fd5b506101c360048036038101906101be9190610901565b6103a7565b6040516101d19291906109e2565b60405180910390f35b3480156101e657600080fd5b506101ef61042c565b6040516101fc9190610a8f565b60405180910390f35b60005481565b6000606060019150637507d46260e01b8360405160240161022c91906108b5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050915091565b806000808282546102a19190610ad9565b9250508190555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b806000808282546102e09190610ad9565b925050819055506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa158015610354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103789190610b70565b809250819350505061038a8282610450565b505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60006060600191506346d4adf260e01b836040516024016103c891906108b5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105695760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16836040516104dd90610be1565b60006040518083038185875af1925050503d806000811461051a576040519150601f19603f3d011682016040523d82523d6000602084013e61051f565b606091505b5050905080610563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055a90610c53565b60405180910390fd5b50610595565b610594817f000000000000000000000000000000000000000000000000000000000000000084610599565b5b5050565b61061a8363a9059cbb60e01b84846040516024016105b8929190610c73565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061061f565b505050565b6000610681826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106e69092919063ffffffff16565b90506000815111156106e157808060200190518101906106a19190610cc8565b6106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790610d67565b60405180910390fd5b5b505050565b60606106f584846000856106fe565b90509392505050565b606082471015610743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073a90610df9565b60405180910390fd5b61074c85610812565b61078b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078290610e65565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516107b49190610eb6565b60006040518083038185875af1925050503d80600081146107f1576040519150601f19603f3d011682016040523d82523d6000602084013e6107f6565b606091505b5091509150610806828286610835565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561084557829050610895565b6000835111156108585782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088c9190610f11565b60405180910390fd5b9392505050565b6000819050919050565b6108af8161089c565b82525050565b60006020820190506108ca60008301846108a6565b92915050565b600080fd5b6108de8161089c565b81146108e957600080fd5b50565b6000813590506108fb816108d5565b92915050565b600060208284031215610917576109166108d0565b5b6000610925848285016108ec565b91505092915050565b60008115159050919050565b6109438161092e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610983578082015181840152602081019050610968565b83811115610992576000848401525b50505050565b6000601f19601f8301169050919050565b60006109b482610949565b6109be8185610954565b93506109ce818560208601610965565b6109d781610998565b840191505092915050565b60006040820190506109f7600083018561093a565b8181036020830152610a0981846109a9565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3d82610a12565b9050919050565b610a4d81610a32565b82525050565b6000602082019050610a686000830184610a44565b92915050565b6000610a7982610a12565b9050919050565b610a8981610a6e565b82525050565b6000602082019050610aa46000830184610a80565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ae48261089c565b9150610aef8361089c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b2457610b23610aaa565b5b828201905092915050565b600081519050610b3e816108d5565b92915050565b610b4d81610a6e565b8114610b5857600080fd5b50565b600081519050610b6a81610b44565b92915050565b60008060408385031215610b8757610b866108d0565b5b6000610b9585828601610b2f565b9250506020610ba685828601610b5b565b9150509250929050565b600081905092915050565b50565b6000610bcb600083610bb0565b9150610bd682610bbb565b600082019050919050565b6000610bec82610bbe565b9150819050919050565b600082825260208201905092915050565b7f5f7472616e736665723a20455448207472616e73666572206661696c65640000600082015250565b6000610c3d601e83610bf6565b9150610c4882610c07565b602082019050919050565b60006020820190508181036000830152610c6c81610c30565b9050919050565b6000604082019050610c886000830185610a80565b610c9560208301846108a6565b9392505050565b610ca58161092e565b8114610cb057600080fd5b50565b600081519050610cc281610c9c565b92915050565b600060208284031215610cde57610cdd6108d0565b5b6000610cec84828501610cb3565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610d51602a83610bf6565b9150610d5c82610cf5565b604082019050919050565b60006020820190508181036000830152610d8081610d44565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610de3602683610bf6565b9150610dee82610d87565b604082019050919050565b60006020820190508181036000830152610e1281610dd6565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610e4f601d83610bf6565b9150610e5a82610e19565b602082019050919050565b60006020820190508181036000830152610e7e81610e42565b9050919050565b6000610e9082610949565b610e9a8185610bb0565b9350610eaa818560208601610965565b80840191505092915050565b6000610ec28284610e85565b915081905092915050565b600081519050919050565b6000610ee382610ecd565b610eed8185610bf6565b9350610efd818560208601610965565b610f0681610998565b840191505092915050565b60006020820190508181036000830152610f2b8184610ed8565b90509291505056fea2646970667358221220df517e2892b615caae5722537a04c8c690fe63c2563f38e2fbe1b9ee233f20f964736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80637507d4621161004e5780637507d462146101485780638322fff21461017157806394e05b2c1461019c578063e70abe92146101da57610086565b806306661abd1461008b57806327192ce7146100b657806346d4adf2146100f4578063573ea5751461011d57610086565b3661008657005b600080fd5b34801561009757600080fd5b506100a0610205565b6040516100ad91906108b5565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190610901565b61020b565b6040516100eb9291906109e2565b60405180910390f35b34801561010057600080fd5b5061011b60048036038101906101169190610901565b610290565b005b34801561012957600080fd5b506101326102ab565b60405161013f9190610a53565b60405180910390f35b34801561015457600080fd5b5061016f600480360381019061016a9190610901565b6102cf565b005b34801561017d57600080fd5b5061018661038f565b6040516101939190610a8f565b60405180910390f35b3480156101a857600080fd5b506101c360048036038101906101be9190610901565b6103a7565b6040516101d19291906109e2565b60405180910390f35b3480156101e657600080fd5b506101ef61042c565b6040516101fc9190610a8f565b60405180910390f35b60005481565b6000606060019150637507d46260e01b8360405160240161022c91906108b5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050915091565b806000808282546102a19190610ad9565b9250508190555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b806000808282546102e09190610ad9565b925050819055506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa158015610354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103789190610b70565b809250819350505061038a8282610450565b505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60006060600191506346d4adf260e01b836040516024016103c891906108b5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105695760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16836040516104dd90610be1565b60006040518083038185875af1925050503d806000811461051a576040519150601f19603f3d011682016040523d82523d6000602084013e61051f565b606091505b5050905080610563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055a90610c53565b60405180910390fd5b50610595565b610594817f000000000000000000000000000000000000000000000000000000000000000084610599565b5b5050565b61061a8363a9059cbb60e01b84846040516024016105b8929190610c73565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061061f565b505050565b6000610681826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106e69092919063ffffffff16565b90506000815111156106e157808060200190518101906106a19190610cc8565b6106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790610d67565b60405180910390fd5b5b505050565b60606106f584846000856106fe565b90509392505050565b606082471015610743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073a90610df9565b60405180910390fd5b61074c85610812565b61078b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078290610e65565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516107b49190610eb6565b60006040518083038185875af1925050503d80600081146107f1576040519150601f19603f3d011682016040523d82523d6000602084013e6107f6565b606091505b5091509150610806828286610835565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561084557829050610895565b6000835111156108585782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088c9190610f11565b60405180910390fd5b9392505050565b6000819050919050565b6108af8161089c565b82525050565b60006020820190506108ca60008301846108a6565b92915050565b600080fd5b6108de8161089c565b81146108e957600080fd5b50565b6000813590506108fb816108d5565b92915050565b600060208284031215610917576109166108d0565b5b6000610925848285016108ec565b91505092915050565b60008115159050919050565b6109438161092e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610983578082015181840152602081019050610968565b83811115610992576000848401525b50505050565b6000601f19601f8301169050919050565b60006109b482610949565b6109be8185610954565b93506109ce818560208601610965565b6109d781610998565b840191505092915050565b60006040820190506109f7600083018561093a565b8181036020830152610a0981846109a9565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3d82610a12565b9050919050565b610a4d81610a32565b82525050565b6000602082019050610a686000830184610a44565b92915050565b6000610a7982610a12565b9050919050565b610a8981610a6e565b82525050565b6000602082019050610aa46000830184610a80565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ae48261089c565b9150610aef8361089c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b2457610b23610aaa565b5b828201905092915050565b600081519050610b3e816108d5565b92915050565b610b4d81610a6e565b8114610b5857600080fd5b50565b600081519050610b6a81610b44565b92915050565b60008060408385031215610b8757610b866108d0565b5b6000610b9585828601610b2f565b9250506020610ba685828601610b5b565b9150509250929050565b600081905092915050565b50565b6000610bcb600083610bb0565b9150610bd682610bbb565b600082019050919050565b6000610bec82610bbe565b9150819050919050565b600082825260208201905092915050565b7f5f7472616e736665723a20455448207472616e73666572206661696c65640000600082015250565b6000610c3d601e83610bf6565b9150610c4882610c07565b602082019050919050565b60006020820190508181036000830152610c6c81610c30565b9050919050565b6000604082019050610c886000830185610a80565b610c9560208301846108a6565b9392505050565b610ca58161092e565b8114610cb057600080fd5b50565b600081519050610cc281610c9c565b92915050565b600060208284031215610cde57610cdd6108d0565b5b6000610cec84828501610cb3565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610d51602a83610bf6565b9150610d5c82610cf5565b604082019050919050565b60006020820190508181036000830152610d8081610d44565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610de3602683610bf6565b9150610dee82610d87565b604082019050919050565b60006020820190508181036000830152610e1281610dd6565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610e4f601d83610bf6565b9150610e5a82610e19565b602082019050919050565b60006020820190508181036000830152610e7e81610e42565b9050919050565b6000610e9082610949565b610e9a8185610bb0565b9350610eaa818560208601610965565b80840191505092915050565b6000610ec28284610e85565b915081905092915050565b600081519050919050565b6000610ee382610ecd565b610eed8185610bf6565b9350610efd818560208601610965565b610f0681610998565b840191505092915050565b60006020820190508181036000830152610f2b8184610ed8565b90509291505056fea2646970667358221220df517e2892b615caae5722537a04c8c690fe63c2563f38e2fbe1b9ee233f20f964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8474,
        "contract": "contracts/test/OpsTest.sol:OpsTest",
        "label": "count",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
