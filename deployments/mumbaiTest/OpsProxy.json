{
  "address": "0x1cC0fA340c61667a97862304F776c2F26b56200f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ops",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ExecuteCall",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_datas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "batchExecuteCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "executeCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ops",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xee73ea50128a0897e5afd6bd2b060cc4822eeb9196146a0f5544ae4814386359",
  "receipt": {
    "to": null,
    "from": "0x5ce6047a715B1919A58C549E6FBc1921B4d9287D",
    "contractAddress": "0x1cC0fA340c61667a97862304F776c2F26b56200f",
    "transactionIndex": 2,
    "gasUsed": "1079797",
    "logsBloom": "0x
    "blockHash": "0x3d060840ef5260023daf8122f14d8b3ed9726363bfa322212f43e173b9e56030",
    "transactionHash": "0xee73ea50128a0897e5afd6bd2b060cc4822eeb9196146a0f5544ae4814386359",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 27457347,
        "transactionHash": "0xee73ea50128a0897e5afd6bd2b060cc4822eeb9196146a0f5544ae4814386359",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005ce6047a715b1919a58c549e6fbc1921b4d9287d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000a149b6e9b8adb00000000000000000000000000000000000000000000000045d9075657ff881c0000000000000000000000000000000000000000000012dc8ef08d7b853cc55400000000000000000000000000000000000000000000000045cef2bae963fd410000000000000000000000000000000000000000000012dc8efaa216f3d8502f",
        "logIndex": 28,
        "blockHash": "0x3d060840ef5260023daf8122f14d8b3ed9726363bfa322212f43e173b9e56030"
      }
    ],
    "blockNumber": 27457347,
    "cumulativeGasUsed": "1894497",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xA16a69BFbBf1600490E667865f91aAFA11d62371"],
  "numDeployments": 2,
  "solcInputHash": "8e85eb588af66df445d71ad3c9cb58f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ops\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ExecuteCall\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchExecuteCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"executeCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchExecuteCall(address[],bytes[],uint256[])\":{\"params\":{\"datas\":\"Datas for each contract call.\",\"targets\":\"Addresses of contracts to be called.\",\"values\":\"Native token value for each contract call.\"}},\"executeCall(address,bytes,uint256)\":{\"params\":{\"data\":\"Data for contract call.\",\"target\":\"Address of contracts to be called.\",\"value\":\"Native token value for contract call.\"}},\"owner()\":{\"returns\":{\"_0\":\"address Owner of the proxy\"}}},\"stateVariables\":{\"ops\":{\"return\":\"address Ops smart contract address\",\"returns\":{\"_0\":\"address Ops smart contract address\"}},\"version\":{\"return\":\"uint256 version of OpsProxy.\",\"returns\":{\"_0\":\"uint256 version of OpsProxy.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ExecuteCall(address,bytes,uint256,bytes)\":{\"notice\":\"Emitted when proxy calls a contract successfully in `executeCall`\"}},\"kind\":\"user\",\"methods\":{\"batchExecuteCall(address[],bytes[],uint256[])\":{\"notice\":\"Multicall to different contracts with different datas.\"},\"executeCall(address,bytes,uint256)\":{\"notice\":\"Call to a single contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/opsProxy/OpsProxy.sol\":\"OpsProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/functions/FExec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport {GelatoBytes} from \\\"../vendor/gelato/GelatoBytes.sol\\\";\\n\\n// solhint-disable private-vars-leading-underscore\\n// solhint-disable func-visibility\\n\\nfunction _call(\\n    address _add,\\n    bytes memory _data,\\n    uint256 _value,\\n    bool _revertOnFailure,\\n    string memory _tracingInfo\\n) returns (bool success, bytes memory returnData) {\\n    (success, returnData) = _add.call{value: _value}(_data);\\n\\n    if (!success && _revertOnFailure)\\n        GelatoBytes.revertWithError(returnData, _tracingInfo);\\n}\\n\\nfunction _delegateCall(\\n    address _add,\\n    bytes memory _data,\\n    string memory _tracingInfo\\n) returns (bool success, bytes memory returnData) {\\n    (success, returnData) = _add.delegatecall(_data);\\n\\n    if (!success) GelatoBytes.revertWithError(returnData, _tracingInfo);\\n}\\n\",\"keccak256\":\"0x48375d0645cf4dfe7d3f18dc727cbb2322a09233a2e9cce9352a73acc357bf07\",\"license\":\"MIT\"},\"contracts/interfaces/IOpsProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IOpsProxy {\\n    /**\\n     * @notice Emitted when proxy calls a contract successfully in `executeCall`\\n     *\\n     * @param target Address of contract that is called\\n     * @param data Data used in the call.\\n     * @param value Native token value used in the call.\\n     * @param returnData Data returned by the call.\\n     */\\n    event ExecuteCall(\\n        address indexed target,\\n        bytes data,\\n        uint256 value,\\n        bytes returnData\\n    );\\n\\n    /**\\n     * @notice Multicall to different contracts with different datas.\\n     *\\n     * @param targets Addresses of contracts to be called.\\n     * @param datas Datas for each contract call.\\n     * @param values Native token value for each contract call.\\n     */\\n    function batchExecuteCall(\\n        address[] calldata targets,\\n        bytes[] calldata datas,\\n        uint256[] calldata values\\n    ) external payable;\\n\\n    /**\\n     * @notice Call to a single contract.\\n     *\\n     * @param target Address of contracts to be called.\\n     * @param data Data for contract call.\\n     * @param value Native token value for contract call.\\n     */\\n    function executeCall(\\n        address target,\\n        bytes calldata data,\\n        uint256 value\\n    ) external payable;\\n\\n    /**\\n     * @return address Ops smart contract address\\n     */\\n    function ops() external view returns (address);\\n\\n    /**\\n     * @return address Owner of the proxy\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @return uint256 version of OpsProxy.\\n     */\\n    function version() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1b6e349287dfeb2735da8d3f7ae0aa5865996f7dd58622773b449a76bcaf881a\",\"license\":\"MIT\"},\"contracts/opsProxy/OpsProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {Proxied} from \\\"../vendor/proxy/EIP173/Proxied.sol\\\";\\nimport {GelatoBytes} from \\\"../vendor/gelato/GelatoBytes.sol\\\";\\nimport {_call} from \\\"../functions/FExec.sol\\\";\\nimport {IOpsProxy} from \\\"../interfaces/IOpsProxy.sol\\\";\\n\\ncontract OpsProxy is Proxied, IOpsProxy {\\n    using GelatoBytes for bytes;\\n\\n    // solhint-disable const-name-snakecase\\n    uint256 public constant override version = 1;\\n    address public immutable override ops;\\n\\n    modifier onlyAuth() {\\n        require(\\n            msg.sender == ops || msg.sender == owner(),\\n            \\\"OpsProxy: Not authorised\\\"\\n        );\\n\\n        if (msg.sender == ops) {\\n            address taskCreator = _getTaskCreator();\\n\\n            require(\\n                taskCreator == owner(),\\n                \\\"OpsProxy: Only tasks created by owner\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    constructor(address _ops) {\\n        ops = _ops;\\n    }\\n\\n    receive() external payable {}\\n\\n    ///@inheritdoc IOpsProxy\\n    function batchExecuteCall(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        uint256[] calldata _values\\n    ) external payable override onlyAuth {\\n        uint256 length = _targets.length;\\n        require(\\n            length == _datas.length && length == _values.length,\\n            \\\"OpsProxy: Length mismatch\\\"\\n        );\\n\\n        for (uint256 i; i < length; i++)\\n            _executeCall(_targets[i], _datas[i], _values[i]);\\n    }\\n\\n    ///@inheritdoc IOpsProxy\\n    function executeCall(\\n        address _target,\\n        bytes calldata _data,\\n        uint256 _value\\n    ) external payable override onlyAuth {\\n        _executeCall(_target, _data, _value);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _proxyAdmin();\\n    }\\n\\n    function _executeCall(\\n        address _target,\\n        bytes calldata _data,\\n        uint256 _value\\n    ) private {\\n        (, bytes memory returnData) = _call(\\n            _target,\\n            _data,\\n            _value,\\n            true,\\n            \\\"OpsProxy.executeCall: \\\"\\n        );\\n\\n        emit ExecuteCall(_target, _data, _value, returnData);\\n    }\\n\\n    function _getTaskCreator() private pure returns (address taskCreator) {\\n        assembly {\\n            taskCreator := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5af2ba32afc7227a9566a5bd49c69a5fa5f34f53b319e6fe87e790f75af53eec\",\"license\":\"UNLICENSED\"},\"contracts/vendor/gelato/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ec59b2c6f678f3bbe186677e5970e59e46a40d22881dc813c49ffb18e417951\",\"license\":\"UNLICENSED\"},\"contracts/vendor/proxy/EIP173/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address adminAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x428ced1961d42c505a3e49d90498f92f4b0df8537e5ffa59f14ba375d99150a1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c806354132d781461005a57806354fd4d50146100765780638da5cb5b146100a1578063c0e8c0c2146100cc578063e70abe92146100e857610055565b3661005557005b600080fd5b610074600480360381019061006f91906109b4565b610113565b005b34801561008257600080fd5b5061008b6102c6565b6040516100989190610a37565b60405180910390f35b3480156100ad57600080fd5b506100b66102cb565b6040516100c39190610a61565b60405180910390f35b6100e660048036038101906100e19190610b7e565b6102da565b005b3480156100f457600080fd5b506100fd61056d565b60405161010a9190610a61565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061019f57506101706102cb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6101de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d590610c8f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102b457600061023b610591565b90506102456102cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a990610d21565b60405180910390fd5b505b6102c0848484846105a0565b50505050565b600181565b60006102d5610687565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061036657506103376102cb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6103a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039c90610c8f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361047b576000610402610591565b905061040c6102cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610479576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047090610d21565b60405180910390fd5b505b6000868690509050848490508114801561049757508282905081145b6104d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cd90610d8d565b60405180910390fd5b60005b81811015610563576105508888838181106104f7576104f6610dad565b5b905060200201602081019061050c9190610ddc565b87878481811061051f5761051e610dad565b5b90506020028101906105319190610e18565b87878681811061054457610543610dad565b5b905060200201356105a0565b808061055b90610eaa565b9150506104d9565b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000601436033560601c905090565b60006106298585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508460016040518060400160405280601681526020017f4f707350726f78792e6578656375746543616c6c3a20000000000000000000008152506106b0565b9150508473ffffffffffffffffffffffffffffffffffffffff167f8f8f4d49bbb03ffac818a5d588ec1786a4d2d17269871cbf5b1745f58b64c15d858585856040516106789493929190610fc7565b60405180910390a25050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516106da919061104a565b60006040518083038185875af1925050503d8060008114610717576040519150601f19603f3d011682016040523d82523d6000602084013e61071c565b606091505b508092508193505050811580156107305750835b156107405761073f818461074a565b5b9550959350505050565b60046020835161075a9190611090565b03610855576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036107f95760448301925081836040516020016107ae929190611108565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f09190611165565b60405180910390fd5b8160405160200161080a91906111d3565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c9190611165565b60405180910390fd5b806040516020016108669190611241565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a89190611165565b60405180910390fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e6826108bb565b9050919050565b6108f6816108db565b811461090157600080fd5b50565b600081359050610913816108ed565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261093e5761093d610919565b5b8235905067ffffffffffffffff81111561095b5761095a61091e565b5b60208301915083600182028301111561097757610976610923565b5b9250929050565b6000819050919050565b6109918161097e565b811461099c57600080fd5b50565b6000813590506109ae81610988565b92915050565b600080600080606085870312156109ce576109cd6108b1565b5b60006109dc87828801610904565b945050602085013567ffffffffffffffff8111156109fd576109fc6108b6565b5b610a0987828801610928565b93509350506040610a1c8782880161099f565b91505092959194509250565b610a318161097e565b82525050565b6000602082019050610a4c6000830184610a28565b92915050565b610a5b816108db565b82525050565b6000602082019050610a766000830184610a52565b92915050565b60008083601f840112610a9257610a91610919565b5b8235905067ffffffffffffffff811115610aaf57610aae61091e565b5b602083019150836020820283011115610acb57610aca610923565b5b9250929050565b60008083601f840112610ae857610ae7610919565b5b8235905067ffffffffffffffff811115610b0557610b0461091e565b5b602083019150836020820283011115610b2157610b20610923565b5b9250929050565b60008083601f840112610b3e57610b3d610919565b5b8235905067ffffffffffffffff811115610b5b57610b5a61091e565b5b602083019150836020820283011115610b7757610b76610923565b5b9250929050565b60008060008060008060608789031215610b9b57610b9a6108b1565b5b600087013567ffffffffffffffff811115610bb957610bb86108b6565b5b610bc589828a01610a7c565b9650965050602087013567ffffffffffffffff811115610be857610be76108b6565b5b610bf489828a01610ad2565b9450945050604087013567ffffffffffffffff811115610c1757610c166108b6565b5b610c2389828a01610b28565b92509250509295509295509295565b600082825260208201905092915050565b7f4f707350726f78793a204e6f7420617574686f72697365640000000000000000600082015250565b6000610c79601883610c32565b9150610c8482610c43565b602082019050919050565b60006020820190508181036000830152610ca881610c6c565b9050919050565b7f4f707350726f78793a204f6e6c79207461736b7320637265617465642062792060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000610d0b602583610c32565b9150610d1682610caf565b604082019050919050565b60006020820190508181036000830152610d3a81610cfe565b9050919050565b7f4f707350726f78793a204c656e677468206d69736d6174636800000000000000600082015250565b6000610d77601983610c32565b9150610d8282610d41565b602082019050919050565b60006020820190508181036000830152610da681610d6a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610df257610df16108b1565b5b6000610e0084828501610904565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610e3557610e34610e09565b5b80840192508235915067ffffffffffffffff821115610e5757610e56610e0e565b5b602083019250600182023603831315610e7357610e72610e13565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eb58261097e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ee757610ee6610e7b565b5b600182019050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610f2f8385610ef2565b9350610f3c838584610f03565b610f4583610f12565b840190509392505050565b600081519050919050565b60005b83811015610f79578082015181840152602081019050610f5e565b83811115610f88576000848401525b50505050565b6000610f9982610f50565b610fa38185610ef2565b9350610fb3818560208601610f5b565b610fbc81610f12565b840191505092915050565b60006060820190508181036000830152610fe2818688610f23565b9050610ff16020830185610a28565b81810360408301526110038184610f8e565b905095945050505050565b600081905092915050565b600061102482610f50565b61102e818561100e565b935061103e818560208601610f5b565b80840191505092915050565b60006110568284611019565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061109b8261097e565b91506110a68361097e565b9250826110b6576110b5611061565b5b828206905092915050565b600081519050919050565b600081905092915050565b60006110e2826110c1565b6110ec81856110cc565b93506110fc818560208601610f5b565b80840191505092915050565b600061111482856110d7565b915061112082846110d7565b91508190509392505050565b6000611137826110c1565b6111418185610c32565b9350611151818560208601610f5b565b61115a81610f12565b840191505092915050565b6000602082019050818103600083015261117f818461112c565b905092915050565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000600082015250565b60006111bd600f836110cc565b91506111c882611187565b600f82019050919050565b60006111df82846110d7565b91506111ea826111b0565b915081905092915050565b7f556e657870656374656452657475726e64617461000000000000000000000000600082015250565b600061122b6014836110cc565b9150611236826111f5565b601482019050919050565b600061124d82846110d7565b91506112588261121e565b91508190509291505056fea26469706673582212205e2dd9f8323a70db6cd45aff1c0605e65a04c1d5753ace3d5082292fad225de964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batchExecuteCall(address[],bytes[],uint256[])": {
        "params": {
          "datas": "Datas for each contract call.",
          "targets": "Addresses of contracts to be called.",
          "values": "Native token value for each contract call."
        }
      },
      "executeCall(address,bytes,uint256)": {
        "params": {
          "data": "Data for contract call.",
          "target": "Address of contracts to be called.",
          "value": "Native token value for contract call."
        }
      },
      "owner()": {
        "returns": {
          "_0": "address Owner of the proxy"
        }
      }
    },
    "stateVariables": {
      "ops": {
        "return": "address Ops smart contract address",
        "returns": {
          "_0": "address Ops smart contract address"
        }
      },
      "version": {
        "return": "uint256 version of OpsProxy.",
        "returns": {
          "_0": "uint256 version of OpsProxy."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ExecuteCall(address,bytes,uint256,bytes)": {
        "notice": "Emitted when proxy calls a contract successfully in `executeCall`"
      }
    },
    "kind": "user",
    "methods": {
      "batchExecuteCall(address[],bytes[],uint256[])": {
        "notice": "Multicall to different contracts with different datas."
      },
      "executeCall(address,bytes,uint256)": {
        "notice": "Call to a single contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
