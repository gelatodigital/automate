{
  "address": "0x746bD0fbE8e1fBc48d74A2245b4a4661665D6204",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ops",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ExecuteCall",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_datas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "batchExecuteCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "executeCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ops",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa40f000dd2033ae12071c8415c8bb759ab1bd8b8c34b29c70a26656b747b88c0",
  "receipt": {
    "to": null,
    "from": "0xCDf41a135C65d0013393B3793F92b4FAF31032d0",
    "contractAddress": "0x746bD0fbE8e1fBc48d74A2245b4a4661665D6204",
    "transactionIndex": 32,
    "gasUsed": "1193513",
    "logsBloom": "0x
    "blockHash": "0x71172251060f7f42200bf92d0f091288024fdec93e3b9ec5cc69ba374e400b27",
    "transactionHash": "0xa40f000dd2033ae12071c8415c8bb759ab1bd8b8c34b29c70a26656b747b88c0",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 26873135,
        "transactionHash": "0xa40f000dd2033ae12071c8415c8bb759ab1bd8b8c34b29c70a26656b747b88c0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cdf41a135c65d0013393b3793f92b4faf31032d0",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000097d37bfaa0906000000000000000000000000000000000000000000000003b298e264fdda30b0000000000000000000000000000000000000000000001bad63890ff7b0e1a982000000000000000000000000000000000000000000000003b28f652d3e3027aa000000000000000000000000000000000000000000001bad63928d2f708bb288",
        "logIndex": 209,
        "blockHash": "0x71172251060f7f42200bf92d0f091288024fdec93e3b9ec5cc69ba374e400b27"
      }
    ],
    "blockNumber": 26873135,
    "cumulativeGasUsed": "19585892",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xA16a69BFbBf1600490E667865f91aAFA11d62371"],
  "numDeployments": 1,
  "solcInputHash": "ec5e7c52a427c068bbd33ab52da213bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ops\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ExecuteCall\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchExecuteCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"executeCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchExecuteCall(address[],bytes[],uint256[])\":{\"params\":{\"datas\":\"Datas for each contract call.\",\"targets\":\"Addresses of contracts to be called.\",\"values\":\"Native token value for each contract call.\"}},\"executeCall(address,bytes,uint256)\":{\"params\":{\"data\":\"Data for contract call.\",\"target\":\"Address of contracts to be called.\",\"value\":\"Native token value for contract call.\"}}},\"stateVariables\":{\"ops\":{\"return\":\"address Ops smart contract address\",\"returns\":{\"_0\":\"address Ops smart contract address\"}},\"owner\":{\"return\":\"address Owner of the proxy\",\"returns\":{\"_0\":\"address Owner of the proxy\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ExecuteCall(address,bytes,uint256,bytes)\":{\"notice\":\"Emitted when proxy calls a contract successfully in `executeCall`\"}},\"kind\":\"user\",\"methods\":{\"batchExecuteCall(address[],bytes[],uint256[])\":{\"notice\":\"Multicall to different contracts with different datas.\"},\"executeCall(address,bytes,uint256)\":{\"notice\":\"Call to a single contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/opsProxy/OpsProxy.sol\":\"OpsProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/functions/FExec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport {GelatoBytes} from \\\"../vendor/gelato/GelatoBytes.sol\\\";\\n\\n// solhint-disable private-vars-leading-underscore\\n// solhint-disable func-visibility\\n\\nfunction _call(\\n    address _add,\\n    bytes memory _data,\\n    uint256 _value,\\n    bool _revertOnFailure,\\n    string memory _tracingInfo\\n) returns (bool success, bytes memory returnData) {\\n    (success, returnData) = _add.call{value: _value}(_data);\\n\\n    if (!success && _revertOnFailure)\\n        GelatoBytes.revertWithError(returnData, _tracingInfo);\\n}\\n\\nfunction _delegateCall(\\n    address _add,\\n    bytes memory _data,\\n    string memory _tracingInfo\\n) returns (bool success, bytes memory returnData) {\\n    (success, returnData) = _add.delegatecall(_data);\\n\\n    if (!success) GelatoBytes.revertWithError(returnData, _tracingInfo);\\n}\\n\",\"keccak256\":\"0x48375d0645cf4dfe7d3f18dc727cbb2322a09233a2e9cce9352a73acc357bf07\",\"license\":\"MIT\"},\"contracts/interfaces/IOpsProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IOpsProxy {\\n    /**\\n     * @notice Emitted when proxy calls a contract successfully in `executeCall`\\n     *\\n     * @param target Address of contract that is called\\n     * @param data Data used in the call.\\n     * @param value Native token value used in the call.\\n     * @param returnData Data returned by the call.\\n     */\\n    event ExecuteCall(\\n        address indexed target,\\n        bytes data,\\n        uint256 value,\\n        bytes returnData\\n    );\\n\\n    /**\\n     * @notice Initializes the OpsProxy contract. Called by OpsProxyFactory upon deployment.\\n     *\\n     * @param owner Address of owner of the proxy.\\n     */\\n    function initialize(address owner) external;\\n\\n    /**\\n     * @notice Multicall to different contracts with different datas.\\n     *\\n     * @param targets Addresses of contracts to be called.\\n     * @param datas Datas for each contract call.\\n     * @param values Native token value for each contract call.\\n     */\\n    function batchExecuteCall(\\n        address[] calldata targets,\\n        bytes[] calldata datas,\\n        uint256[] calldata values\\n    ) external payable;\\n\\n    /**\\n     * @notice Call to a single contract.\\n     *\\n     * @param target Address of contracts to be called.\\n     * @param data Data for contract call.\\n     * @param value Native token value for contract call.\\n     */\\n    function executeCall(\\n        address target,\\n        bytes calldata data,\\n        uint256 value\\n    ) external payable;\\n\\n    /**\\n     * @return address Ops smart contract address\\n     */\\n    function ops() external view returns (address);\\n\\n    /**\\n     * @return address Owner of the proxy\\n     */\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4d832714aa9a203e8d58aa86eaa2b8b70ad4fe7474825f0e7d20defad6c6ff61\",\"license\":\"MIT\"},\"contracts/opsProxy/OpsProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {GelatoBytes} from \\\"../vendor/gelato/GelatoBytes.sol\\\";\\nimport {_call} from \\\"../functions/FExec.sol\\\";\\nimport {IOpsProxy} from \\\"../interfaces/IOpsProxy.sol\\\";\\n\\ncontract OpsProxy is IOpsProxy, Initializable {\\n    using GelatoBytes for bytes;\\n\\n    address public immutable override ops;\\n    address public override owner;\\n\\n    modifier onlyAuth() {\\n        require(\\n            msg.sender == ops || msg.sender == owner,\\n            \\\"OpsProxy: Not authorised\\\"\\n        );\\n\\n        if (msg.sender == ops) {\\n            address taskCreator = _getTaskCreator();\\n\\n            require(\\n                taskCreator == owner,\\n                \\\"OpsProxy: Only tasks created by owner\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    constructor(address _ops) {\\n        ops = _ops;\\n    }\\n\\n    receive() external payable {}\\n\\n    function initialize(address _owner) external initializer {\\n        owner = _owner;\\n    }\\n\\n    ///@inheritdoc IOpsProxy\\n    function batchExecuteCall(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        uint256[] calldata _values\\n    ) external payable override onlyAuth {\\n        uint256 length = _targets.length;\\n        require(\\n            length == _datas.length && length == _values.length,\\n            \\\"OpsProxy: Length mismatch\\\"\\n        );\\n\\n        for (uint256 i; i < length; i++)\\n            executeCall(_targets[i], _datas[i], _values[i]);\\n    }\\n\\n    ///@inheritdoc IOpsProxy\\n    function executeCall(\\n        address _target,\\n        bytes calldata _data,\\n        uint256 _value\\n    ) public payable override onlyAuth {\\n        (, bytes memory returnData) = _call(\\n            _target,\\n            _data,\\n            _value,\\n            true,\\n            \\\"OpsProxy.executeCall: \\\"\\n        );\\n\\n        emit ExecuteCall(_target, _data, _value, returnData);\\n    }\\n\\n    function _getTaskCreator() private pure returns (address taskCreator) {\\n        assembly {\\n            taskCreator := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3910527eb362878d5b030b2ce44b583850650f852da910d8ff7d05de2e643b04\",\"license\":\"UNLICENSED\"},\"contracts/vendor/gelato/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ec59b2c6f678f3bbe186677e5970e59e46a40d22881dc813c49ffb18e417951\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620015f1380380620015f18339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b6080516114ab6200014660003960008181610113015281816101f9015281816103f7015281816104dd01526107e601526114ab6000f3fe60806040526004361061004e5760003560e01c806354132d781461005a5780638da5cb5b14610076578063c0e8c0c2146100a1578063c4d66de8146100bd578063e70abe92146100e657610055565b3661005557005b600080fd5b610074600480360381019061006f9190610b4f565b610111565b005b34801561008257600080fd5b5061008b6103cf565b6040516100989190610bd2565b60405180910390f35b6100bb60048036038101906100b69190610cef565b6103f5565b005b3480156100c957600080fd5b506100e460048036038101906100df9190610da3565b6106be565b005b3480156100f257600080fd5b506100fb6107e4565b6040516101089190610bd2565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806101b85750600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6101f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ee90610e2d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102e8576000610254610808565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90610ebf565b60405180910390fd5b505b60006103718585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508460016040518060400160405280601681526020017f4f707350726f78792e6578656375746543616c6c3a2000000000000000000000815250610817565b9150508473ffffffffffffffffffffffffffffffffffffffff167f8f8f4d49bbb03ffac818a5d588ec1786a4d2d17269871cbf5b1745f58b64c15d858585856040516103c09493929190610fc3565b60405180910390a25050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061049c5750600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6104db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d290610e2d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036105cc576000610538610808565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190610ebf565b60405180910390fd5b505b600086869050905084849050811480156105e857508282905081145b610627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061e90611056565b60405180910390fd5b60005b818110156106b4576106a188888381811061064857610647611076565b5b905060200201602081019061065d9190610da3565b8787848181106106705761066f611076565b5b905060200281019061068291906110b4565b87878681811061069557610694611076565b5b90506020020135610111565b80806106ac90611146565b91505061062a565b5050505050505050565b600060019054906101000a900460ff166106e65760008054906101000a900460ff16156106ef565b6106ee6108b1565b5b61072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072590611200565b60405180910390fd5b60008060019054906101000a900460ff16159050801561077e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156107e05760008060016101000a81548160ff0219169083151502179055505b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000601436033560601c905090565b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051610841919061125c565b60006040518083038185875af1925050503d806000811461087e576040519150601f19603f3d011682016040523d82523d6000602084013e610883565b606091505b508092508193505050811580156108975750835b156108a7576108a681846108c2565b5b9550959350505050565b60006108bc30610a29565b15905090565b6004602083516108d291906112a2565b036109cd576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361097157604483019250818360405160200161092692919061131a565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109689190611377565b60405180910390fd5b8160405160200161098291906113e5565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c49190611377565b60405180910390fd5b806040516020016109de9190611453565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a209190611377565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8182610a56565b9050919050565b610a9181610a76565b8114610a9c57600080fd5b50565b600081359050610aae81610a88565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610ad957610ad8610ab4565b5b8235905067ffffffffffffffff811115610af657610af5610ab9565b5b602083019150836001820283011115610b1257610b11610abe565b5b9250929050565b6000819050919050565b610b2c81610b19565b8114610b3757600080fd5b50565b600081359050610b4981610b23565b92915050565b60008060008060608587031215610b6957610b68610a4c565b5b6000610b7787828801610a9f565b945050602085013567ffffffffffffffff811115610b9857610b97610a51565b5b610ba487828801610ac3565b93509350506040610bb787828801610b3a565b91505092959194509250565b610bcc81610a76565b82525050565b6000602082019050610be76000830184610bc3565b92915050565b60008083601f840112610c0357610c02610ab4565b5b8235905067ffffffffffffffff811115610c2057610c1f610ab9565b5b602083019150836020820283011115610c3c57610c3b610abe565b5b9250929050565b60008083601f840112610c5957610c58610ab4565b5b8235905067ffffffffffffffff811115610c7657610c75610ab9565b5b602083019150836020820283011115610c9257610c91610abe565b5b9250929050565b60008083601f840112610caf57610cae610ab4565b5b8235905067ffffffffffffffff811115610ccc57610ccb610ab9565b5b602083019150836020820283011115610ce857610ce7610abe565b5b9250929050565b60008060008060008060608789031215610d0c57610d0b610a4c565b5b600087013567ffffffffffffffff811115610d2a57610d29610a51565b5b610d3689828a01610bed565b9650965050602087013567ffffffffffffffff811115610d5957610d58610a51565b5b610d6589828a01610c43565b9450945050604087013567ffffffffffffffff811115610d8857610d87610a51565b5b610d9489828a01610c99565b92509250509295509295509295565b600060208284031215610db957610db8610a4c565b5b6000610dc784828501610a9f565b91505092915050565b600082825260208201905092915050565b7f4f707350726f78793a204e6f7420617574686f72697365640000000000000000600082015250565b6000610e17601883610dd0565b9150610e2282610de1565b602082019050919050565b60006020820190508181036000830152610e4681610e0a565b9050919050565b7f4f707350726f78793a204f6e6c79207461736b7320637265617465642062792060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000610ea9602583610dd0565b9150610eb482610e4d565b604082019050919050565b60006020820190508181036000830152610ed881610e9c565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610f1c8385610edf565b9350610f29838584610ef0565b610f3283610eff565b840190509392505050565b610f4681610b19565b82525050565b600081519050919050565b60005b83811015610f75578082015181840152602081019050610f5a565b83811115610f84576000848401525b50505050565b6000610f9582610f4c565b610f9f8185610edf565b9350610faf818560208601610f57565b610fb881610eff565b840191505092915050565b60006060820190508181036000830152610fde818688610f10565b9050610fed6020830185610f3d565b8181036040830152610fff8184610f8a565b905095945050505050565b7f4f707350726f78793a204c656e677468206d69736d6174636800000000000000600082015250565b6000611040601983610dd0565b915061104b8261100a565b602082019050919050565b6000602082019050818103600083015261106f81611033565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126110d1576110d06110a5565b5b80840192508235915067ffffffffffffffff8211156110f3576110f26110aa565b5b60208301925060018202360383131561110f5761110e6110af565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061115182610b19565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361118357611182611117565b5b600182019050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006111ea602e83610dd0565b91506111f58261118e565b604082019050919050565b60006020820190508181036000830152611219816111dd565b9050919050565b600081905092915050565b600061123682610f4c565b6112408185611220565b9350611250818560208601610f57565b80840191505092915050565b6000611268828461122b565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112ad82610b19565b91506112b883610b19565b9250826112c8576112c7611273565b5b828206905092915050565b600081519050919050565b600081905092915050565b60006112f4826112d3565b6112fe81856112de565b935061130e818560208601610f57565b80840191505092915050565b600061132682856112e9565b915061133282846112e9565b91508190509392505050565b6000611349826112d3565b6113538185610dd0565b9350611363818560208601610f57565b61136c81610eff565b840191505092915050565b60006020820190508181036000830152611391818461133e565b905092915050565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000600082015250565b60006113cf600f836112de565b91506113da82611399565b600f82019050919050565b60006113f182846112e9565b91506113fc826113c2565b915081905092915050565b7f556e657870656374656452657475726e64617461000000000000000000000000600082015250565b600061143d6014836112de565b915061144882611407565b601482019050919050565b600061145f82846112e9565b915061146a82611430565b91508190509291505056fea2646970667358221220aee695712982ef6c410f47ebbf573b3f0fc6c9380421f037e512227b96c08e8d64736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c806354132d781461005a5780638da5cb5b14610076578063c0e8c0c2146100a1578063c4d66de8146100bd578063e70abe92146100e657610055565b3661005557005b600080fd5b610074600480360381019061006f9190610b4f565b610111565b005b34801561008257600080fd5b5061008b6103cf565b6040516100989190610bd2565b60405180910390f35b6100bb60048036038101906100b69190610cef565b6103f5565b005b3480156100c957600080fd5b506100e460048036038101906100df9190610da3565b6106be565b005b3480156100f257600080fd5b506100fb6107e4565b6040516101089190610bd2565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806101b85750600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6101f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ee90610e2d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102e8576000610254610808565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90610ebf565b60405180910390fd5b505b60006103718585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508460016040518060400160405280601681526020017f4f707350726f78792e6578656375746543616c6c3a2000000000000000000000815250610817565b9150508473ffffffffffffffffffffffffffffffffffffffff167f8f8f4d49bbb03ffac818a5d588ec1786a4d2d17269871cbf5b1745f58b64c15d858585856040516103c09493929190610fc3565b60405180910390a25050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061049c5750600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6104db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d290610e2d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036105cc576000610538610808565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190610ebf565b60405180910390fd5b505b600086869050905084849050811480156105e857508282905081145b610627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061e90611056565b60405180910390fd5b60005b818110156106b4576106a188888381811061064857610647611076565b5b905060200201602081019061065d9190610da3565b8787848181106106705761066f611076565b5b905060200281019061068291906110b4565b87878681811061069557610694611076565b5b90506020020135610111565b80806106ac90611146565b91505061062a565b5050505050505050565b600060019054906101000a900460ff166106e65760008054906101000a900460ff16156106ef565b6106ee6108b1565b5b61072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072590611200565b60405180910390fd5b60008060019054906101000a900460ff16159050801561077e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156107e05760008060016101000a81548160ff0219169083151502179055505b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000601436033560601c905090565b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051610841919061125c565b60006040518083038185875af1925050503d806000811461087e576040519150601f19603f3d011682016040523d82523d6000602084013e610883565b606091505b508092508193505050811580156108975750835b156108a7576108a681846108c2565b5b9550959350505050565b60006108bc30610a29565b15905090565b6004602083516108d291906112a2565b036109cd576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361097157604483019250818360405160200161092692919061131a565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109689190611377565b60405180910390fd5b8160405160200161098291906113e5565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c49190611377565b60405180910390fd5b806040516020016109de9190611453565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a209190611377565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8182610a56565b9050919050565b610a9181610a76565b8114610a9c57600080fd5b50565b600081359050610aae81610a88565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610ad957610ad8610ab4565b5b8235905067ffffffffffffffff811115610af657610af5610ab9565b5b602083019150836001820283011115610b1257610b11610abe565b5b9250929050565b6000819050919050565b610b2c81610b19565b8114610b3757600080fd5b50565b600081359050610b4981610b23565b92915050565b60008060008060608587031215610b6957610b68610a4c565b5b6000610b7787828801610a9f565b945050602085013567ffffffffffffffff811115610b9857610b97610a51565b5b610ba487828801610ac3565b93509350506040610bb787828801610b3a565b91505092959194509250565b610bcc81610a76565b82525050565b6000602082019050610be76000830184610bc3565b92915050565b60008083601f840112610c0357610c02610ab4565b5b8235905067ffffffffffffffff811115610c2057610c1f610ab9565b5b602083019150836020820283011115610c3c57610c3b610abe565b5b9250929050565b60008083601f840112610c5957610c58610ab4565b5b8235905067ffffffffffffffff811115610c7657610c75610ab9565b5b602083019150836020820283011115610c9257610c91610abe565b5b9250929050565b60008083601f840112610caf57610cae610ab4565b5b8235905067ffffffffffffffff811115610ccc57610ccb610ab9565b5b602083019150836020820283011115610ce857610ce7610abe565b5b9250929050565b60008060008060008060608789031215610d0c57610d0b610a4c565b5b600087013567ffffffffffffffff811115610d2a57610d29610a51565b5b610d3689828a01610bed565b9650965050602087013567ffffffffffffffff811115610d5957610d58610a51565b5b610d6589828a01610c43565b9450945050604087013567ffffffffffffffff811115610d8857610d87610a51565b5b610d9489828a01610c99565b92509250509295509295509295565b600060208284031215610db957610db8610a4c565b5b6000610dc784828501610a9f565b91505092915050565b600082825260208201905092915050565b7f4f707350726f78793a204e6f7420617574686f72697365640000000000000000600082015250565b6000610e17601883610dd0565b9150610e2282610de1565b602082019050919050565b60006020820190508181036000830152610e4681610e0a565b9050919050565b7f4f707350726f78793a204f6e6c79207461736b7320637265617465642062792060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000610ea9602583610dd0565b9150610eb482610e4d565b604082019050919050565b60006020820190508181036000830152610ed881610e9c565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610f1c8385610edf565b9350610f29838584610ef0565b610f3283610eff565b840190509392505050565b610f4681610b19565b82525050565b600081519050919050565b60005b83811015610f75578082015181840152602081019050610f5a565b83811115610f84576000848401525b50505050565b6000610f9582610f4c565b610f9f8185610edf565b9350610faf818560208601610f57565b610fb881610eff565b840191505092915050565b60006060820190508181036000830152610fde818688610f10565b9050610fed6020830185610f3d565b8181036040830152610fff8184610f8a565b905095945050505050565b7f4f707350726f78793a204c656e677468206d69736d6174636800000000000000600082015250565b6000611040601983610dd0565b915061104b8261100a565b602082019050919050565b6000602082019050818103600083015261106f81611033565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126110d1576110d06110a5565b5b80840192508235915067ffffffffffffffff8211156110f3576110f26110aa565b5b60208301925060018202360383131561110f5761110e6110af565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061115182610b19565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361118357611182611117565b5b600182019050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006111ea602e83610dd0565b91506111f58261118e565b604082019050919050565b60006020820190508181036000830152611219816111dd565b9050919050565b600081905092915050565b600061123682610f4c565b6112408185611220565b9350611250818560208601610f57565b80840191505092915050565b6000611268828461122b565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112ad82610b19565b91506112b883610b19565b9250826112c8576112c7611273565b5b828206905092915050565b600081519050919050565b600081905092915050565b60006112f4826112d3565b6112fe81856112de565b935061130e818560208601610f57565b80840191505092915050565b600061132682856112e9565b915061133282846112e9565b91508190509392505050565b6000611349826112d3565b6113538185610dd0565b9350611363818560208601610f57565b61136c81610eff565b840191505092915050565b60006020820190508181036000830152611391818461133e565b905092915050565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000600082015250565b60006113cf600f836112de565b91506113da82611399565b600f82019050919050565b60006113f182846112e9565b91506113fc826113c2565b915081905092915050565b7f556e657870656374656452657475726e64617461000000000000000000000000600082015250565b600061143d6014836112de565b915061144882611407565b601482019050919050565b600061145f82846112e9565b915061146a82611430565b91508190509291505056fea2646970667358221220aee695712982ef6c410f47ebbf573b3f0fc6c9380421f037e512227b96c08e8d64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batchExecuteCall(address[],bytes[],uint256[])": {
        "params": {
          "datas": "Datas for each contract call.",
          "targets": "Addresses of contracts to be called.",
          "values": "Native token value for each contract call."
        }
      },
      "executeCall(address,bytes,uint256)": {
        "params": {
          "data": "Data for contract call.",
          "target": "Address of contracts to be called.",
          "value": "Native token value for contract call."
        }
      }
    },
    "stateVariables": {
      "ops": {
        "return": "address Ops smart contract address",
        "returns": {
          "_0": "address Ops smart contract address"
        }
      },
      "owner": {
        "return": "address Owner of the proxy",
        "returns": {
          "_0": "address Owner of the proxy"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ExecuteCall(address,bytes,uint256,bytes)": {
        "notice": "Emitted when proxy calls a contract successfully in `executeCall`"
      }
    },
    "kind": "user",
    "methods": {
      "batchExecuteCall(address[],bytes[],uint256[])": {
        "notice": "Multicall to different contracts with different datas."
      },
      "executeCall(address,bytes,uint256)": {
        "notice": "Call to a single contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 960,
        "contract": "contracts/opsProxy/OpsProxy.sol:OpsProxy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 963,
        "contract": "contracts/opsProxy/OpsProxy.sol:OpsProxy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5591,
        "contract": "contracts/opsProxy/OpsProxy.sol:OpsProxy",
        "label": "owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}
