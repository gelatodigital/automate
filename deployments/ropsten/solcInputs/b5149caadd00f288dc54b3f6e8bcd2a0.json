{
  "language": "Solidity",
  "sources": {
    "contracts/ExampleWithTreasury/CounterTimedTask.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\nimport {OpsReady} from \"./OpsReady.sol\";\n\ncontract CounterTimedTask is OpsReady {\n    uint256 public count;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address payable _pokeMe) OpsReady(_pokeMe) {}\n\n    // solhint-disable not-rely-on-time\n    function increaseCount(uint256 amount) external onlyOps {\n        count += amount;\n    }\n}\n"
    },
    "contracts/ExampleWithTreasury/OpsReady.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\nabstract contract OpsReady {\n    address payable public immutable pokeMe;\n\n    constructor(address payable _pokeMe) {\n        pokeMe = _pokeMe;\n    }\n\n    modifier onlyOps() {\n        require(msg.sender == pokeMe, \"OpsReady: onlyOps\");\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
