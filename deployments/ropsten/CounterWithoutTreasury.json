{
  "address": "0x4c90775E80b5e646C14aBcDe56d2D4A805F44F2F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pokeMe",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastExecuted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pokeMe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x91f8645687b5c61f81027197b2c0346e3ff12cb94fb42b959c5ed21af11d50aa",
  "receipt": {
    "to": null,
    "from": "0x4f951eCA2C85906Dd8E664CD2470EE161116a2c8",
    "contractAddress": "0x4c90775E80b5e646C14aBcDe56d2D4A805F44F2F",
    "transactionIndex": 1,
    "gasUsed": "884943",
    "logsBloom": "0x
    "blockHash": "0x645872d57f0c569e7830751aed192551177aecd4249bc9404d9f26b7e10748cc",
    "transactionHash": "0x91f8645687b5c61f81027197b2c0346e3ff12cb94fb42b959c5ed21af11d50aa",
    "logs": [],
    "blockNumber": 10918860,
    "cumulativeGasUsed": "905943",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x9C4771560d84222fD8B7d9f15C59193388cC81B3"],
  "solcInputHash": "36b4c67d60f2f3bfcd09e4dc61074ce9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pokeMe\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastExecuted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pokeMe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExampleWithoutTreasury/CounterWithoutTreasury.sol\":\"CounterWithoutTreasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"contracts/ExampleWithoutTreasury/CounterWithoutTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {OpsReady} from \\\"./OpsReady.sol\\\";\\n\\ninterface IPokeMe {\\n    function getFeeDetails() external view returns (uint256, address);\\n}\\n\\ncontract CounterWithoutTreasury is OpsReady {\\n    uint256 public count;\\n    uint256 public lastExecuted;\\n\\n    // solhint-disable no-empty-blocks\\n    constructor(address _pokeMe) OpsReady(_pokeMe) {}\\n\\n    receive() external payable {}\\n\\n    // solhint-disable not-rely-on-time\\n    function increaseCount(uint256 amount) external onlyOps {\\n        require(\\n            ((block.timestamp - lastExecuted) > 180),\\n            \\\"Counter: increaseCount: Time not elapsed\\\"\\n        );\\n\\n        count += amount;\\n        lastExecuted = block.timestamp;\\n\\n        uint256 fee;\\n        address feeToken;\\n\\n        (fee, feeToken) = IPokeMe(pokeMe).getFeeDetails();\\n\\n        _transfer(fee, feeToken);\\n    }\\n}\\n\",\"keccak256\":\"0xbcb2e824f5f107a6877f21dbc73a908288f3b2637b42f47e74acf37c296ba5c6\",\"license\":\"UNLICENSED\"},\"contracts/ExampleWithoutTreasury/OpsReady.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IPokeMe {\\n    function gelato() external view returns (address payable);\\n}\\n\\nabstract contract OpsReady {\\n    address public immutable pokeMe;\\n    address payable public immutable gelato;\\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    constructor(address _pokeMe) {\\n        pokeMe = _pokeMe;\\n        gelato = IPokeMe(_pokeMe).gelato();\\n    }\\n\\n    modifier onlyOps() {\\n        require(msg.sender == pokeMe, \\\"OpsReady: onlyOps\\\");\\n        _;\\n    }\\n\\n    function _transfer(uint256 _amount, address _paymentToken) internal {\\n        if (_paymentToken == ETH) {\\n            (bool success, ) = gelato.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"_transfer: ETH transfer failed\\\");\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_paymentToken), gelato, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb253952f57180d3f05d62b060c0a05e642fb7d5b3da2e16e1f379d3374c36a23\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200114c3803806200114c83398181016040528101906200003791906200015d565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b815260040160206040518083038186803b158015620000b657600080fd5b505afa158015620000cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f1919062000189565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505062000231565b6000815190506200014081620001fd565b92915050565b600081519050620001578162000217565b92915050565b6000602082840312156200017057600080fd5b600062000180848285016200012f565b91505092915050565b6000602082840312156200019c57600080fd5b6000620001ac8482850162000146565b91505092915050565b6000620001c282620001dd565b9050919050565b6000620001d682620001dd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200020881620001b5565b81146200021457600080fd5b50565b6200022281620001c9565b81146200022e57600080fd5b50565b60805160601c60a05160601c610ed36200027960003960008181610327015281816103d101526104a50152600081816101730152818161027301526103630152610ed36000f3fe6080604052600436106100595760003560e01c806306661abd146100655780631c15ff771461009057806346d4adf2146100bb578063573ea575146100e45780638322fff21461010f578063c84eee0d1461013a57610060565b3661006057005b600080fd5b34801561007157600080fd5b5061007a610165565b6040516100879190610cb4565b60405180910390f35b34801561009c57600080fd5b506100a561016b565b6040516100b29190610cb4565b60405180910390f35b3480156100c757600080fd5b506100e260048036038101906100dd919061083f565b610171565b005b3480156100f057600080fd5b506100f9610325565b6040516101069190610b8e565b60405180910390f35b34801561011b57600080fd5b50610124610349565b6040516101319190610b73565b60405180910390f35b34801561014657600080fd5b5061014f610361565b60405161015c9190610b73565b60405180910390f35b60005481565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f690610bf4565b60405180910390fd5b60b46001544261020f9190610d57565b1161024f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024690610c94565b60405180910390fd5b806000808282546102609190610d01565b92505081905550426001819055506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b8152600401604080518083038186803b1580156102d657600080fd5b505afa1580156102ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030e9190610868565b80925081935050506103208282610385565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b7f000000000000000000000000000000000000000000000000000000000000000081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561049f5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168360405161041390610b5e565b60006040518083038185875af1925050503d8060008114610450576040519150601f19603f3d011682016040523d82523d6000602084013e610455565b606091505b5050905080610499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049090610c34565b60405180910390fd5b506104cb565b6104ca817f0000000000000000000000000000000000000000000000000000000000000000846104cf565b5b5050565b6105508363a9059cbb60e01b84846040516024016104ee929190610ba9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610555565b505050565b60006105b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661061c9092919063ffffffff16565b905060008151111561061757808060200190518101906105d79190610816565b610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610c74565b60405180910390fd5b5b505050565b606061062b8484600085610634565b90509392505050565b606082471015610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090610c14565b60405180910390fd5b61068285610748565b6106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b890610c54565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516106ea9190610b47565b60006040518083038185875af1925050503d8060008114610727576040519150601f19603f3d011682016040523d82523d6000602084013e61072c565b606091505b509150915061073c82828661075b565b92505050949350505050565b600080823b905060008111915050919050565b6060831561076b578290506107bb565b60008351111561077e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b29190610bd2565b60405180910390fd5b9392505050565b6000815190506107d181610e58565b92915050565b6000815190506107e681610e6f565b92915050565b6000813590506107fb81610e86565b92915050565b60008151905061081081610e86565b92915050565b60006020828403121561082857600080fd5b6000610836848285016107d7565b91505092915050565b60006020828403121561085157600080fd5b600061085f848285016107ec565b91505092915050565b6000806040838503121561087b57600080fd5b600061088985828601610801565b925050602061089a858286016107c2565b9150509250929050565b6108ad81610d9d565b82525050565b6108bc81610d8b565b82525050565b60006108cd82610ccf565b6108d78185610ce5565b93506108e7818560208601610de5565b80840191505092915050565b60006108fe82610cda565b6109088185610cf0565b9350610918818560208601610de5565b61092181610e47565b840191505092915050565b6000610939601783610cf0565b91507f506f6b654d6552656164793a206f6e6c79506f6b654d650000000000000000006000830152602082019050919050565b6000610979602683610cf0565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006109df601e83610cf0565b91507f5f7472616e736665723a20455448207472616e73666572206661696c656400006000830152602082019050919050565b6000610a1f600083610ce5565b9150600082019050919050565b6000610a39601d83610cf0565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000610a79602a83610cf0565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000610adf602883610cf0565b91507f436f756e7465723a20696e637265617365436f756e743a2054696d65206e6f7460008301527f20656c61707365640000000000000000000000000000000000000000000000006020830152604082019050919050565b610b4181610ddb565b82525050565b6000610b5382846108c2565b915081905092915050565b6000610b6982610a12565b9150819050919050565b6000602082019050610b8860008301846108b3565b92915050565b6000602082019050610ba360008301846108a4565b92915050565b6000604082019050610bbe60008301856108b3565b610bcb6020830184610b38565b9392505050565b60006020820190508181036000830152610bec81846108f3565b905092915050565b60006020820190508181036000830152610c0d8161092c565b9050919050565b60006020820190508181036000830152610c2d8161096c565b9050919050565b60006020820190508181036000830152610c4d816109d2565b9050919050565b60006020820190508181036000830152610c6d81610a2c565b9050919050565b60006020820190508181036000830152610c8d81610a6c565b9050919050565b60006020820190508181036000830152610cad81610ad2565b9050919050565b6000602082019050610cc96000830184610b38565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610d0c82610ddb565b9150610d1783610ddb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4c57610d4b610e18565b5b828201905092915050565b6000610d6282610ddb565b9150610d6d83610ddb565b925082821015610d8057610d7f610e18565b5b828203905092915050565b6000610d9682610dbb565b9050919050565b6000610da882610dbb565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610e03578082015181840152602081019050610de8565b83811115610e12576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b610e6181610d8b565b8114610e6c57600080fd5b50565b610e7881610daf565b8114610e8357600080fd5b50565b610e8f81610ddb565b8114610e9a57600080fd5b5056fea2646970667358221220d3e1c0771022590eb6f4737c16f2f87ca6325e13949d2cfdc57a3db49770178964736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c806306661abd146100655780631c15ff771461009057806346d4adf2146100bb578063573ea575146100e45780638322fff21461010f578063c84eee0d1461013a57610060565b3661006057005b600080fd5b34801561007157600080fd5b5061007a610165565b6040516100879190610cb4565b60405180910390f35b34801561009c57600080fd5b506100a561016b565b6040516100b29190610cb4565b60405180910390f35b3480156100c757600080fd5b506100e260048036038101906100dd919061083f565b610171565b005b3480156100f057600080fd5b506100f9610325565b6040516101069190610b8e565b60405180910390f35b34801561011b57600080fd5b50610124610349565b6040516101319190610b73565b60405180910390f35b34801561014657600080fd5b5061014f610361565b60405161015c9190610b73565b60405180910390f35b60005481565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f690610bf4565b60405180910390fd5b60b46001544261020f9190610d57565b1161024f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024690610c94565b60405180910390fd5b806000808282546102609190610d01565b92505081905550426001819055506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b8152600401604080518083038186803b1580156102d657600080fd5b505afa1580156102ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030e9190610868565b80925081935050506103208282610385565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b7f000000000000000000000000000000000000000000000000000000000000000081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561049f5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168360405161041390610b5e565b60006040518083038185875af1925050503d8060008114610450576040519150601f19603f3d011682016040523d82523d6000602084013e610455565b606091505b5050905080610499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049090610c34565b60405180910390fd5b506104cb565b6104ca817f0000000000000000000000000000000000000000000000000000000000000000846104cf565b5b5050565b6105508363a9059cbb60e01b84846040516024016104ee929190610ba9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610555565b505050565b60006105b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661061c9092919063ffffffff16565b905060008151111561061757808060200190518101906105d79190610816565b610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610c74565b60405180910390fd5b5b505050565b606061062b8484600085610634565b90509392505050565b606082471015610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090610c14565b60405180910390fd5b61068285610748565b6106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b890610c54565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516106ea9190610b47565b60006040518083038185875af1925050503d8060008114610727576040519150601f19603f3d011682016040523d82523d6000602084013e61072c565b606091505b509150915061073c82828661075b565b92505050949350505050565b600080823b905060008111915050919050565b6060831561076b578290506107bb565b60008351111561077e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b29190610bd2565b60405180910390fd5b9392505050565b6000815190506107d181610e58565b92915050565b6000815190506107e681610e6f565b92915050565b6000813590506107fb81610e86565b92915050565b60008151905061081081610e86565b92915050565b60006020828403121561082857600080fd5b6000610836848285016107d7565b91505092915050565b60006020828403121561085157600080fd5b600061085f848285016107ec565b91505092915050565b6000806040838503121561087b57600080fd5b600061088985828601610801565b925050602061089a858286016107c2565b9150509250929050565b6108ad81610d9d565b82525050565b6108bc81610d8b565b82525050565b60006108cd82610ccf565b6108d78185610ce5565b93506108e7818560208601610de5565b80840191505092915050565b60006108fe82610cda565b6109088185610cf0565b9350610918818560208601610de5565b61092181610e47565b840191505092915050565b6000610939601783610cf0565b91507f506f6b654d6552656164793a206f6e6c79506f6b654d650000000000000000006000830152602082019050919050565b6000610979602683610cf0565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006109df601e83610cf0565b91507f5f7472616e736665723a20455448207472616e73666572206661696c656400006000830152602082019050919050565b6000610a1f600083610ce5565b9150600082019050919050565b6000610a39601d83610cf0565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000610a79602a83610cf0565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000610adf602883610cf0565b91507f436f756e7465723a20696e637265617365436f756e743a2054696d65206e6f7460008301527f20656c61707365640000000000000000000000000000000000000000000000006020830152604082019050919050565b610b4181610ddb565b82525050565b6000610b5382846108c2565b915081905092915050565b6000610b6982610a12565b9150819050919050565b6000602082019050610b8860008301846108b3565b92915050565b6000602082019050610ba360008301846108a4565b92915050565b6000604082019050610bbe60008301856108b3565b610bcb6020830184610b38565b9392505050565b60006020820190508181036000830152610bec81846108f3565b905092915050565b60006020820190508181036000830152610c0d8161092c565b9050919050565b60006020820190508181036000830152610c2d8161096c565b9050919050565b60006020820190508181036000830152610c4d816109d2565b9050919050565b60006020820190508181036000830152610c6d81610a2c565b9050919050565b60006020820190508181036000830152610c8d81610a6c565b9050919050565b60006020820190508181036000830152610cad81610ad2565b9050919050565b6000602082019050610cc96000830184610b38565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610d0c82610ddb565b9150610d1783610ddb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4c57610d4b610e18565b5b828201905092915050565b6000610d6282610ddb565b9150610d6d83610ddb565b925082821015610d8057610d7f610e18565b5b828203905092915050565b6000610d9682610dbb565b9050919050565b6000610da882610dbb565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610e03578082015181840152602081019050610de8565b83811115610e12576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b610e6181610d8b565b8114610e6c57600080fd5b50565b610e7881610daf565b8114610e8357600080fd5b50565b610e8f81610ddb565b8114610e9a57600080fd5b5056fea2646970667358221220d3e1c0771022590eb6f4737c16f2f87ca6325e13949d2cfdc57a3db49770178964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1603,
        "contract": "contracts/ExampleWithoutTreasury/CounterWithoutTreasury.sol:CounterWithoutTreasury",
        "label": "count",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1605,
        "contract": "contracts/ExampleWithoutTreasury/CounterWithoutTreasury.sol:CounterWithoutTreasury",
        "label": "lastExecuted",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
